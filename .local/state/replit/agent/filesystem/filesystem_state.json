{"file_contents":{"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"docs/SETUP.md":{"content":"\n# Setup and Deployment Guide\n\nComplete guide for setting up and deploying the Abetworks Modular AI Automation Platform.\n\n## Local Development Setup\n\n### Prerequisites\n\nEnsure you have the following installed:\n- Node.js 18 or higher\n- Python 3.11 or higher\n- npm (comes with Node.js)\n- pip (comes with Python)\n- Git\n- A Neon PostgreSQL database account (or any PostgreSQL provider)\n\n### Step 1: Clone the Repository\n\n```bash\ngit clone <repository-url>\ncd abetworks\n```\n\n### Step 2: Install Dependencies\n\n**Node.js Dependencies:**\n```bash\nnpm install\n```\n\n**Python Dependencies:**\n```bash\ncd python-agents\npip install -r requirements.txt\ncd ..\n```\n\nThis will install all required packages for both the Node.js API and Python agent runtime.\n\n### Step 3: Database Setup\n\n#### Create a Neon Database\n\n1. Go to [Neon](https://neon.tech) and create a free account\n2. Create a new project\n3. Copy the connection string (should look like `postgresql://user:password@host/database?sslmode=require`)\n\n#### Configure Environment Variables\n\n**Root `.env` file (Node.js):**\n```env\nDATABASE_URL=postgresql://user:password@host/database?sslmode=require\nJWT_SECRET=your_very_secure_random_string_minimum_32_characters\nNODE_ENV=development\nPYTHON_AGENT_URL=http://0.0.0.0:8000\nPYTHON_API_KEY=your_secure_api_key_here\n```\n\n**Python `.env` file (`python-agents/.env`):**\n```env\nDATABASE_URL=postgresql://user:password@host/database?sslmode=require\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=your_secure_api_key_here\nOPENAI_API_KEY=sk-your-openai-api-key\n```\n\n**Important:** \n- Never commit `.env` files to version control!\n- Use the same `PYTHON_API_KEY` in both files\n- Use the same `DATABASE_URL` in both files\n- Generate secure keys using `openssl rand -base64 32`\n\n#### Push Database Schema\n\n```bash\nnpm run db:push\n```\n\nThis will create all necessary tables including:\n- Users, Organizations, Tasks (core tables)\n- Modules, ModuleExecutions (AI agent tables)\n- API Keys, Logs, Integrations\n\n### Step 4: Start Development Servers\n\nYou need to run both services simultaneously.\n\n**Terminal 1 - Node.js API:**\n```bash\nnpm run dev\n```\n\n**Terminal 2 - Python Agent Runtime:**\n```bash\ncd python-agents\nuvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\nThe application will start:\n- Node.js API: Port 5000\n- Python Agents: Port 8000\n- Frontend: Via the Replit webview\n\n## Replit Setup\n\n### Step 1: Environment Variables (Secrets)\n\nIn Replit, use the Secrets tool to add the following:\n\n**Required Secrets:**\n1. `DATABASE_URL` - Your Neon PostgreSQL connection string\n2. `JWT_SECRET` - A secure random string for JWT signing (min 32 chars)\n3. `PYTHON_AGENT_URL` - `http://0.0.0.0:8000`\n4. `PYTHON_API_KEY` - Secure API key for Python agent auth\n5. `OPENAI_API_KEY` - Your OpenAI API key (optional, for NLP agent)\n\n**To add secrets:**\n1. Click the lock icon 🔒 in Replit's left sidebar (Tools → Secrets)\n2. Add each secret with the Key and Value\n3. Click \"Add Secret\"\n\n### Step 2: Update Python .env File\n\nThe Python agents also need access to the database. Update `python-agents/.env`:\n\n```env\nDATABASE_URL=postgresql://your-connection-string-here\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=same-as-in-secrets\nOPENAI_API_KEY=sk-your-openai-key\n```\n\n### Step 3: Database Initialization\n\nRun in the Replit Shell:\n\n```bash\nnpm run db:push\n```\n\nThis creates all necessary database tables.\n\n### Step 4: Starting Both Services\n\n**Option 1: Two Shells (Recommended for Development)**\n\nShell 1:\n```bash\nnpm run dev\n```\n\nShell 2:\n```bash\ncd python-agents\nuvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\n**Option 2: Single Command (Production)**\n\nThe `.replit` file is already configured to run both services on deployment.\n\n## Production Deployment on Replit\n\n### Step 1: Configure Secrets\n\nEnsure all environment variables are set in Replit Secrets:\n- ✅ `DATABASE_URL`\n- ✅ `JWT_SECRET`\n- ✅ `PYTHON_AGENT_URL`\n- ✅ `PYTHON_API_KEY`\n- ✅ `OPENAI_API_KEY` (if using AI features)\n\n### Step 2: Update Python .env\n\nUpdate `python-agents/.env` to match your production database:\n\n```env\nDATABASE_URL=<same-as-replit-secret>\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=<same-as-replit-secret>\nOPENAI_API_KEY=<your-openai-key>\n```\n\n### Step 3: Database Migration\n\nEnsure your production database schema is up to date:\n\n```bash\nnpm run db:push\n```\n\n### Step 4: Test Locally First\n\nBefore deploying, test that both services run:\n\n```bash\n# Terminal 1\nnpm run dev\n\n# Terminal 2\ncd python-agents && uvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\nVisit your Replit webview to test:\n- Login/signup works\n- Dashboard loads\n- Modules page loads\n- Agent test interface works\n\n### Step 5: Deploy\n\n1. Click the \"Deploy\" button in Replit\n2. Choose deployment type (Autoscale or Reserved VM)\n3. The deployment will run both services as configured in `.replit`\n4. Set a custom domain if desired\n\n### Post-Deployment Checklist\n\nAfter deployment:\n\n1. ✅ Test all functionality\n2. ✅ Create your first Super Admin account via signup\n3. ✅ Generate API key in Settings\n4. ✅ Test Python agent execution in Modules page\n5. ✅ Verify execution history is recorded\n6. ✅ Test agent configuration modal\n7. ✅ Invite team members\n\n## Database Management\n\n### Viewing Database\n\nUse Drizzle Studio to view and edit database contents:\n\n```bash\nnpm run db:studio\n```\n\nThis opens a web interface to browse tables and data.\n\n### Backup Strategy\n\nFor production:\n\n1. **Neon Backups**: Neon provides automatic backups on paid plans\n2. **Manual Exports**: Use PostgreSQL dump tools for manual backups\n3. **Scheduled Backups**: Set up automated backup scripts\n\n### Migration Strategy\n\nWhen updating the schema:\n\n1. Update `shared/schema.ts`\n2. Test locally first with `npm run db:push`\n3. Verify changes in Drizzle Studio\n4. Deploy to production\n5. Run `npm run db:push` in production shell\n\n## Python Agent Configuration\n\n### Adding New Agents\n\n1. Create a new file in `python-agents/agents/`:\n\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Dict, Any\n\nclass MyCustomAgent(BaseAgent):\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        # Your implementation\n        return {\n            \"status\": \"success\",\n            \"output\": { \"result\": \"Your result here\" }\n        }\n```\n\n2. Register in `python-agents/main.py`:\n\n```python\nfrom agents.my_custom_agent import MyCustomAgent\n\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"data_processor\": DataAgent,\n    \"my_custom_agent\": MyCustomAgent,  # Add here\n}\n```\n\n3. Restart the Python service\n\n### Testing Agents\n\nUse the built-in test interface in the Modules page:\n\n1. Navigate to Modules (`/modules`)\n2. Click \"Test\" button on any agent\n3. Enter JSON input data\n4. Click \"Run Test\"\n5. View results in real-time\n\n### Agent Health Monitoring\n\nCheck agent health via API:\n```bash\ncurl http://0.0.0.0:8000/health\n```\n\nOr through the Node.js API:\n```bash\ncurl http://0.0.0.0:5000/api/modules/health \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n```\n\n## Monitoring and Logging\n\n### Application Logs\n\nMonitor the Replit console for:\n- Server startup messages\n- API request logs\n- Error messages\n- Database connection status\n- Python agent execution logs\n\n### Python Agent Logs\n\nPython agent logs appear in the Python service console:\n- Module execution status\n- OpenAI API calls\n- Database queries\n- Error traces\n\n### Execution History\n\nView all agent executions in the Execution History page:\n1. Navigate to Execution History (`/execution-history`)\n2. Filter by status, module, or date\n3. View detailed execution logs\n4. Export data if needed\n\n### Error Tracking\n\nConsider adding error tracking service integration:\n- Sentry (recommended)\n- LogRocket\n- Rollbar\n\n## Performance Optimization\n\n### Database\n\n- Ensure proper indexes on frequently queried columns\n- Use connection pooling (configured in Drizzle)\n- Monitor query performance\n- Filter by `org_id` in all queries\n\n### Frontend\n\n- Code splitting is already configured via Vite\n- Images should be optimized before upload\n- Use React Query caching effectively\n\n### Backend\n\n- API responses are kept minimal\n- Database queries use proper filtering\n- Multi-tenant isolation is enforced at query level\n\n### Python Agents\n\n- Use connection pooling for database\n- Cache OpenAI responses when appropriate\n- Implement timeout handling\n- Log execution duration\n\n## Security Checklist\n\nBefore going to production:\n\n- ✅ All environment variables set in Replit Secrets\n- ✅ Strong JWT secret (at least 32 random characters)\n- ✅ Secure PYTHON_API_KEY generated\n- ✅ Database uses SSL connections (`sslmode=require`)\n- ✅ CORS configured properly (if needed)\n- ✅ Rate limiting implemented (recommended)\n- ✅ Input validation on all endpoints\n- ✅ SQL injection protection via Drizzle ORM\n- ✅ Python agent `org_id` validation enforced\n- ✅ API key authentication between services\n- ✅ Password requirements enforced\n\n## Troubleshooting\n\n### Database Connection Issues\n\n**Problem:** Cannot connect to database\n\n**Error:** `DATABASE_URL must be set. Did you forget to provision a database?`\n\n**Solutions:**\n- Verify `DATABASE_URL` is set in Replit Secrets\n- Check the database URL format includes `?sslmode=require`\n- Ensure Neon database is active (not paused)\n- Verify network connectivity\n- Check both Node.js and Python have same `DATABASE_URL`\n- Update `python-agents/.env` with the correct URL\n\n### Python Agent Connection Issues\n\n**Problem:** Node.js cannot connect to Python agents\n\n**Solutions:**\n- Verify Python service is running on port 8000\n- Check `PYTHON_AGENT_URL` is set to `http://0.0.0.0:8000`\n- Verify `PYTHON_API_KEY` matches in both services\n- Check firewall/port settings\n- Review Python service logs in second terminal\n\n### Authentication Issues\n\n**Problem:** Users can't log in or API key errors\n\n**Solutions:**\n- Check JWT_SECRET is set and is at least 32 characters\n- Verify user exists in database\n- Check password hash matches\n- Review browser console for errors\n- Verify API key is generated in Settings\n\n### Module Execution Failures\n\n**Problem:** Python agent modules fail to execute\n\n**Solutions:**\n- Check OpenAI API key is valid (for NLP agent)\n- Verify `org_id` isolation is working\n- Review Python agent logs for errors\n- Check input data format matches agent expectations\n- Verify module is registered in MODULE_REGISTRY\n- Ensure Python dependencies are installed\n\n### Build Failures\n\n**Problem:** Application won't start\n\n**Solutions:**\n- Run `npm install` to ensure dependencies are installed\n- Run `pip install -r requirements.txt` for Python\n- Check for TypeScript errors in console\n- Verify all environment variables are set\n- Review console logs for specific errors\n- Check both `.env` files exist\n\n### Port Issues\n\n**Problem:** Port 5000 or 8000 already in use\n\n**Solutions:**\n- Kill existing process on ports\n- Restart the Repl\n- Check for zombie processes\n- Use `lsof -i :5000` or `lsof -i :8000` to find processes\n\n## Feature Testing Checklist\n\n### After Setup, Test These Features:\n\n1. **Authentication**\n   - [ ] Signup creates new organization\n   - [ ] Login works with correct credentials\n   - [ ] Login fails with incorrect credentials\n   - [ ] JWT token is stored in localStorage\n\n2. **Dashboard**\n   - [ ] Metrics display correctly\n   - [ ] Charts render properly\n   - [ ] Data updates on refresh\n\n3. **User Management**\n   - [ ] Admin can invite users\n   - [ ] Users appear in user list\n   - [ ] Role-based permissions work\n\n4. **Modules**\n   - [ ] Modules page displays available agents\n   - [ ] Test interface opens\n   - [ ] Agent execution works\n   - [ ] Results display correctly\n\n5. **Execution History**\n   - [ ] Past executions display\n   - [ ] Filtering works\n   - [ ] Execution details are accurate\n\n6. **Agent Settings**\n   - [ ] Configuration modal opens\n   - [ ] Settings can be updated\n   - [ ] Changes persist\n\n## Scaling Considerations\n\n### Database\n\n- Neon provides automatic scaling on paid plans\n- Consider read replicas for heavy read workloads\n- Monitor connection pool usage\n\n### Application\n\n- Replit deployments auto-scale based on traffic\n- Consider caching layer (Redis) for high-traffic scenarios\n- Use CDN for static assets if needed\n\n### Python Agents\n\n- Scale Python service independently\n- Consider message queue for async processing\n- Implement rate limiting on OpenAI calls\n- Cache frequently used results\n\n## Maintenance Tasks\n\n### Regular Tasks\n\n- **Weekly:** Review application and agent logs\n- **Weekly:** Monitor database size and performance\n- **Monthly:** Review and rotate API keys\n- **Monthly:** Update dependencies\n- **Quarterly:** Security audit\n- **Quarterly:** Performance review\n\n### Updates\n\nTo update dependencies:\n\n**Node.js:**\n```bash\nnpm update\nnpm audit fix\n```\n\n**Python:**\n```bash\ncd python-agents\npip install --upgrade -r requirements.txt\n```\n\nTest thoroughly after updates!\n\n## Support and Resources\n\n- **Replit Docs:** https://docs.replit.com\n- **Drizzle ORM:** https://orm.drizzle.team\n- **FastAPI:** https://fastapi.tiangolo.com\n- **React Query:** https://tanstack.com/query\n- **Shadcn UI:** https://ui.shadcn.com\n- **OpenAI API:** https://platform.openai.com/docs\n- **Neon Database:** https://neon.tech/docs\n\n---\n\nFor additional help, refer to:\n- Main [README.md](../README.md)\n- [COMPLETE_AI_PLATFORM_GUIDE.md](../COMPLETE_AI_PLATFORM_GUIDE.md)\n- [DEPLOYMENT.md](../DEPLOYMENT.md)\n- [API.md](./API.md)\n- [AGENT_DEVELOPMENT.md](./AGENT_DEVELOPMENT.md)\n- Contact the development team\n","size_bytes":13547},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\nimport type { User } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || \"fallback-secret-change-in-production\";\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\nexport function generateToken(user: User): string {\n  return jwt.sign(\n    { \n      id: user.id,\n    },\n    JWT_SECRET,\n    { expiresIn: \"7d\" }\n  );\n}\n\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function requireAuth(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  const token = authHeader.substring(7);\n  const decoded = verifyToken(token);\n\n  if (!decoded || !decoded.id) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n\n  // Fetch the user from the database to verify they exist and get current role/org\n  const user = await storage.getUser(decoded.id);\n\n  if (!user) {\n    return res.status(401).json({ message: \"User not found\" });\n  }\n\n  req.user = user;\n  next();\n}\n\nexport function requireRole(...roles: string[]) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n\nexport function requireOrgAccess(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  // Super admins can access all orgs\n  if (req.user.role === \"super_admin\") {\n    return next();\n  }\n\n  // Regular users and admins can only access their own org\n  const orgIdParam = req.params.orgId || req.body.orgId || req.query.orgId;\n  \n  if (orgIdParam && orgIdParam !== req.user.orgId) {\n    return res.status(403).json({ message: \"Access denied to this organization\" });\n  }\n\n  next();\n}\n","size_bytes":2291},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"COMPLETE_AI_PLATFORM_GUIDE.md":{"content":"\n# Abetworks - Complete AI Automation Platform Transformation Guide\n\n## Table of Contents\n1. [Overview](#overview)\n2. [Platform Identity & Rebranding](#platform-identity--rebranding)\n3. [Architecture & Tech Stack](#architecture--tech-stack)\n4. [Implementation Blueprint](#implementation-blueprint)\n5. [Database Schema](#database-schema)\n6. [Python Agent System](#python-agent-system)\n7. [Node.js Integration Layer](#nodejs-integration-layer)\n8. [Frontend Components](#frontend-components)\n9. [Security & Multi-Tenancy](#security--multi-tenancy)\n10. [Deployment Configuration](#deployment-configuration)\n11. [Complete File Changes Checklist](#complete-file-changes-checklist)\n\n---\n\n## Overview\n\n**Platform Name**: Abetworks - Modular AI Automation Platform\n\n**Core Concept**: Transform from CRM/sales automation to a modular AI automation platform where Python-based AI agents can be dynamically connected, managed, and orchestrated through a TypeScript/React frontend.\n\n**Key Differentiators**:\n- Modular architecture for pluggable AI agents\n- Python microservices for AI/ML workloads\n- Node.js API gateway for orchestration\n- Multi-tenant isolation at every layer\n- Real-time workflow execution\n- Dynamic module loading system\n\n---\n\n## Platform Identity & Rebranding\n\n### Core Positioning Changes\n\n**FROM (CRM Focus)**:\n- Multi-tenant CRM\n- Sales automation\n- Lead generation\n- Customer relationship management\n\n**TO (AI Automation Focus)**:\n- Modular AI automation platform\n- Workflow automation modules\n- Intelligent task orchestration\n- Agent-driven automation\n\n### Terminology Mapping\n\n| OLD (CRM) | NEW (AI Platform) |\n|-----------|-------------------|\n| CRM | Platform / Automation System |\n| Sales automation | AI automation / Workflow automation |\n| Lead generation | Data collection / Input processing |\n| Leads | Inputs / Data points |\n| Customer | User / Entity |\n| Sales | Automation / Workflows |\n| Close deals | Complete workflows |\n\n### Value Propositions\n\n**New Marketing Messages**:\n- ✅ \"Build intelligent workflows with modular AI automation\"\n- ✅ \"Automate complex workflows effortlessly\"\n- ✅ \"Scale your operations with AI\"\n- ✅ \"Build custom automation modules\"\n- ✅ \"Connect any AI agent to your workflows\"\n\n**Remove**:\n- ❌ \"Streamline your sales process\"\n- ❌ \"Close more deals faster\"\n- ❌ \"Never miss a lead\"\n\n---\n\n## Architecture & Tech Stack\n\n### System Architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    Frontend (React + TS)                     │\n│  - Dashboard  - Module Manager  - Workflow Builder           │\n└──────────────────────┬──────────────────────────────────────┘\n                       │ HTTP/REST\n┌──────────────────────▼──────────────────────────────────────┐\n│              Node.js API Gateway (Express + TS)              │\n│  - Auth  - Multi-tenant routing  - Module orchestration      │\n└──────────┬───────────────────────────────────┬──────────────┘\n           │                                   │\n           │ PostgreSQL                        │ HTTP/REST\n           │                                   │\n┌──────────▼──────────┐            ┌──────────▼──────────────┐\n│  Shared Database    │            │  Python Agent Runtime    │\n│  (Multi-tenant)     │◄───────────┤  - NLP  - Data  - ML     │\n└─────────────────────┘            └─────────────────────────┘\n```\n\n### Tech Stack Components\n\n**Frontend**:\n- React 18+ with TypeScript\n- Tailwind CSS + shadcn/ui\n- TanStack Query for state management\n- React Router for navigation\n\n**Backend API**:\n- Node.js + Express + TypeScript\n- JWT authentication\n- PostgreSQL (via Drizzle ORM)\n- RESTful API design\n\n**Agent Runtime**:\n- Python 3.11+\n- FastAPI for REST endpoints\n- psycopg2 for database access\n- OpenAI, LangChain for AI capabilities\n\n**Database**:\n- PostgreSQL (Neon for production)\n- Multi-tenant schema with org_id isolation\n- Drizzle ORM for migrations\n\n**Communication Layer**:\n- REST API (primary)\n- Optional: Redis for message queue\n- Optional: WebSocket for real-time updates\n\n### Communication Options Analysis\n\n#### Option 1: REST API ⭐ (Recommended)\n**When to use**: MVP, simple request/response patterns\n```typescript\n// Node.js → Python\nconst result = await axios.post('http://0.0.0.0:8000/execute', {\n  module_id: 'nlp_processor',\n  org_id: 'org_123',\n  input_data: { text: 'Hello world' }\n});\n```\n\n**Pros**: Simple, HTTP-based, easy debugging\n**Cons**: No real-time bidirectional communication\n\n#### Option 2: Message Queue (Redis/RabbitMQ)\n**When to use**: Long-running tasks, async workflows, high scale\n**Pros**: Asynchronous, retry mechanisms, decoupled\n**Cons**: Additional infrastructure\n\n#### Option 3: gRPC\n**When to use**: High-performance requirements, type-safe contracts\n**Pros**: Fast, bidirectional streaming\n**Cons**: Complex setup, .proto file management\n\n---\n\n## Implementation Blueprint\n\n### Phase 1: Database Schema (Week 1)\n\n#### New Tables Required\n\n**1. Modules Table** - Tracks Python agent modules\n```typescript\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // \"nlp\", \"data\", \"automation\", \"ml\"\n  pythonModule: text(\"python_module\").notNull(), // \"agents.nlp_processor\"\n  endpoint: text(\"endpoint\"), // REST endpoint URL\n  config: text(\"config\"), // JSON configuration\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const moduleRelations = relations(modules, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [modules.orgId],\n    references: [organizations.id],\n  }),\n  executions: many(moduleExecutions),\n}));\n```\n\n**2. Module Executions Table** - Tracks execution history\n```typescript\nexport const moduleExecutions = pgTable(\"module_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: varchar(\"module_id\").notNull().references(() => modules.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").references(() => tasks.id, { onDelete: \"set null\" }),\n  input: text(\"input\"), // JSON input data\n  output: text(\"output\"), // JSON output data\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  error: text(\"error\"),\n  startedAt: timestamp(\"started_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  duration: integer(\"duration\"), // milliseconds\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n});\n\nexport const moduleExecutionRelations = relations(moduleExecutions, ({ one }) => ({\n  module: one(modules, {\n    fields: [moduleExecutions.moduleId],\n    references: [modules.id],\n  }),\n  task: one(tasks, {\n    fields: [moduleExecutions.taskId],\n    references: [tasks.id],\n  }),\n  organization: one(organizations, {\n    fields: [moduleExecutions.orgId],\n    references: [organizations.id],\n  }),\n}));\n```\n\n**3. Workflows Table** - Chain multiple agents\n```typescript\nexport const workflows = pgTable(\"workflows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  steps: text(\"steps\"), // JSON array of module IDs and configs\n  trigger: text(\"trigger\"), // \"manual\", \"schedule\", \"webhook\"\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n```\n\n### Phase 2: Python Agent Infrastructure (Week 2)\n\n#### Directory Structure\n```\n/python-agents/\n├── requirements.txt\n├── config.py\n├── main.py                    # FastAPI server\n├── .env.example\n├── agents/\n│   ├── __init__.py\n│   ├── base_agent.py         # Abstract base class\n│   ├── nlp_agent.py          # NLP processing\n│   ├── data_agent.py         # Data transformation\n│   ├── vision_agent.py       # Image processing\n│   └── automation_agent.py   # Workflow automation\n├── utils/\n│   ├── __init__.py\n│   ├── db_connector.py       # PostgreSQL connection\n│   ├── api_client.py         # Node.js API client\n│   └── logger.py             # Logging utility\n└── tests/\n    ├── test_base_agent.py\n    └── test_nlp_agent.py\n```\n\n#### requirements.txt\n```txt\nfastapi==0.109.0\nuvicorn[standard]==0.27.0\npsycopg2-binary==2.9.9\npydantic==2.5.0\npydantic-settings==2.1.0\npython-dotenv==1.0.0\nhttpx==0.26.0\npython-jose[cryptography]==3.3.0\n\n# AI/ML libraries\nopenai==1.10.0\nlangchain==0.1.0\nlangchain-openai==0.0.5\nanthropic==0.8.0\n\n# Data processing\npandas==2.1.4\nnumpy==1.26.3\n\n# Optional: Message queue\nredis==5.0.1\ncelery==5.3.6\n\n# Monitoring\nprometheus-client==0.19.0\n```\n\n#### Base Agent Class (agents/base_agent.py)\n```python\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\nimport psycopg2\nfrom datetime import datetime\nimport json\nimport os\n\nclass BaseAgent(ABC):\n    \"\"\"Abstract base class for all modular AI agents\"\"\"\n    \n    def __init__(self, org_id: str, config: Optional[Dict[str, Any]] = None):\n        self.org_id = org_id\n        self.config = config or {}\n        self.db_conn = None\n        self._connect_db()\n    \n    def _connect_db(self):\n        \"\"\"Establish database connection\"\"\"\n        try:\n            self.db_conn = psycopg2.connect(os.getenv(\"DATABASE_URL\"))\n        except Exception as e:\n            print(f\"Database connection error: {e}\")\n            raise\n    \n    @abstractmethod\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Main execution method - MUST be implemented by each agent\n        \n        Args:\n            input_data: Input data for the agent\n            \n        Returns:\n            Dict with 'status', 'output', and optional 'error'\n        \"\"\"\n        pass\n    \n    async def validate_org_access(self, resource_id: str, table: str) -> bool:\n        \"\"\"Ensure multi-tenant isolation\"\"\"\n        cursor = self.db_conn.cursor()\n        try:\n            cursor.execute(\n                f\"SELECT org_id FROM {table} WHERE id = %s\",\n                (resource_id,)\n            )\n            result = cursor.fetchone()\n            return result and result[0] == self.org_id\n        finally:\n            cursor.close()\n    \n    async def log_execution(\n        self,\n        module_id: str,\n        task_id: Optional[str],\n        status: str,\n        output: Optional[Any] = None,\n        error: Optional[str] = None,\n        duration: Optional[int] = None\n    ):\n        \"\"\"Log execution to module_executions table\"\"\"\n        cursor = self.db_conn.cursor()\n        try:\n            cursor.execute(\n                \"\"\"\n                INSERT INTO module_executions \n                (module_id, task_id, org_id, status, output, error, duration, started_at, completed_at)\n                VALUES (%s, %s, %s, %s, %s, %s, %s, NOW(), NOW())\n                RETURNING id\n                \"\"\",\n                (\n                    module_id,\n                    task_id,\n                    self.org_id,\n                    status,\n                    json.dumps(output) if output else None,\n                    error,\n                    duration\n                )\n            )\n            self.db_conn.commit()\n            return cursor.fetchone()[0]\n        except Exception as e:\n            self.db_conn.rollback()\n            print(f\"Error logging execution: {e}\")\n        finally:\n            cursor.close()\n    \n    def __del__(self):\n        \"\"\"Cleanup database connection\"\"\"\n        if self.db_conn:\n            self.db_conn.close()\n```\n\n#### Example NLP Agent (agents/nlp_agent.py)\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Dict, Any\nimport openai\nimport os\n\nclass NLPAgent(BaseAgent):\n    \"\"\"Natural Language Processing agent using OpenAI\"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            text = input_data.get('text', '')\n            task_type = input_data.get('task', 'summarize')  # summarize, sentiment, extract\n            \n            # Configure OpenAI\n            openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n            \n            # Build prompt based on task type\n            prompts = {\n                'summarize': f\"Summarize the following text concisely:\\n\\n{text}\",\n                'sentiment': f\"Analyze the sentiment of this text (positive/negative/neutral):\\n\\n{text}\",\n                'extract': f\"Extract key information from this text:\\n\\n{text}\",\n            }\n            \n            # Execute OpenAI request\n            response = openai.ChatCompletion.create(\n                model=self.config.get('model', 'gpt-4'),\n                messages=[\n                    {\"role\": \"system\", \"content\": \"You are a helpful AI assistant.\"},\n                    {\"role\": \"user\", \"content\": prompts.get(task_type, prompts['summarize'])}\n                ],\n                temperature=0.7,\n                max_tokens=self.config.get('max_tokens', 500)\n            )\n            \n            result = response.choices[0].message.content\n            \n            return {\n                \"status\": \"success\",\n                \"output\": {\n                    \"result\": result,\n                    \"task_type\": task_type,\n                    \"model\": self.config.get('model', 'gpt-4'),\n                    \"tokens_used\": response.usage.total_tokens\n                }\n            }\n            \n        except Exception as e:\n            return {\n                \"status\": \"error\",\n                \"error\": str(e)\n            }\n```\n\n#### FastAPI Server (main.py)\n```python\nfrom fastapi import FastAPI, HTTPException, Depends, Header\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any\nimport os\nfrom dotenv import load_dotenv\nimport time\n\n# Import agents\nfrom agents.nlp_agent import NLPAgent\nfrom agents.data_agent import DataAgent\n\nload_dotenv()\n\napp = FastAPI(\n    title=\"Abetworks AI Automation Platform\",\n    description=\"Modular AI automation agents\",\n    version=\"1.0.0\"\n)\n\n# Request/Response models\nclass ExecutionRequest(BaseModel):\n    module_id: str\n    org_id: str\n    task_id: Optional[str] = None\n    input_data: Dict[str, Any]\n\nclass ExecutionResponse(BaseModel):\n    execution_id: str\n    status: str\n    output: Optional[Dict[str, Any]] = None\n    error: Optional[str] = None\n    duration: Optional[int] = None\n\n# Authentication\nasync def verify_api_key(x_api_key: str = Header(...)):\n    \"\"\"Verify API key from Node.js backend\"\"\"\n    # In production, verify against database\n    valid_key = os.getenv(\"PYTHON_API_KEY\", \"abw_dev_key\")\n    if x_api_key != valid_key:\n        raise HTTPException(status_code=401, detail=\"Invalid API key\")\n    return x_api_key\n\n# Module registry - maps module_id to agent class\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"data_processor\": DataAgent,\n}\n\n@app.post(\"/execute\", response_model=ExecutionResponse)\nasync def execute_module(\n    request: ExecutionRequest,\n    api_key: str = Depends(verify_api_key)\n):\n    \"\"\"Execute a Python agent module\"\"\"\n    start_time = time.time()\n    \n    try:\n        # Get agent class from registry\n        agent_class = MODULE_REGISTRY.get(request.module_id)\n        if not agent_class:\n            raise HTTPException(status_code=404, detail=f\"Module {request.module_id} not found\")\n        \n        # Instantiate and execute agent\n        agent = agent_class(org_id=request.org_id)\n        result = await agent.execute(request.input_data)\n        \n        duration = int((time.time() - start_time) * 1000)  # milliseconds\n        \n        # Log execution\n        execution_id = await agent.log_execution(\n            module_id=request.module_id,\n            task_id=request.task_id,\n            status=result.get(\"status\", \"completed\"),\n            output=result.get(\"output\"),\n            error=result.get(\"error\"),\n            duration=duration\n        )\n        \n        return ExecutionResponse(\n            execution_id=execution_id or f\"exec_{request.task_id}\",\n            status=result.get(\"status\", \"completed\"),\n            output=result.get(\"output\"),\n            error=result.get(\"error\"),\n            duration=duration\n        )\n        \n    except Exception as e:\n        duration = int((time.time() - start_time) * 1000)\n        return ExecutionResponse(\n            execution_id=\"\",\n            status=\"failed\",\n            error=str(e),\n            duration=duration\n        )\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"service\": \"python-agents\",\n        \"modules\": list(MODULE_REGISTRY.keys())\n    }\n\n@app.get(\"/modules\")\nasync def list_modules(api_key: str = Depends(verify_api_key)):\n    \"\"\"List available modules\"\"\"\n    return {\n        \"modules\": [\n            {\"id\": module_id, \"name\": agent_class.__name__}\n            for module_id, agent_class in MODULE_REGISTRY.items()\n        ]\n    }\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True\n    )\n```\n\n#### .env.example\n```bash\nDATABASE_URL=postgresql://user:password@host:5432/database\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=abw_your_api_key_here\nOPENAI_API_KEY=sk-your-openai-key\n```\n\n### Phase 3: Node.js Integration (Week 2-3)\n\n#### Python Agent Client (server/python-agent-client.ts)\n```typescript\nimport axios, { AxiosError } from 'axios';\n\nconst PYTHON_AGENT_URL = process.env.PYTHON_AGENT_URL || 'http://0.0.0.0:8000';\n\ninterface ExecutionRequest {\n  module_id: string;\n  org_id: string;\n  task_id?: string;\n  input_data: any;\n}\n\ninterface ExecutionResponse {\n  execution_id: string;\n  status: string;\n  output?: any;\n  error?: string;\n  duration?: number;\n}\n\nexport class PythonAgentClient {\n  private apiKey: string;\n  \n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n  \n  async executeModule(\n    moduleId: string,\n    orgId: string,\n    inputData: any,\n    taskId?: string\n  ): Promise<ExecutionResponse> {\n    try {\n      const response = await axios.post<ExecutionResponse>(\n        `${PYTHON_AGENT_URL}/execute`,\n        {\n          module_id: moduleId,\n          org_id: orgId,\n          task_id: taskId,\n          input_data: inputData\n        } as ExecutionRequest,\n        {\n          headers: {\n            'X-API-Key': this.apiKey,\n            'Content-Type': 'application/json'\n          },\n          timeout: 60000 // 60 seconds\n        }\n      );\n      \n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        const axiosError = error as AxiosError;\n        throw new Error(\n          `Python agent execution failed: ${axiosError.response?.data || axiosError.message}`\n        );\n      }\n      throw error;\n    }\n  }\n  \n  async healthCheck(): Promise<{ status: string; service: string; modules?: string[] }> {\n    try {\n      const response = await axios.get(`${PYTHON_AGENT_URL}/health`, {\n        timeout: 5000\n      });\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        service: 'python-agents',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n  \n  async listModules(): Promise<{ modules: Array<{ id: string; name: string }> }> {\n    try {\n      const response = await axios.get(`${PYTHON_AGENT_URL}/modules`, {\n        headers: {\n          'X-API-Key': this.apiKey\n        },\n        timeout: 5000\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to list modules: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n```\n\n#### API Routes Addition (add to server/routes.ts)\n```typescript\n// Execute Python module\napp.post(\"/api/modules/:id/execute\", requireAuth, async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    const { inputData, taskId } = req.body;\n    \n    // Get organization's API key for Python service\n    const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n    if (!apiKeys.length) {\n      return res.status(400).json({ message: \"No API key configured for Python agents\" });\n    }\n    \n    const client = new PythonAgentClient(apiKeys[0].key);\n    const result = await client.executeModule(\n      id,\n      req.user!.orgId,\n      inputData,\n      taskId\n    );\n    \n    res.json(result);\n  } catch (error: any) {\n    console.error(\"Module execution error:\", error);\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Check Python agent health\napp.get(\"/api/modules/health\", requireAuth, async (req: AuthRequest, res) => {\n  try {\n    const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n    if (!apiKeys.length) {\n      return res.status(400).json({ message: \"No API key configured\" });\n    }\n    \n    const client = new PythonAgentClient(apiKeys[0].key);\n    const health = await client.healthCheck();\n    res.json(health);\n  } catch (error: any) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// List available Python modules\napp.get(\"/api/modules/available\", requireAuth, async (req: AuthRequest, res) => {\n  try {\n    const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n    if (!apiKeys.length) {\n      return res.status(400).json({ message: \"No API key configured\" });\n    }\n    \n    const client = new PythonAgentClient(apiKeys[0].key);\n    const modules = await client.listModules();\n    res.json(modules);\n  } catch (error: any) {\n    res.status(500).json({ message: error.message });\n  }\n});\n```\n\n### Phase 4: Frontend Updates (Week 3)\n\n#### Update Agents Page UI\nFocus on module management rather than generic agents.\n\n---\n\n## Security & Multi-Tenancy\n\n### Critical Security Rules\n\n1. **Always validate org_id** in every Python agent query\n2. **Use API keys** for Node.js ↔ Python authentication\n3. **Database queries MUST filter by org_id**\n4. **Never trust client-side org_id** - always get from JWT\n5. **Sanitize all inputs** before passing to Python agents\n\n### Example Secure Query Pattern\n```python\n# ✅ CORRECT - Filters by org_id\ndef get_tasks(self, org_id: str):\n    cursor = self.db_conn.cursor()\n    cursor.execute(\n        \"SELECT * FROM tasks WHERE org_id = %s\",\n        (org_id,)\n    )\n    return cursor.fetchall()\n\n# ❌ WRONG - No org_id filter\ndef get_tasks_wrong(self):\n    cursor = self.db_conn.cursor()\n    cursor.execute(\"SELECT * FROM tasks\")  # Exposes all orgs!\n    return cursor.fetchall()\n```\n\n---\n\n## Deployment Configuration\n\n### Environment Variables\n\n**Node.js (.env)**\n```bash\nDATABASE_URL=postgresql://...\nJWT_SECRET=your-secret-key\nPYTHON_AGENT_URL=http://0.0.0.0:8000\nNODE_ENV=production\n```\n\n**Python (.env in /python-agents)**\n```bash\nDATABASE_URL=postgresql://...\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=abw_production_key\nOPENAI_API_KEY=sk-...\n```\n\n### Running Both Services\n\n**Development (Replit)**\nCreate workflow that runs both services:\n```bash\n# Terminal 1: Node.js\nnpm run dev\n\n# Terminal 2: Python agents\ncd python-agents && uvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\n**Production Configuration**\nUpdate deployment to run both:\n```bash\nnpm run start & cd python-agents && uvicorn main:app --host 0.0.0.0 --port 8000\n```\n\n---\n\n## Complete File Changes Checklist\n\n### Rebranding Changes\n\n#### README.md\n- [ ] Title: \"Abetworks - Modular AI Automation Platform\"\n- [ ] Description: Focus on AI automation, not CRM\n- [ ] Features: Replace sales/leads with modules/workflows\n- [ ] Add: AI agent architecture section\n\n#### client/index.html\n- [ ] Line 6: Update meta description\n- [ ] Line 8: Title → \"Abetworks - AI Automation Platform\"\n- [ ] Lines 14-16: Update Open Graph tags\n\n#### replit.md\n- [ ] Line 1: Update title\n- [ ] Overview: Replace CRM language\n\n#### design_guidelines.md\n- [ ] Line 1: Update title\n- [ ] Replace all CRM references\n\n#### docs/API.md\n- [ ] Update title and descriptions\n- [ ] Focus on automation modules\n\n#### docs/SETUP.md\n- [ ] Update introduction\n- [ ] Add Python agent setup section\n\n### UI Text Changes\n\n#### client/src/pages/dashboard.tsx\nReplace metrics:\n- [ ] \"Leads Generated\" → \"Workflows Active\"\n- [ ] Add \"Active Modules\" metric\n\n#### client/src/pages/agents.tsx\n- [ ] Line 19: \"Modular AI agents for intelligent automation\"\n- [ ] Line 38: Update description for automation focus\n\n#### client/src/pages/tasks.tsx\n- [ ] Update to show \"automation workflows\"\n\n### Code Structure Changes\n\n#### shared/schema.ts\n- [ ] Add `modules` table\n- [ ] Add `moduleExecutions` table\n- [ ] Add `workflows` table (optional)\n\n#### server/python-agent-client.ts\n- [ ] Implement PythonAgentClient class\n- [ ] Add executeModule, healthCheck, listModules methods\n\n#### server/routes.ts\n- [ ] Add `/api/modules/:id/execute` endpoint\n- [ ] Add `/api/modules/health` endpoint\n- [ ] Add `/api/modules/available` endpoint\n\n#### Python Infrastructure\n- [ ] Create `/python-agents` directory\n- [ ] Add requirements.txt\n- [ ] Implement base_agent.py\n- [ ] Create example agents (nlp_agent.py, data_agent.py)\n- [ ] Implement main.py FastAPI server\n- [ ] Add .env.example\n\n---\n\n## Migration Timeline\n\n### Week 1: Foundation\n- [ ] Review and approve architecture\n- [ ] Set up Python environment on Replit\n- [ ] Create database schema changes\n- [ ] Run migrations\n\n### Week 2: Integration\n- [ ] Implement Python base agent class\n- [ ] Create FastAPI server\n- [ ] Build PythonAgentClient in Node.js\n- [ ] Test basic connectivity\n\n### Week 3: Agents & UI\n- [ ] Build first Python agent (NLP)\n- [ ] Add API routes for module execution\n- [ ] Update frontend for module management\n- [ ] Test end-to-end workflow\n\n### Week 4: Production\n- [ ] Apply all rebranding changes\n- [ ] Configure dual-service deployment\n- [ ] Security audit (multi-tenancy)\n- [ ] Performance testing\n- [ ] Documentation updates\n\n---\n\n## Future Enhancements\n\n1. **Module Marketplace**: Allow users to install pre-built agents\n2. **Visual Workflow Builder**: Drag-and-drop workflow orchestration\n3. **Real-time Monitoring**: WebSocket for live execution updates\n4. **Agent Learning**: Store execution history for optimization\n5. **Custom Agent SDK**: Let users build their own agents\n6. **Integration Hub**: Pre-built connectors for popular APIs\n\n---\n\n## Appendix: Quick Reference\n\n### Key Commands\n```bash\n# Start Node.js\nnpm run dev\n\n# Start Python agents\ncd python-agents && uvicorn main:app --host 0.0.0.0 --port 8000 --reload\n\n# Run migrations\nnpm run db:push\n\n# Install Python deps\ncd python-agents && pip install -r requirements.txt\n```\n\n### Important Ports\n- **5000**: Node.js API\n- **8000**: Python agents\n- **5432**: PostgreSQL\n\n### Critical Files\n- `shared/schema.ts` - Database schema\n- `server/python-agent-client.ts` - Python communication\n- `python-agents/agents/base_agent.py` - Agent base class\n- `python-agents/main.py` - FastAPI server\n\n---\n\n**End of Guide**\n\nThis document serves as the complete blueprint for transforming the application into a modular AI automation platform. All sections can be implemented independently or as a complete migration.\n","size_bytes":28300},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/storage.ts":{"content":"// Reference: javascript_database blueprint integration\nimport {\n  users,\n  organizations,\n  agentCatalog,\n  agentSubscriptions,\n  agentData,\n  tasks,\n  logs,\n  integrations,\n  apiKeys,\n  resourceUsage,\n  modules,\n  moduleExecutions,\n  type User,\n  type InsertUser,\n  type Organization,\n  type InsertOrganization,\n  type AgentCatalog,\n  type InsertAgentCatalog,\n  type AgentSubscription,\n  type InsertAgentSubscription,\n  type AgentData,\n  type InsertAgentData,\n  type Task,\n  type InsertTask,\n  type Log,\n  type InsertLog,\n  type Integration,\n  type InsertIntegration,\n  type ApiKey,\n  type InsertApiKey,\n  type ResourceUsage,\n  type InsertResourceUsage,\n  type Module,\n  type InsertModule,\n  type ModuleExecution,\n  type InsertModuleExecution,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(orgId: string): Promise<User[]>;\n  getAllUsersGlobal(): Promise<User[]>;\n  deleteUser(id: string, orgId: string): Promise<void>;\n  updateUserLastLogin(id: string): Promise<void>;\n\n  // Organizations\n  getOrganization(id: string): Promise<Organization | undefined>;\n  createOrganization(org: InsertOrganization): Promise<Organization>;\n\n  // Agent Catalog\n  getAllAgentCatalog(): Promise<AgentCatalog[]>;\n  getAgentCatalog(id: string): Promise<AgentCatalog | undefined>;\n  createAgentCatalog(agent: InsertAgentCatalog): Promise<AgentCatalog>;\n  updateAgentCatalog(id: string, updates: Partial<typeof agentCatalog.$inferInsert>): Promise<void>;\n  deleteAgentCatalog(id: string): Promise<void>;\n\n  // Agent Subscriptions (Which agents each org has activated)\n  getAllAgentSubscriptions(orgId: string): Promise<AgentSubscription[]>;\n  getAgentSubscription(id: string, orgId: string): Promise<AgentSubscription | undefined>;\n  getAgentSubscriptionByAgentId(agentId: string, orgId: string): Promise<AgentSubscription | undefined>;\n  createAgentSubscription(subscription: InsertAgentSubscription): Promise<AgentSubscription>;\n  updateAgentSubscriptionStatus(id: string, orgId: string, status: \"active\" | \"inactive\" | \"error\"): Promise<void>;\n  deleteAgentSubscription(id: string, orgId: string): Promise<void>;\n\n  // Agent Data (Store agent-specific data)\n  getAllAgentData(subscriptionId: string, orgId: string): Promise<AgentData[]>;\n  getAgentData(id: string, orgId: string): Promise<AgentData | undefined>;\n  createAgentData(data: InsertAgentData): Promise<AgentData>;\n  updateAgentData(id: string, orgId: string, data: string): Promise<void>;\n\n  // Tasks\n  getAllTasks(orgId: string): Promise<Task[]>;\n  getTask(id: string, orgId: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTaskStatus(\n    id: string,\n    orgId: string,\n    status: \"pending\" | \"running\" | \"completed\" | \"failed\",\n    result?: string\n  ): Promise<void>;\n\n  // Logs\n  getAllLogs(orgId: string, limit?: number): Promise<Log[]>;\n  createLog(log: InsertLog): Promise<Log>;\n\n  // Integrations\n  getAllIntegrations(orgId: string): Promise<Integration[]>;\n  createIntegration(integration: InsertIntegration): Promise<Integration>;\n\n  // API Keys\n  getAllApiKeys(orgId: string): Promise<ApiKey[]>;\n  createApiKey(apiKey: InsertApiKey): Promise<ApiKey>;\n  deleteApiKey(id: string, orgId: string): Promise<void>;\n\n  // Resource Usage\n  getResourceUsage(orgId: string): Promise<ResourceUsage[]>;\n  createResourceUsage(usage: InsertResourceUsage): Promise<ResourceUsage>;\n\n  // Modules\n  getAllModules(orgId: string): Promise<Module[]>;\n  getModule(id: string, orgId: string): Promise<Module | undefined>;\n  createModule(module: InsertModule): Promise<Module>;\n  updateModuleStatus(\n    id: string,\n    orgId: string,\n    status: \"active\" | \"inactive\" | \"error\"\n  ): Promise<void>;\n  deleteModule(id: string, orgId: string): Promise<void>;\n  updateModuleConfig(id: string, orgId: string, userConfig: string): Promise<void>;\n\n  // Module Executions\n  getAllModuleExecutions(orgId: string, limit?: number): Promise<ModuleExecution[]>;\n  getModuleExecution(id: string, orgId: string): Promise<ModuleExecution | undefined>;\n  getModuleExecutionsByModule(moduleId: string, orgId: string, limit?: number): Promise<ModuleExecution[]>;\n  createModuleExecution(execution: InsertModuleExecution): Promise<ModuleExecution>;\n  updateModuleExecution(\n    id: string,\n    orgId: string,\n    status: \"pending\" | \"running\" | \"completed\" | \"failed\",\n    output?: string,\n    error?: string\n  ): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getAllUsers(orgId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.orgId, orgId));\n  }\n\n  async getAllUsersGlobal(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async deleteUser(id: string, orgId: string): Promise<void> {\n    await db.delete(users).where(and(eq(users.id, id), eq(users.orgId, orgId)));\n  }\n\n  async updateUserLastLogin(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastLogin: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  // Organizations\n  async getOrganization(id: string): Promise<Organization | undefined> {\n    const [org] = await db\n      .select()\n      .from(organizations)\n      .where(eq(organizations.id, id));\n    return org || undefined;\n  }\n\n  async createOrganization(org: InsertOrganization): Promise<Organization> {\n    const [organization] = await db\n      .insert(organizations)\n      .values(org)\n      .returning();\n    return organization;\n  }\n\n  // Agent Catalog\n  async getAllAgentCatalog(): Promise<AgentCatalog[]> {\n    return await db.select().from(agentCatalog).where(eq(agentCatalog.isActive, true));\n  }\n\n  async getAgentCatalog(id: string): Promise<AgentCatalog | undefined> {\n    const [agent] = await db\n      .select()\n      .from(agentCatalog)\n      .where(eq(agentCatalog.id, id))\n      .limit(1);\n    return agent;\n  }\n\n  async updateAgentCatalog(id: string, updates: Partial<typeof agentCatalog.$inferInsert>) {\n    await db\n      .update(agentCatalog)\n      .set(updates)\n      .where(eq(agentCatalog.id, id));\n  }\n\n  async deleteAgentCatalog(id: string) {\n    await db\n      .delete(agentCatalog)\n      .where(eq(agentCatalog.id, id));\n  }\n\n  async createAgentCatalog(agent: InsertAgentCatalog): Promise<AgentCatalog> {\n    const [newAgent] = await db.insert(agentCatalog).values(agent).returning();\n    return newAgent;\n  }\n\n  // Agent Subscriptions\n  async getAllAgentSubscriptions(orgId: string): Promise<AgentSubscription[]> {\n    return await db.select().from(agentSubscriptions).where(eq(agentSubscriptions.orgId, orgId));\n  }\n\n  async getAgentSubscription(id: string, orgId: string): Promise<AgentSubscription | undefined> {\n    const [subscription] = await db.select().from(agentSubscriptions).where(\n      and(eq(agentSubscriptions.id, id), eq(agentSubscriptions.orgId, orgId))\n    );\n    return subscription || undefined;\n  }\n\n  async getAgentSubscriptionByAgentId(agentId: string, orgId: string): Promise<AgentSubscription | undefined> {\n    const [subscription] = await db.select().from(agentSubscriptions).where(\n      and(eq(agentSubscriptions.agentId, agentId), eq(agentSubscriptions.orgId, orgId))\n    );\n    return subscription || undefined;\n  }\n\n  async createAgentSubscription(subscription: InsertAgentSubscription): Promise<AgentSubscription> {\n    const [newSubscription] = await db.insert(agentSubscriptions).values(subscription).returning();\n    return newSubscription;\n  }\n\n  async updateAgentSubscriptionStatus(id: string, orgId: string, status: \"active\" | \"inactive\" | \"error\"): Promise<void> {\n    await db.update(agentSubscriptions).set({ status, lastUsedAt: new Date() }).where(\n      and(eq(agentSubscriptions.id, id), eq(agentSubscriptions.orgId, orgId))\n    );\n  }\n\n  async deleteAgentSubscription(id: string, orgId: string): Promise<void> {\n    await db.delete(agentSubscriptions).where(\n      and(eq(agentSubscriptions.id, id), eq(agentSubscriptions.orgId, orgId))\n    );\n  }\n\n  // Agent Data\n  async getAllAgentData(subscriptionId: string, orgId: string): Promise<AgentData[]> {\n    return await db.select().from(agentData).where(\n      and(eq(agentData.subscriptionId, subscriptionId), eq(agentData.orgId, orgId))\n    );\n  }\n\n  async getAgentData(id: string, orgId: string): Promise<AgentData | undefined> {\n    const [data] = await db.select().from(agentData).where(\n      and(eq(agentData.id, id), eq(agentData.orgId, orgId))\n    );\n    return data || undefined;\n  }\n\n  async createAgentData(data: InsertAgentData): Promise<AgentData> {\n    const [newData] = await db.insert(agentData).values(data).returning();\n    return newData;\n  }\n\n  async updateAgentData(id: string, orgId: string, data: string): Promise<void> {\n    await db.update(agentData).set({ data, updatedAt: new Date() }).where(\n      and(eq(agentData.id, id), eq(agentData.orgId, orgId))\n    );\n  }\n\n  // Tasks\n  async getAllTasks(orgId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.orgId, orgId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTask(id: string, orgId: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(and(eq(tasks.id, id), eq(tasks.orgId, orgId)));\n    return task || undefined;\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    return newTask;\n  }\n\n  async updateTaskStatus(\n    id: string,\n    orgId: string,\n    status: \"pending\" | \"running\" | \"completed\" | \"failed\",\n    result?: string\n  ): Promise<void> {\n    const updateData: any = { status };\n    if (status === \"completed\" || status === \"failed\") {\n      updateData.completedAt = new Date();\n    }\n    if (result) {\n      updateData.result = result;\n    }\n    await db.update(tasks).set(updateData).where(and(eq(tasks.id, id), eq(tasks.orgId, orgId)));\n  }\n\n  // Logs\n  async getAllLogs(orgId: string, limit = 50): Promise<Log[]> {\n    return await db\n      .select()\n      .from(logs)\n      .where(eq(logs.orgId, orgId))\n      .orderBy(desc(logs.timestamp))\n      .limit(limit);\n  }\n\n  async createLog(log: InsertLog): Promise<Log> {\n    const [newLog] = await db.insert(logs).values(log).returning();\n    return newLog;\n  }\n\n  // Integrations\n  async getAllIntegrations(orgId: string): Promise<Integration[]> {\n    return await db\n      .select()\n      .from(integrations)\n      .where(eq(integrations.orgId, orgId));\n  }\n\n  async createIntegration(\n    integration: InsertIntegration\n  ): Promise<Integration> {\n    const [newIntegration] = await db\n      .insert(integrations)\n      .values(integration)\n      .returning();\n    return newIntegration;\n  }\n\n  // API Keys\n  async getAllApiKeys(orgId: string): Promise<ApiKey[]> {\n    return await db.select().from(apiKeys).where(eq(apiKeys.orgId, orgId));\n  }\n\n  async createApiKey(apiKey: InsertApiKey): Promise<ApiKey> {\n    const [newApiKey] = await db.insert(apiKeys).values(apiKey).returning();\n    return newApiKey;\n  }\n\n  async deleteApiKey(id: string, orgId: string): Promise<void> {\n    await db.delete(apiKeys).where(and(eq(apiKeys.id, id), eq(apiKeys.orgId, orgId)));\n  }\n\n  // Resource Usage\n  async getResourceUsage(orgId: string): Promise<ResourceUsage[]> {\n    return await db\n      .select()\n      .from(resourceUsage)\n      .where(eq(resourceUsage.orgId, orgId))\n      .orderBy(desc(resourceUsage.timestamp));\n  }\n\n  async createResourceUsage(usage: InsertResourceUsage): Promise<ResourceUsage> {\n    const [newUsage] = await db\n      .insert(resourceUsage)\n      .values(usage)\n      .returning();\n    return newUsage;\n  }\n\n  // Modules\n  async getAllModules(orgId: string): Promise<Module[]> {\n    return await db\n      .select()\n      .from(modules)\n      .where(eq(modules.orgId, orgId))\n      .orderBy(desc(modules.createdAt));\n  }\n\n  async getModule(id: string, orgId: string): Promise<Module | undefined> {\n    const [module] = await db\n      .select()\n      .from(modules)\n      .where(and(eq(modules.id, id), eq(modules.orgId, orgId)));\n    return module || undefined;\n  }\n\n  async createModule(module: InsertModule): Promise<Module> {\n    const [newModule] = await db.insert(modules).values(module).returning();\n    return newModule;\n  }\n\n  async updateModuleStatus(\n    id: string,\n    orgId: string,\n    status: \"active\" | \"inactive\" | \"error\"\n  ): Promise<void> {\n    await db\n      .update(modules)\n      .set({ status })\n      .where(and(eq(modules.id, id), eq(modules.orgId, orgId)));\n  }\n\n  async deleteModule(id: string, orgId: string): Promise<void> {\n    await db\n      .delete(modules)\n      .where(and(eq(modules.id, id), eq(modules.orgId, orgId)));\n  }\n\n  async updateModuleConfig(\n    id: string,\n    orgId: string,\n    userConfig: string\n  ): Promise<void> {\n    await db.update(modules).set({ userConfig, updatedAt: new Date() }).where(\n      and(eq(modules.id, id), eq(modules.orgId, orgId))\n    );\n  }\n\n  // Module Executions\n  async getAllModuleExecutions(orgId: string, limit = 100): Promise<ModuleExecution[]> {\n    return await db\n      .select()\n      .from(moduleExecutions)\n      .where(eq(moduleExecutions.orgId, orgId))\n      .orderBy(desc(moduleExecutions.startedAt))\n      .limit(limit);\n  }\n\n  async getModuleExecution(id: string, orgId: string): Promise<ModuleExecution | undefined> {\n    const [execution] = await db\n      .select()\n      .from(moduleExecutions)\n      .where(and(eq(moduleExecutions.id, id), eq(moduleExecutions.orgId, orgId)));\n    return execution || undefined;\n  }\n\n  async getModuleExecutionsByModule(\n    moduleId: string,\n    orgId: string,\n    limit?: number\n  ): Promise<ModuleExecution[]> {\n    const query = limit\n      ? sql`SELECT * FROM module_executions \n            WHERE module_id = ${moduleId} AND org_id = ${orgId} \n            ORDER BY created_at DESC LIMIT ${limit}`\n      : sql`SELECT * FROM module_executions \n            WHERE module_id = ${moduleId} AND org_id = ${orgId} \n            ORDER BY created_at DESC`;\n    const result = await db.execute(query);\n    return result.rows as ModuleExecution[];\n  }\n\n  async createModuleExecution(execution: InsertModuleExecution): Promise<ModuleExecution> {\n    const [newExecution] = await db\n      .insert(moduleExecutions)\n      .values(execution)\n      .returning();\n    return newExecution;\n  }\n\n  async updateModuleExecution(\n    id: string,\n    orgId: string,\n    status: \"pending\" | \"running\" | \"completed\" | \"failed\",\n    output?: string,\n    error?: string\n  ): Promise<void> {\n    const updateData: any = { status };\n    if (status === \"completed\" || status === \"failed\") {\n      updateData.completedAt = new Date();\n    }\n    if (output) {\n      updateData.output = output;\n    }\n    if (error) {\n      updateData.error = error;\n    }\n    await db\n      .update(moduleExecutions)\n      .set(updateData)\n      .where(and(eq(moduleExecutions.id, id), eq(moduleExecutions.orgId, orgId)));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":15699},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Loader2 } from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\ninterface MetricsData {\n  tasksByStatus: Array<{ status: string; count: number }>;\n  tasksByUser: Array<{ user: string; count: number }>;\n  tasksOverTime: Array<{ date: string; count: number }>;\n  resourceUsage: {\n    apiCalls: number;\n    tasksRun: number;\n    storageUsed: number;\n  };\n}\n\nexport default function Reports() {\n  const { data: metrics, isLoading } = useQuery<MetricsData>({\n    queryKey: [\"/api/metrics/reports\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-center py-32\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Reports</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Analyze your team's performance and resource usage\n          </p>\n        </div>\n        <Select defaultValue=\"7days\">\n          <SelectTrigger className=\"w-48\" data-testid=\"select-time-range\">\n            <SelectValue placeholder=\"Select time range\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7days\">Last 7 days</SelectItem>\n            <SelectItem value=\"30days\">Last 30 days</SelectItem>\n            <SelectItem value=\"90days\">Last 90 days</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">API Calls</p>\n              <h3 className=\"text-3xl font-bold\" data-testid=\"stat-api-calls\">\n                {metrics?.resourceUsage.apiCalls.toLocaleString() || 0}\n              </h3>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Tasks Run</p>\n              <h3 className=\"text-3xl font-bold\" data-testid=\"stat-tasks-run\">\n                {metrics?.resourceUsage.tasksRun.toLocaleString() || 0}\n              </h3>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Storage Used</p>\n              <h3 className=\"text-3xl font-bold\" data-testid=\"stat-storage-used\">\n                {metrics?.resourceUsage.storageUsed.toLocaleString() || 0}\n                <span className=\"text-base font-normal text-muted-foreground ml-1\">\n                  MB\n                </span>\n              </h3>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            By User\n          </TabsTrigger>\n          <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">\n            Trends\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-lg font-medium mb-6\">Tasks by Status</h2>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={metrics?.tasksByStatus || []}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis\n                    dataKey=\"status\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={12}\n                  />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--popover))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Legend />\n                  <Bar\n                    dataKey=\"count\"\n                    fill=\"hsl(var(--primary))\"\n                    radius={[4, 4, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-lg font-medium mb-6\">Tasks by User</h2>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={metrics?.tasksByUser || []}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis\n                    dataKey=\"user\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={12}\n                  />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--popover))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Legend />\n                  <Bar\n                    dataKey=\"count\"\n                    fill=\"hsl(var(--chart-2))\"\n                    radius={[4, 4, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-lg font-medium mb-6\">Tasks Over Time</h2>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={metrics?.tasksOverTime || []}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis\n                    dataKey=\"date\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={12}\n                  />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--popover))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Legend />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"count\"\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={2}\n                    dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":7766},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum(\"role\", [\"member\", \"admin\", \"super_admin\"]);\nexport const taskStatusEnum = pgEnum(\"task_status\", [\"pending\", \"running\", \"completed\", \"failed\"]);\nexport const agentStatusEnum = pgEnum(\"agent_status\", [\"active\", \"inactive\", \"error\"]);\nexport const integrationTypeEnum = pgEnum(\"integration_type\", [\"google\", \"email\", \"whatsapp\"]);\n\n// Organizations table\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  logo: text(\"logo\"),\n  plan: text(\"plan\").notNull().default(\"free\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: roleEnum(\"role\").notNull().default(\"member\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Agent Catalog (Master list of all available agents)\nexport const agentCatalog = pgTable(\"agent_catalog\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  longDescription: text(\"long_description\"),\n  icon: text(\"icon\").notNull(),\n  category: text(\"category\").notNull(),\n  backendEndpoint: text(\"backend_endpoint\"),\n  configSchema: text(\"config_schema\"),\n  price: integer(\"price\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Agent Subscriptions (Which agents each organization has activated)\nexport const agentSubscriptions = pgTable(\"agent_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  agentId: varchar(\"agent_id\").notNull().references(() => agentCatalog.id, { onDelete: \"cascade\" }),\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  config: text(\"config\"),\n  activatedAt: timestamp(\"activated_at\").notNull().defaultNow(),\n  lastUsedAt: timestamp(\"last_used_at\"),\n});\n\n// Agent Data (Stores agent-specific data for each organization)\nexport const agentData = pgTable(\"agent_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: varchar(\"subscription_id\").notNull().references(() => agentSubscriptions.id, { onDelete: \"cascade\" }),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  agentId: varchar(\"agent_id\").notNull().references(() => agentCatalog.id, { onDelete: \"cascade\" }),\n  dataType: text(\"data_type\").notNull(),\n  data: text(\"data\").notNull(),\n  metadata: text(\"metadata\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: varchar(\"subscription_id\").references(() => agentSubscriptions.id, { onDelete: \"set null\" }),\n  description: text(\"description\").notNull(),\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  result: text(\"result\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Logs table\nexport const logs = pgTable(\"logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: varchar(\"subscription_id\").references(() => agentSubscriptions.id, { onDelete: \"set null\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\n// Integrations table\nexport const integrations = pgTable(\"integrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  type: integrationTypeEnum(\"type\").notNull(),\n  apiKey: text(\"api_key\"),\n  status: text(\"status\").notNull().default(\"inactive\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// API Keys table (for organization API keys)\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  key: text(\"key\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  lastUsed: timestamp(\"last_used\"),\n});\n\n// Resource Usage table\nexport const resourceUsage = pgTable(\"resource_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  apiCalls: integer(\"api_calls\").notNull().default(0),\n  tasksRun: integer(\"tasks_run\").notNull().default(0),\n  storageUsed: integer(\"storage_used\").notNull().default(0),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\n// Modules table (Python agent modules)\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(),\n  pythonModule: text(\"python_module\").notNull(),\n  endpoint: text(\"endpoint\"),\n  config: text(\"config\"),\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Module Executions table (track module execution history)\nexport const moduleExecutions = pgTable(\"module_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: varchar(\"module_id\").notNull().references(() => modules.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").references(() => tasks.id, { onDelete: \"set null\" }),\n  input: text(\"input\"),\n  output: text(\"output\"),\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  error: text(\"error\"),\n  startedAt: timestamp(\"started_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n});\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  users: many(users),\n  agentSubscriptions: many(agentSubscriptions),\n  agentData: many(agentData),\n  tasks: many(tasks),\n  logs: many(logs),\n  integrations: many(integrations),\n  apiKeys: many(apiKeys),\n  resourceUsage: many(resourceUsage),\n  modules: many(modules),\n  moduleExecutions: many(moduleExecutions),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [users.orgId],\n    references: [organizations.id],\n  }),\n  tasks: many(tasks),\n  logs: many(logs),\n  resourceUsage: many(resourceUsage),\n}));\n\nexport const agentCatalogRelations = relations(agentCatalog, ({ many }) => ({\n  subscriptions: many(agentSubscriptions),\n  agentData: many(agentData),\n}));\n\nexport const agentSubscriptionsRelations = relations(agentSubscriptions, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [agentSubscriptions.orgId],\n    references: [organizations.id],\n  }),\n  agent: one(agentCatalog, {\n    fields: [agentSubscriptions.agentId],\n    references: [agentCatalog.id],\n  }),\n  tasks: many(tasks),\n  logs: many(logs),\n  agentData: many(agentData),\n}));\n\nexport const agentDataRelations = relations(agentData, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [agentData.orgId],\n    references: [organizations.id],\n  }),\n  agent: one(agentCatalog, {\n    fields: [agentData.agentId],\n    references: [agentCatalog.id],\n  }),\n  subscription: one(agentSubscriptions, {\n    fields: [agentData.subscriptionId],\n    references: [agentSubscriptions.id],\n  }),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [tasks.orgId],\n    references: [organizations.id],\n  }),\n  user: one(users, {\n    fields: [tasks.userId],\n    references: [users.id],\n  }),\n  subscription: one(agentSubscriptions, {\n    fields: [tasks.subscriptionId],\n    references: [agentSubscriptions.id],\n  }),\n  moduleExecutions: many(moduleExecutions),\n}));\n\nexport const logsRelations = relations(logs, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [logs.orgId],\n    references: [organizations.id],\n  }),\n  user: one(users, {\n    fields: [logs.userId],\n    references: [users.id],\n  }),\n  subscription: one(agentSubscriptions, {\n    fields: [logs.subscriptionId],\n    references: [agentSubscriptions.id],\n  }),\n}));\n\nexport const integrationsRelations = relations(integrations, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [integrations.orgId],\n    references: [organizations.id],\n  }),\n}));\n\nexport const apiKeysRelations = relations(apiKeys, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [apiKeys.orgId],\n    references: [organizations.id],\n  }),\n}));\n\nexport const resourceUsageRelations = relations(resourceUsage, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [resourceUsage.orgId],\n    references: [organizations.id],\n  }),\n  user: one(users, {\n    fields: [resourceUsage.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const modulesRelations = relations(modules, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [modules.orgId],\n    references: [organizations.id],\n  }),\n  executions: many(moduleExecutions),\n}));\n\nexport const moduleExecutionsRelations = relations(moduleExecutions, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [moduleExecutions.orgId],\n    references: [organizations.id],\n  }),\n  module: one(modules, {\n    fields: [moduleExecutions.moduleId],\n    references: [modules.id],\n  }),\n  task: one(tasks, {\n    fields: [moduleExecutions.taskId],\n    references: [tasks.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastLogin: true,\n});\n\nexport const insertAgentCatalogSchema = createInsertSchema(agentCatalog).omit({\n  createdAt: true,\n});\n\nexport const insertAgentSubscriptionSchema = createInsertSchema(agentSubscriptions).omit({\n  id: true,\n  activatedAt: true,\n  lastUsedAt: true,\n});\n\nexport const insertAgentDataSchema = createInsertSchema(agentData).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertLogSchema = createInsertSchema(logs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertIntegrationSchema = createInsertSchema(integrations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertApiKeySchema = createInsertSchema(apiKeys).omit({\n  id: true,\n  createdAt: true,\n  lastUsed: true,\n});\n\nexport const insertResourceUsageSchema = createInsertSchema(resourceUsage).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertModuleSchema = createInsertSchema(modules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertModuleExecutionSchema = createInsertSchema(moduleExecutions).omit({\n  id: true,\n  startedAt: true,\n  completedAt: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// Signup schema\nexport const signupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  organizationName: z.string().min(2, \"Organization name must be at least 2 characters\"),\n});\n\n// Password reset schema\nexport const passwordResetSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\n// TypeScript types\nexport type Organization = typeof organizations.$inferSelect;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type AgentCatalog = typeof agentCatalog.$inferSelect;\nexport type InsertAgentCatalog = z.infer<typeof insertAgentCatalogSchema>;\n\nexport type AgentSubscription = typeof agentSubscriptions.$inferSelect;\nexport type InsertAgentSubscription = z.infer<typeof insertAgentSubscriptionSchema>;\n\nexport type AgentData = typeof agentData.$inferSelect;\nexport type InsertAgentData = z.infer<typeof insertAgentDataSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type Log = typeof logs.$inferSelect;\nexport type InsertLog = z.infer<typeof insertLogSchema>;\n\nexport type Integration = typeof integrations.$inferSelect;\nexport type InsertIntegration = z.infer<typeof insertIntegrationSchema>;\n\nexport type ApiKey = typeof apiKeys.$inferSelect;\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\n\nexport type ResourceUsage = typeof resourceUsage.$inferSelect;\nexport type InsertResourceUsage = z.infer<typeof insertResourceUsageSchema>;\n\nexport type Module = typeof modules.$inferSelect;\nexport type InsertModule = z.infer<typeof insertModuleSchema>;\n\nexport type ModuleExecution = typeof moduleExecutions.$inferSelect;\nexport type InsertModuleExecution = z.infer<typeof insertModuleExecutionSchema>;\n\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type SignupData = z.infer<typeof signupSchema>;\nexport type PasswordResetData = z.infer<typeof passwordResetSchema>;\n","size_bytes":14897},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/reset-password.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { passwordResetSchema, type PasswordResetData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Loader2, CheckCircle2 } from \"lucide-react\";\n\nexport default function ResetPassword() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const form = useForm<PasswordResetData>({\n    resolver: zodResolver(passwordResetSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const onSubmit = async (data: PasswordResetData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/reset-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Password reset failed\");\n      }\n\n      setIsSuccess(true);\n      toast({\n        title: \"Check your email\",\n        description: \"We sent you a password reset link\",\n      });\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Request failed\",\n        description: error.message || \"Could not process your request\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md p-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-full bg-green-100 mb-4\">\n              <CheckCircle2 className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <h1 className=\"text-2xl font-semibold tracking-tight mb-2\">Check your email</h1>\n            <p className=\"text-sm text-muted-foreground mb-6\">\n              We've sent a password reset link to your email address.\n            </p>\n            <a\n              href=\"/login\"\n              className=\"text-sm text-primary hover:underline\"\n              data-testid=\"link-back-to-login\"\n            >\n              Back to sign in\n            </a>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-md bg-primary mb-4\">\n            <span className=\"text-primary-foreground font-bold text-xl\">A</span>\n          </div>\n          <h1 className=\"text-3xl font-semibold tracking-tight mb-2\">Reset password</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Enter your email and we'll send you a reset link\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"you@example.com\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      data-testid=\"input-email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-reset\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                \"Send reset link\"\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-6 text-center\">\n          <a\n            href=\"/login\"\n            className=\"text-sm text-primary hover:underline\"\n            data-testid=\"link-back-to-login\"\n          >\n            Back to sign in\n          </a>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4730},"replit.md":{"content":"\n# Abetworks - Business AI Automation Platform Vision & Roadmap\n\n## 📋 Executive Summary\n\n**Project Name**: Abetworks Business AI Automation Platform  \n**Current Status**: Foundation Phase - Frontend Complete, Backend In Progress  \n**Architecture**: Modular AI Agent System for Business Automation\n\n### What We're Building\n\nA production-ready AI automation platform that enables businesses to:\n- **Collect & Process Leads** from forms, chatbots, and multiple sources\n- **Score & Qualify Leads** using AI-powered analysis\n- **Forecast Sales & Trends** with predictive analytics\n- **Automate Customer Interactions** through intelligent chatbots\n- **Orchestrate Business Workflows** with agent chaining\n- **Monitor Performance** in real-time with analytics dashboards\n\n---\n\n## 🎯 Current State (What Replit Has Built)\n\n### ✅ Completed Frontend (React + TypeScript + Tailwind)\n\n#### 1. Authentication & User Management\n- **Login System** (`/login`) - JWT-based authentication\n- **Super Admin Login** (`/admin/login`) - Separate admin authentication\n- **Signup** (`/signup`) - First user becomes super admin\n- **Multi-tenant Isolation** - Each organization has isolated data\n\n#### 2. Dashboard (`/dashboard`)\n**Current Metrics Display**:\n- Active Users count\n- Tasks Done count  \n- Workflows Active count\n- Tasks Pending count\n\n**Features**:\n- Clean, professional UI with modern design\n- Real-time metrics visualization\n- Responsive layout\n- Interactive charts using Recharts\n\n#### 3. User Management (`/users`)\n**Role-Based System**:\n- **Super Admin** - Full system control, manages all organizations\n- **Admin** - Organization management, user invites, API key management\n- **Member** - Task creation and viewing\n\n#### 4. Tasks System (`/tasks`)\n**Task Management**:\n- Create automation workflow tasks\n- Track task status (Pending, Running, Completed, Failed)\n- Associate tasks with users and organizations\n- Task execution history\n\n#### 5. Reports & Analytics (`/reports`)\n**Metrics & Visualization**:\n- Aggregate task metrics per user/organization\n- Interactive charts\n- Resource usage tracking\n- Performance analytics\n\n#### 6. Settings (`/settings`)\n**Organization Configuration**:\n- Organization information\n- API key management\n- Integration placeholders\n\n#### 7. Agents Board (`/agents`) - **PLACEHOLDER READY**\n**Current State**:\n- Visual card/block layout for agents\n- Agent metadata display\n- Action buttons: View, Run, Settings\n- **Ready for Backend Integration**\n\n---\n\n## 🤖 Business AI Agent Types (What Backend Will Create)\n\n### 1. Form Data Collection Agent\n\n**Purpose**: Capture, validate, and process lead data from web forms\n\n**Capabilities**:\n- Multi-source form integration (website, landing pages, social media)\n- Real-time data validation and cleaning\n- Duplicate detection\n- Auto-enrichment with external data sources\n- Email/SMS verification\n- Custom field mapping\n\n**Example Use Cases**:\n- Contact form submissions\n- Newsletter signups\n- Demo request forms\n- Quote request forms\n- Survey responses\n\n**Configuration Schema**:\n```json\n{\n  \"form_sources\": [\n    {\n      \"name\": \"Website Contact Form\",\n      \"webhook_url\": \"https://api.example.com/webhook\",\n      \"fields\": {\n        \"name\": \"required\",\n        \"email\": \"required\",\n        \"phone\": \"optional\",\n        \"company\": \"optional\"\n      }\n    }\n  ],\n  \"validation_rules\": {\n    \"email\": \"email_format\",\n    \"phone\": \"phone_format\"\n  },\n  \"enrichment\": {\n    \"enabled\": true,\n    \"sources\": [\"clearbit\", \"hunter.io\"]\n  },\n  \"deduplication\": {\n    \"enabled\": true,\n    \"match_fields\": [\"email\"]\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Webhook receiver for form submissions\n- Data validation engine\n- External API integrations (Clearbit, Hunter.io, etc.)\n- Duplicate detection algorithm\n- Data storage with multi-tenant isolation\n\n---\n\n### 2. Chatbot Agent\n\n**Purpose**: Intelligent conversational AI for customer interaction and lead qualification\n\n**Capabilities**:\n- Natural language understanding (NLU)\n- Multi-channel support (website, WhatsApp, Slack, email)\n- Lead qualification through conversation\n- FAQ handling\n- Appointment scheduling\n- Conversation history and analytics\n- Human handoff for complex queries\n\n**Example Use Cases**:\n- Website visitor engagement\n- Pre-sales qualification\n- Customer support automation\n- Appointment booking\n- Product recommendations\n\n**Configuration Schema**:\n```json\n{\n  \"bot_personality\": {\n    \"name\": \"Abby\",\n    \"tone\": \"friendly_professional\",\n    \"language\": \"en\"\n  },\n  \"channels\": [\n    {\n      \"type\": \"website\",\n      \"widget_config\": {\n        \"position\": \"bottom-right\",\n        \"primary_color\": \"#0066FF\"\n      }\n    },\n    {\n      \"type\": \"whatsapp\",\n      \"phone_number\": \"+1234567890\"\n    }\n  ],\n  \"qualification_questions\": [\n    \"What is your company size?\",\n    \"What is your budget range?\",\n    \"When do you plan to make a decision?\"\n  ],\n  \"handoff_triggers\": [\n    \"pricing\",\n    \"technical_questions\",\n    \"high_intent_keywords\"\n  ],\n  \"llm_config\": {\n    \"provider\": \"openai\",\n    \"model\": \"gpt-4\",\n    \"temperature\": 0.7\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- LLM integration (OpenAI, Anthropic, or local models)\n- Intent classification\n- Entity extraction\n- Conversation state management\n- Multi-channel connectors (WhatsApp API, Slack API, etc.)\n- Real-time messaging infrastructure\n- Conversation analytics\n\n---\n\n### 3. Lead Scoring Agent\n\n**Purpose**: AI-powered lead qualification and ranking based on conversion probability\n\n**Capabilities**:\n- Multi-factor scoring algorithm\n- Behavioral analysis (website visits, email opens, content downloads)\n- Demographic scoring (company size, industry, job title)\n- Engagement scoring (response time, interaction frequency)\n- Predictive scoring using machine learning\n- Auto-prioritization for sales team\n- Score decay over time\n\n**Example Use Cases**:\n- Prioritize hot leads for sales follow-up\n- Identify high-value prospects\n- Trigger automated nurture campaigns for cold leads\n- Alert sales team about buying signals\n\n**Scoring Factors**:\n```json\n{\n  \"demographic_factors\": {\n    \"company_size\": {\n      \"1-10\": 10,\n      \"11-50\": 20,\n      \"51-200\": 40,\n      \"201-1000\": 60,\n      \"1000+\": 80\n    },\n    \"industry\": {\n      \"technology\": 80,\n      \"finance\": 70,\n      \"healthcare\": 60\n    },\n    \"job_title\": {\n      \"C-level\": 100,\n      \"VP/Director\": 80,\n      \"Manager\": 50,\n      \"Individual Contributor\": 20\n    }\n  },\n  \"behavioral_factors\": {\n    \"website_visits\": 5,\n    \"demo_request\": 50,\n    \"pricing_page_view\": 30,\n    \"email_open\": 5,\n    \"email_click\": 10,\n    \"content_download\": 20\n  },\n  \"engagement_factors\": {\n    \"response_within_1_hour\": 40,\n    \"response_within_24_hours\": 20,\n    \"response_after_24_hours\": 5\n  },\n  \"ml_model\": {\n    \"enabled\": true,\n    \"retrain_interval\": \"weekly\",\n    \"features\": [\"all_above\", \"historical_conversion_data\"]\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Scoring algorithm engine\n- Behavioral tracking integration\n- Machine learning model (scikit-learn, XGBoost)\n- Real-time score calculation\n- Historical data analysis\n- Score threshold triggers\n- CRM integration for lead updates\n\n---\n\n### 4. Forecasting Agent\n\n**Purpose**: Predictive analytics for sales, revenue, and business trends\n\n**Capabilities**:\n- Sales pipeline forecasting\n- Revenue predictions\n- Churn prediction\n- Seasonal trend analysis\n- Growth projection\n- Scenario modeling (\"what-if\" analysis)\n- Anomaly detection\n\n**Example Use Cases**:\n- Monthly/quarterly sales forecasts\n- Revenue projections for planning\n- Predict customer churn risk\n- Identify growth opportunities\n- Budget planning\n\n**Configuration Schema**:\n```json\n{\n  \"forecast_types\": [\n    {\n      \"type\": \"sales_revenue\",\n      \"time_horizon\": \"90_days\",\n      \"model\": \"prophet\",\n      \"confidence_interval\": 0.95\n    },\n    {\n      \"type\": \"deal_close_probability\",\n      \"features\": [\"deal_age\", \"engagement_score\", \"deal_size\"],\n      \"model\": \"gradient_boosting\"\n    }\n  ],\n  \"data_sources\": [\n    {\n      \"type\": \"historical_sales\",\n      \"table\": \"tasks\",\n      \"date_field\": \"completed_at\",\n      \"value_field\": \"result\"\n    }\n  ],\n  \"refresh_interval\": \"daily\",\n  \"alert_thresholds\": {\n    \"revenue_below_target\": 0.8,\n    \"high_churn_risk\": 0.7\n  }\n}\n```\n\n**Models Used**:\n- **Time Series**: Prophet (Facebook), ARIMA, LSTM\n- **Classification**: Gradient Boosting, Random Forest\n- **Regression**: Linear Regression, XGBoost\n\n**Backend Implementation Requirements**:\n- Time series forecasting models\n- Machine learning pipeline\n- Historical data aggregation\n- Scenario simulation engine\n- Data visualization preparation\n- Alert system for threshold breaches\n\n---\n\n### 5. Email/SMS Marketing Agent\n\n**Purpose**: Automated, personalized outreach campaigns\n\n**Capabilities**:\n- Drip campaign automation\n- Personalized email generation (AI-powered)\n- A/B testing\n- Send time optimization\n- Engagement tracking\n- Automated follow-ups\n- SMS campaigns\n\n**Example Use Cases**:\n- Welcome email sequences\n- Nurture campaigns for cold leads\n- Re-engagement campaigns\n- Event invitations\n- Product announcements\n\n**Configuration Schema**:\n```json\n{\n  \"campaign_type\": \"nurture\",\n  \"channels\": [\"email\", \"sms\"],\n  \"sequence\": [\n    {\n      \"step\": 1,\n      \"delay\": \"0_hours\",\n      \"channel\": \"email\",\n      \"subject\": \"Welcome to {{company_name}}!\",\n      \"template\": \"welcome_email\",\n      \"personalization\": true\n    },\n    {\n      \"step\": 2,\n      \"delay\": \"24_hours\",\n      \"channel\": \"email\",\n      \"subject\": \"Here's how we can help\",\n      \"template\": \"value_prop_email\"\n    },\n    {\n      \"step\": 3,\n      \"delay\": \"72_hours\",\n      \"channel\": \"sms\",\n      \"message\": \"Hi {{first_name}}, ready to see a demo?\"\n    }\n  ],\n  \"ai_personalization\": {\n    \"enabled\": true,\n    \"model\": \"gpt-4\",\n    \"tone\": \"professional_friendly\"\n  },\n  \"tracking\": {\n    \"opens\": true,\n    \"clicks\": true,\n    \"replies\": true\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Email service integration (SendGrid, Mailgun, AWS SES)\n- SMS service integration (Twilio, MessageBird)\n- Campaign scheduler\n- Template engine with AI generation\n- Tracking pixel and link tracking\n- Analytics and reporting\n\n---\n\n### 6. Data Enrichment Agent\n\n**Purpose**: Enhance lead data with external information sources\n\n**Capabilities**:\n- Company information lookup\n- Contact verification\n- Social media profile discovery\n- Technographic data (tech stack used)\n- Firmographic data (company size, revenue, industry)\n- Email verification and validation\n\n**Example Use Cases**:\n- Enrich new leads with company data\n- Find decision-maker contacts\n- Validate email addresses\n- Discover social profiles\n\n**Configuration Schema**:\n```json\n{\n  \"enrichment_sources\": [\n    {\n      \"provider\": \"clearbit\",\n      \"api_key_secret\": \"CLEARBIT_API_KEY\",\n      \"fields\": [\"company_name\", \"company_size\", \"industry\"]\n    },\n    {\n      \"provider\": \"hunter_io\",\n      \"api_key_secret\": \"HUNTER_API_KEY\",\n      \"fields\": [\"email_verification\", \"company_emails\"]\n    }\n  ],\n  \"auto_enrich\": true,\n  \"enrich_on\": [\"lead_creation\", \"form_submission\"]\n}\n```\n\n**Backend Implementation Requirements**:\n- Multiple API integrations (Clearbit, Hunter.io, FullContact, etc.)\n- Rate limiting and cost management\n- Data merge logic\n- Confidence scoring\n- Fallback strategies\n\n---\n\n## 🎨 Frontend Requirements (What Replit Will Build)\n\n### 1. Responsive Agent Management UI\n\n**Agent Cards/Dashboard**:\n- Visual representation of each agent type\n- Status indicators (Active, Paused, Error)\n- Quick action buttons (Configure, Run, View Analytics)\n- Agent performance metrics\n\n**Agent Configuration Interface**:\n- Form-based configuration for each agent\n- JSON editor for advanced settings\n- Template library for quick setup\n- Validation and testing tools\n\n### 2. Form Builder Interface\n\n**Visual Form Designer**:\n- Drag-and-drop form fields\n- Field validation rules\n- Custom styling options\n- Embed code generation\n- Preview mode\n\n**Form Analytics**:\n- Submission rates\n- Conversion tracking\n- Field completion rates\n- Drop-off analysis\n\n### 3. Chatbot Interface\n\n**Chatbot Customization**:\n- Personality and tone settings\n- Welcome message editor\n- FAQ management\n- Conversation flow builder (visual)\n- Widget customization (colors, position, branding)\n\n**Conversation Analytics**:\n- Active conversations list\n- Conversation history viewer\n- Intent analysis dashboard\n- Handoff tracking\n- Customer satisfaction scores\n\n### 4. Lead Management Dashboard\n\n**Lead List View**:\n- Sortable/filterable lead table\n- Lead score visualization\n- Quick actions (assign, tag, note)\n- Bulk operations\n- Export functionality\n\n**Lead Detail View**:\n- Complete lead profile\n- Activity timeline\n- Score breakdown\n- Conversation history\n- Notes and tasks\n\n### 5. Forecasting Dashboard\n\n**Interactive Charts**:\n- Revenue forecast line charts\n- Pipeline stage breakdown\n- Deal probability distribution\n- Trend analysis\n- Scenario comparison\n\n**Forecast Configuration**:\n- Time horizon selector\n- Model parameter tuning\n- Data source selection\n- Alert threshold settings\n\n### 6. Campaign Builder\n\n**Email/SMS Campaign Interface**:\n- Campaign sequence builder (visual timeline)\n- Template editor with AI assistance\n- Personalization token selector\n- A/B test configuration\n- Send time optimizer\n\n**Campaign Analytics**:\n- Delivery rates\n- Open/click rates\n- Conversion tracking\n- Engagement heatmaps\n- ROI calculation\n\n---\n\n## 🔌 Backend API Endpoints (To Be Implemented)\n\n### Form Collection Endpoints\n```\nPOST   /api/forms/submit              - Receive form submission from webhook\nGET    /api/forms/submissions         - List all form submissions (filtered)\nGET    /api/forms/submissions/:id     - Get submission details\nPOST   /api/forms/validate            - Validate form data\nPOST   /api/forms/enrich              - Enrich submission with external data\n```\n\n### Chatbot Endpoints\n```\nPOST   /api/chatbot/message           - Send message, get bot response\nGET    /api/chatbot/conversations     - List conversations\nGET    /api/chatbot/conversations/:id - Get conversation history\nPOST   /api/chatbot/handoff           - Transfer to human agent\nPUT    /api/chatbot/config            - Update bot configuration\n```\n\n### Lead Scoring Endpoints\n```\nGET    /api/leads                     - List leads with scores\nGET    /api/leads/:id                 - Get lead details with score breakdown\nPOST   /api/leads/:id/score           - Manually trigger score recalculation\nGET    /api/leads/hot                 - Get high-scoring leads\nPUT    /api/leads/:id                 - Update lead information\n```\n\n### Forecasting Endpoints\n```\nGET    /api/forecasts/revenue         - Get revenue forecast\nGET    /api/forecasts/pipeline        - Get pipeline forecast\nGET    /api/forecasts/churn           - Get churn predictions\nPOST   /api/forecasts/scenario        - Run custom scenario analysis\nGET    /api/forecasts/accuracy        - Get model accuracy metrics\n```\n\n### Campaign Endpoints\n```\nGET    /api/campaigns                 - List campaigns\nPOST   /api/campaigns                 - Create campaign\nGET    /api/campaigns/:id             - Get campaign details\nPUT    /api/campaigns/:id             - Update campaign\nPOST   /api/campaigns/:id/start       - Start campaign\nPOST   /api/campaigns/:id/pause       - Pause campaign\nGET    /api/campaigns/:id/analytics   - Get campaign performance\n```\n\n---\n\n## 🔐 Multi-Tenant Security (Critical)\n\n**All Backend Agents MUST**:\n1. Filter all queries by `org_id`\n2. Validate JWT tokens on every request\n3. Never expose data across organizations\n4. Encrypt sensitive data (API keys, customer data)\n5. Implement rate limiting per organization\n6. Audit log all actions\n\n**Example (Python)**:\n```python\nclass FormCollectionAgent(BaseAgent):\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        # Always validate org_id\n        if not self.validate_org_access(input_data['form_id'], 'forms'):\n            return {\"success\": False, \"error\": \"Access denied\"}\n        \n        # Process only org-specific data\n        submissions = self.get_submissions_by_org(self.org_id)\n        # ...\n```\n\n---\n\n## 🚀 Development Roadmap\n\n### Phase 1: Form & Lead Collection (Weeks 1-2)\n**Backend**:\n- [ ] Form submission webhook receiver\n- [ ] Data validation engine\n- [ ] Duplicate detection\n- [ ] Email verification integration\n\n**Frontend**:\n- [ ] Form builder interface\n- [ ] Form submission dashboard\n- [ ] Lead list view\n- [ ] Lead detail page\n\n### Phase 2: Lead Scoring (Weeks 3-4)\n**Backend**:\n- [ ] Scoring algorithm implementation\n- [ ] Machine learning model training\n- [ ] Real-time score calculation\n- [ ] Score update triggers\n\n**Frontend**:\n- [ ] Lead score visualization\n- [ ] Score breakdown component\n- [ ] Hot leads dashboard\n- [ ] Scoring configuration UI\n\n### Phase 3: Chatbot (Weeks 5-6)\n**Backend**:\n- [ ] LLM integration (OpenAI/Anthropic)\n- [ ] Intent classification\n- [ ] Conversation state management\n- [ ] Multi-channel support\n\n**Frontend**:\n- [ ] Chat widget component\n- [ ] Conversation viewer\n- [ ] Bot configuration interface\n- [ ] Analytics dashboard\n\n### Phase 4: Forecasting (Weeks 7-8)\n**Backend**:\n- [ ] Time series models (Prophet)\n- [ ] ML pipeline (scikit-learn, XGBoost)\n- [ ] Scenario simulation\n- [ ] Alert system\n\n**Frontend**:\n- [ ] Forecast charts (Recharts)\n- [ ] Model configuration UI\n- [ ] Scenario builder\n- [ ] Alert management\n\n### Phase 5: Email/SMS Campaigns (Weeks 9-10)\n**Backend**:\n- [ ] Email service integration (SendGrid)\n- [ ] SMS service integration (Twilio)\n- [ ] Campaign scheduler\n- [ ] AI personalization engine\n\n**Frontend**:\n- [ ] Campaign builder (visual)\n- [ ] Template editor\n- [ ] Analytics dashboard\n- [ ] A/B test configuration\n\n---\n\n## 📊 Success Metrics\n\n### Business Metrics\n- Lead capture rate increase\n- Lead-to-customer conversion rate\n- Average lead score accuracy\n- Forecast accuracy (±10%)\n- Email campaign open rate (>20%)\n- Chatbot engagement rate\n\n### Technical Metrics\n- API response time (<200ms)\n- Agent execution success rate (>95%)\n- System uptime (>99.9%)\n- Multi-tenant isolation (100%)\n\n---\n\n## 💡 Future Enhancements\n\n1. **WhatsApp Business API Integration**\n2. **Advanced Workflow Automation** (Zapier-like)\n3. **AI Voice Calls** for outreach\n4. **Video Meeting Bot** (Zoom/Meet integration)\n5. **Social Media Lead Generation** (LinkedIn, Facebook)\n6. **Agent Marketplace** (pre-built agents)\n7. **Mobile Apps** (iOS/Android)\n\n---\n\n## Tech Stack\n\n### Frontend\n- React 18+ with TypeScript\n- Tailwind CSS for styling\n- Shadcn UI component library\n- Recharts for data visualization\n- React Query (TanStack Query) for data fetching\n- Wouter for routing\n\n### Backend API (Node.js)\n- Node.js + Express + TypeScript\n- PostgreSQL (Neon serverless)\n- Drizzle ORM\n- JWT authentication\n- bcrypt for password hashing\n\n### Agent Runtime (Python)\n- Python 3.11+ with FastAPI\n- OpenAI and LangChain for AI\n- Pandas and NumPy for data processing\n- psycopg2 for database access\n- Multi-tenant isolation enforcement\n\n---\n\n**Document Version**: 2.0  \n**Last Updated**: 2024  \n**Focus**: Business AI Automation (Forms, Chatbots, Lead Scoring, Forecasting)  \n**Status**: Vision Complete - Ready for Implementation  \n\n---\n\n**Division of Work**:\n- **Replit**: Frontend UI/UX, responsive design, user experience\n- **Backend Developer**: AI agents, business logic, API endpoints, integrations\n- **Integration**: Frontend calls backend APIs for all agent operations\n","size_bytes":19551},"REBRANDING_CHANGES.md":{"content":"\n# Rebranding: CRM → Modular AI Automation Platform\n\n## Overview\nThis document outlines all changes needed to rebrand the application from \"Abetworks CRM - Multi-Tenant Sales Automation Platform\" to \"Abetworks - Modular AI Automation Platform\".\n\n---\n\n## 1. Core Concept Changes\n\n### FROM (CRM Focus):\n- Multi-tenant CRM\n- Sales automation\n- Lead generation\n- Customer relationship management\n\n### TO (AI Automation Focus):\n- Modular AI automation platform\n- Workflow automation modules\n- Intelligent task orchestration\n- Agent-driven automation\n\n---\n\n## 2. File Changes Required\n\n### 2.1 README.md\n**Current:** \"Abetworks CRM - Multi-Tenant Sales Automation Platform\"\n**Change to:** \"Abetworks - Modular AI Automation Platform\"\n\n**Current description:** \"A production-ready, multi-tenant CRM and sales automation platform...\"\n**Change to:** \"A production-ready, modular AI automation platform built for intelligent workflow orchestration...\"\n\n**Features to update:**\n- Remove: \"Lead generation\", \"Sales automation\", \"CRM features\"\n- Add: \"AI-powered workflow automation\", \"Modular agent system\", \"Custom automation modules\", \"Intelligent task orchestration\"\n\n### 2.2 client/index.html\n**Line 6:** \n```html\n<!-- Current -->\n<meta name=\"description\" content=\"Abetworks CRM - Modern multi-tenant CRM and sales automation platform for managing teams, tasks, and workflows efficiently.\" />\n\n<!-- Change to -->\n<meta name=\"description\" content=\"Abetworks - Modular AI automation platform for intelligent workflow orchestration and task automation.\" />\n```\n\n**Line 8:**\n```html\n<!-- Current -->\n<title>Abetworks CRM - Sales Automation Platform</title>\n\n<!-- Change to -->\n<title>Abetworks - AI Automation Platform</title>\n```\n\n**Lines 14-16 (Open Graph):**\n```html\n<!-- Current -->\n<meta property=\"og:title\" content=\"Abetworks CRM - Sales Automation Platform\" />\n<meta property=\"og:description\" content=\"Modern multi-tenant CRM and sales automation platform for managing teams, tasks, and workflows efficiently.\" />\n\n<!-- Change to -->\n<meta property=\"og:title\" content=\"Abetworks - AI Automation Platform\" />\n<meta property=\"og:description\" content=\"Modular AI automation platform for intelligent workflow orchestration and task automation.\" />\n```\n\n### 2.3 replit.md\n**Line 1:** \n```markdown\n# Abetworks CRM - Multi-Tenant Sales Automation Platform\n```\n**Change to:**\n```markdown\n# Abetworks - Modular AI Automation Platform\n```\n\n**Overview section:**\nReplace \"CRM and sales automation\" language with \"AI automation and workflow orchestration\"\n\n### 2.4 design_guidelines.md\n**Line 1:**\n```markdown\n# Design Guidelines: Multi-Tenant CRM & Sales Automation Platform\n```\n**Change to:**\n```markdown\n# Design Guidelines: Modular AI Automation Platform\n```\n\n### 2.5 docs/API.md\n**Title and descriptions:**\n- Update all references from \"CRM\" to \"AI Automation Platform\"\n- Update endpoint descriptions to focus on automation modules rather than sales/leads\n\n### 2.6 docs/SETUP.md\n**Title:**\n```markdown\n# Setup and Deployment Guide\n```\n**Change introduction from \"Abetworks CRM platform\" to \"Abetworks AI Automation Platform\"**\n\n---\n\n## 3. UI Text Changes\n\n### 3.1 Dashboard (client/src/pages/dashboard.tsx)\n**Current metrics:**\n- \"Active Users\"\n- \"Tasks Done\"\n- \"Leads Generated\" ← REMOVE/REPLACE\n- \"Tasks Pending\"\n\n**Suggested new metrics:**\n- \"Active Modules\"\n- \"Automations Completed\"\n- \"Workflows Active\"\n- \"Tasks Queued\"\n\n### 3.2 Agents Page (client/src/pages/agents.tsx)\n**Line 19:**\n```tsx\n// Current\n<p className=\"text-sm text-muted-foreground mt-2\">\n  AI agents to automate your workflows (coming soon)\n</p>\n\n// Change to\n<p className=\"text-sm text-muted-foreground mt-2\">\n  Modular AI agents for intelligent automation\n</p>\n```\n\n**Line 38:**\n```tsx\n// Current\nAI agents are powerful automation tools that will be available soon.\nThey'll help you streamline workflows, process data, and complete tasks automatically.\n\n// Change to\nAI automation modules enable intelligent workflow orchestration.\nConfigure agents to handle complex tasks, process data, and execute workflows automatically.\n```\n\n### 3.3 Tasks Page (client/src/pages/tasks.tsx)\n**Update description from \"automation tasks\" to \"automation workflows\"**\n\n---\n\n## 4. Database Schema Considerations\n\n### 4.1 shared/schema.ts\n**Optional additions for AI automation focus:**\n\n```typescript\n// Add new automation-specific fields\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // e.g., \"data\", \"communication\", \"analytics\"\n  capabilities: text(\"capabilities\"), // JSON string of module capabilities\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Rename/repurpose existing tables:\n// - Keep \"agents\" table (it's already modular)\n// - Rename \"tasks\" → \"workflows\" (optional, but more aligned)\n// - Add \"automation_runs\" for execution history\n```\n\n---\n\n## 5. Terminology Changes Throughout Codebase\n\n### Global Find & Replace:\n1. **\"CRM\"** → Remove or replace with \"Platform\"\n2. **\"Sales automation\"** → \"AI automation\" or \"Workflow automation\"\n3. **\"Lead generation\"** → \"Data collection\" or \"Input processing\"\n4. **\"Leads\"** → \"Inputs\" or \"Data points\"\n5. **\"Customer\"** → \"User\" or \"Entity\"\n6. **\"Sales\"** → \"Automation\" or \"Workflows\"\n\n### Keep as-is:\n- \"Organization\" (multi-tenant structure)\n- \"Tasks\" (can represent automation workflows)\n- \"Agents\" (perfect for modular AI)\n- \"Users\" and \"Teams\"\n\n---\n\n## 6. API Endpoint Descriptions\n\n### Update in server/routes.ts comments:\n```typescript\n// Current: \"// ===== CRM Routes =====\"\n// Change to: \"// ===== Automation Routes =====\"\n\n// Current: \"Sales Assistant\"\n// Change to: \"Automation Assistant\" or \"Workflow Orchestrator\"\n\n// Current: \"Support Bot\"\n// Change to: \"Support Automation Module\"\n```\n\n---\n\n## 7. Environment & Configuration\n\n### No changes needed in:\n- `.env` files\n- Database connection strings\n- JWT secrets\n- Port configurations\n\n---\n\n## 8. New Features to Highlight\n\nAdd these concepts to documentation:\n\n1. **Modular Architecture**\n   - Pluggable automation modules\n   - Custom agent development\n   - Module marketplace (future)\n\n2. **Workflow Orchestration**\n   - Chain multiple agents\n   - Conditional logic\n   - Event-driven triggers\n\n3. **AI Capabilities**\n   - Natural language processing\n   - Intelligent decision making\n   - Learning from execution history\n\n4. **Integration Framework**\n   - Connect any API\n   - Custom data sources\n   - Third-party module support\n\n---\n\n## 9. Marketing Copy Updates\n\n### Hero/Landing Page:\n**FROM:** \"Streamline your sales process with intelligent automation\"\n**TO:** \"Build intelligent workflows with modular AI automation\"\n\n### Value Propositions:\n- ❌ \"Close more deals faster\"\n- ❌ \"Never miss a lead\"\n- ✅ \"Automate complex workflows effortlessly\"\n- ✅ \"Scale your operations with AI\"\n- ✅ \"Build custom automation modules\"\n\n---\n\n## 10. Implementation Priority\n\n### Phase 1 (Critical - Do First):\n1. Update README.md\n2. Update client/index.html (meta tags, title)\n3. Update main dashboard metrics\n4. Update agent descriptions\n\n### Phase 2 (Important):\n1. Update all documentation files\n2. Update API descriptions\n3. Update UI copy throughout pages\n\n### Phase 3 (Nice to Have):\n1. Add new automation-specific features\n2. Create module marketplace concept\n3. Enhanced agent configuration UI\n\n---\n\n## Notes:\n- This rebranding maintains the same technical architecture\n- No breaking changes to database schema required\n- All existing features remain functional\n- Focus shifts from \"sales CRM\" to \"general automation platform\"\n- More scalable positioning for future AI modules\n","size_bytes":7885},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Trash2, Eye, EyeOff, Loader2, Key, Link as LinkIcon } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport type { Organization, ApiKey, Integration } from \"@shared/schema\";\n\ninterface CreateApiKeyForm {\n  name: string;\n}\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [isCreateKeyDialogOpen, setIsCreateKeyDialogOpen] = useState(false);\n  const [visibleKeys, setVisibleKeys] = useState<Set<string>>(new Set());\n\n  const { data: organization } = useQuery<Organization>({\n    queryKey: [\"/api/organization\"],\n  });\n\n  const { data: apiKeys, isLoading: apiKeysLoading } = useQuery<ApiKey[]>({\n    queryKey: [\"/api/api-keys\"],\n  });\n\n  const { data: integrations, isLoading: integrationsLoading } = useQuery<\n    Integration[]\n  >({\n    queryKey: [\"/api/integrations\"],\n  });\n\n  const form = useForm<CreateApiKeyForm>({\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  const createKeyMutation = useMutation({\n    mutationFn: async (data: CreateApiKeyForm) => {\n      return apiRequest(\"POST\", \"/api/api-keys\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/api-keys\"] });\n      setIsCreateKeyDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"API key created\",\n        description: \"Your new API key has been generated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create API key\",\n        description: error.message,\n      });\n    },\n  });\n\n  const deleteKeyMutation = useMutation({\n    mutationFn: async (keyId: string) => {\n      return apiRequest(\"DELETE\", `/api/api-keys/${keyId}`, null);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/api-keys\"] });\n      toast({\n        title: \"API key deleted\",\n        description: \"The API key has been revoked\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to delete API key\",\n        description: error.message,\n      });\n    },\n  });\n\n  const toggleKeyVisibility = (keyId: string) => {\n    setVisibleKeys((prev) => {\n      const next = new Set(prev);\n      if (next.has(keyId)) {\n        next.delete(keyId);\n      } else {\n        next.add(keyId);\n      }\n      return next;\n    });\n  };\n\n  const maskKey = (key: string) => {\n    return `${key.slice(0, 8)}${\"*\".repeat(24)}${key.slice(-8)}`;\n  };\n\n  const integrationIcons = {\n    google: \"🔗\",\n    email: \"📧\",\n    whatsapp: \"💬\",\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-semibold tracking-tight\">Settings</h1>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          Manage your organization settings and integrations\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"organization\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"organization\" data-testid=\"tab-organization\">\n            Organization\n          </TabsTrigger>\n          <TabsTrigger value=\"api-keys\" data-testid=\"tab-api-keys\">\n            API Keys\n          </TabsTrigger>\n          <TabsTrigger value=\"integrations\" data-testid=\"tab-integrations\">\n            Integrations\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"organization\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-6\">Organization Details</h2>\n            <div className=\"space-y-4 max-w-lg\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Organization Name\n                </label>\n                <Input\n                  value={organization?.name || \"\"}\n                  readOnly\n                  data-testid=\"input-org-name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Plan</label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    value={organization?.plan || \"free\"}\n                    readOnly\n                    className=\"flex-1\"\n                    data-testid=\"input-org-plan\"\n                  />\n                  <Badge variant=\"outline\">\n                    {organization?.plan?.toUpperCase() || \"FREE\"}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Created At\n                </label>\n                <Input\n                  value={\n                    organization?.createdAt\n                      ? new Date(organization.createdAt).toLocaleDateString()\n                      : \"\"\n                  }\n                  readOnly\n                  data-testid=\"input-org-created\"\n                />\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"api-keys\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">API Keys</h2>\n              <Button onClick={() => setIsCreateKeyDialogOpen(true)} data-testid=\"button-create-api-key\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Generate Key\n              </Button>\n            </div>\n\n            {apiKeysLoading ? (\n              <div className=\"flex items-center justify-center py-16\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : apiKeys && apiKeys.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                        Name\n                      </TableHead>\n                      <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                        Key\n                      </TableHead>\n                      <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                        Created\n                      </TableHead>\n                      <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                        Last Used\n                      </TableHead>\n                      <TableHead className=\"text-xs font-semibold uppercase tracking-wide text-right\">\n                        Actions\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {apiKeys.map((apiKey) => (\n                      <TableRow key={apiKey.id} data-testid={`row-api-key-${apiKey.id}`}>\n                        <TableCell className=\"font-medium\">{apiKey.name}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <code className=\"text-xs font-mono bg-muted px-2 py-1 rounded\">\n                              {visibleKeys.has(apiKey.id)\n                                ? apiKey.key\n                                : maskKey(apiKey.key)}\n                            </code>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6\"\n                              onClick={() => toggleKeyVisibility(apiKey.id)}\n                              data-testid={`button-toggle-${apiKey.id}`}\n                            >\n                              {visibleKeys.has(apiKey.id) ? (\n                                <EyeOff className=\"w-3 h-3\" />\n                              ) : (\n                                <Eye className=\"w-3 h-3\" />\n                              )}\n                            </Button>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {new Date(apiKey.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {apiKey.lastUsed\n                            ? new Date(apiKey.lastUsed).toLocaleDateString()\n                            : \"Never\"}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => deleteKeyMutation.mutate(apiKey.id)}\n                            disabled={deleteKeyMutation.isPending}\n                            data-testid={`button-delete-${apiKey.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <Key className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  No API keys yet. Generate one to get started.\n                </p>\n              </div>\n            )}\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"integrations\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-6\">Integrations</h2>\n\n            {integrationsLoading ? (\n              <div className=\"flex items-center justify-center py-16\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {[\"google\", \"email\", \"whatsapp\"].map((type) => {\n                  const integration = integrations?.find((i) => i.type === type);\n                  const isConnected = integration?.status === \"active\";\n\n                  return (\n                    <Card\n                      key={type}\n                      className=\"p-4 flex items-center gap-4\"\n                      data-testid={`card-integration-${type}`}\n                    >\n                      <div className=\"w-10 h-10 rounded-md bg-muted flex items-center justify-center text-xl\">\n                        {integrationIcons[type as keyof typeof integrationIcons]}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium capitalize\">{type}</h3>\n                        <Badge\n                          variant={isConnected ? \"default\" : \"secondary\"}\n                          className=\"text-xs mt-1\"\n                        >\n                          {isConnected ? \"Connected\" : \"Not Connected\"}\n                        </Badge>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        disabled\n                        data-testid={`button-configure-${type}`}\n                      >\n                        <LinkIcon className=\"w-4 h-4 mr-2\" />\n                        Configure\n                      </Button>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Dialog open={isCreateKeyDialogOpen} onOpenChange={setIsCreateKeyDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Generate API Key</DialogTitle>\n            <DialogDescription>\n              Create a new API key for your organization\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit((data) => createKeyMutation.mutate(data))}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Key Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Production API Key\"\n                        data-testid=\"input-key-name\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateKeyDialogOpen(false)}\n                  data-testid=\"button-cancel-key\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createKeyMutation.isPending}\n                  data-testid=\"button-submit-key\"\n                >\n                  {createKeyMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : (\n                    \"Generate Key\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14518},"server/python-agent-client.ts":{"content":"\nimport axios from 'axios';\n\nconst PYTHON_AGENT_URL = process.env.PYTHON_AGENT_URL || 'http://0.0.0.0:8000';\n\ninterface ExecutionRequest {\n  module_id: string;\n  org_id: string;\n  task_id?: string;\n  input_data: any;\n}\n\ninterface ExecutionResponse {\n  execution_id: string;\n  status: 'completed' | 'failed' | 'pending';\n  output?: any;\n  error?: string;\n}\n\nexport class PythonAgentClient {\n  private apiKey: string;\n  \n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n  \n  async executeModule(\n    moduleId: string,\n    orgId: string,\n    inputData: any,\n    taskId?: string\n  ): Promise<ExecutionResponse> {\n    try {\n      const response = await axios.post<ExecutionResponse>(\n        `${PYTHON_AGENT_URL}/execute`,\n        {\n          module_id: moduleId,\n          org_id: orgId,\n          task_id: taskId,\n          input_data: inputData\n        } as ExecutionRequest,\n        {\n          headers: {\n            'X-API-Key': this.apiKey,\n            'Content-Type': 'application/json'\n          },\n          timeout: 60000 // 60 seconds\n        }\n      );\n      \n      return response.data;\n    } catch (error: any) {\n      throw new Error(`Python agent execution failed: ${error.message}`);\n    }\n  }\n  \n  async healthCheck(): Promise<{ status: string; service?: string; error?: string }> {\n    try {\n      const response = await axios.get(`${PYTHON_AGENT_URL}/health`, {\n        timeout: 5000\n      });\n      return response.data;\n    } catch (error: any) {\n      return { \n        status: 'unhealthy', \n        error: error.message \n      };\n    }\n  }\n}\n","size_bytes":1575},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/agents.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Cpu, Play, Settings, Eye, Loader2 } from \"lucide-react\";\nimport type { Agent } from \"@shared/schema\";\n\nexport default function Agents() {\n  const { toast } = useToast();\n\n  const { data: agents, isLoading } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents\"],\n  });\n\n  const runMutation = useMutation({\n    mutationFn: async (agentId: string) => {\n      return apiRequest(\"POST\", `/api/agents/${agentId}/run`, null);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Agent started\",\n        description: \"The agent is now running\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to run agent\",\n        description: error.message,\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500\";\n      case \"inactive\":\n        return \"bg-gray-400\";\n      case \"error\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-400\";\n    }\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"default\";\n      case \"error\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-center py-32\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!agents || agents.length === 0) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Agents</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            AI agents to automate your workflows (coming soon)\n          </p>\n        </div>\n\n        <Card className=\"p-16\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <Cpu className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">No Agents Yet</h2>\n            <p className=\"text-sm text-muted-foreground mb-6\">\n              AI agents are powerful automation tools that will be available soon.\n              They'll help you streamline workflows, process data, and complete tasks\n              automatically.\n            </p>\n            <Button variant=\"outline\" disabled data-testid=\"button-create-agent\">\n              Coming Soon\n            </Button>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-semibold tracking-tight\">Agents</h1>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          Manage and monitor your AI automation agents\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {agents.map((agent) => (\n          <Card key={agent.id} className=\"p-6\" data-testid={`card-agent-${agent.id}`}>\n            <div className=\"flex items-start gap-4 mb-4\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Cpu className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"text-lg font-semibold mb-1\">{agent.name}</h3>\n                <Badge variant=\"outline\" className=\"text-xs mb-2\">\n                  {agent.type}\n                </Badge>\n              </div>\n            </div>\n\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mb-4\">\n              {agent.description || \"No description available\"}\n            </p>\n\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className={`w-2 h-2 rounded-full ${getStatusColor(agent.status)}`} />\n              <Badge variant={getStatusVariant(agent.status)} className=\"text-xs\">\n                {agent.status.charAt(0).toUpperCase() + agent.status.slice(1)}\n              </Badge>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1\"\n                disabled\n                data-testid={`button-view-${agent.id}`}\n              >\n                <Eye className=\"w-4 h-4 mr-1\" />\n                View\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                className=\"flex-1\"\n                onClick={() => runMutation.mutate(agent.id)}\n                disabled={runMutation.isPending}\n                data-testid={`button-run-${agent.id}`}\n              >\n                <Play className=\"w-4 h-4 mr-1\" />\n                Run\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled\n                data-testid={`button-settings-${agent.id}`}\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5596},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport { randomBytes } from \"crypto\";\nimport { storage } from \"./storage\";\nimport {\n  generateToken,\n  requireAuth,\n  requireRole,\n  requireOrgAccess,\n  type AuthRequest,\n} from \"./middleware/auth\";\nimport {\n  loginSchema,\n  signupSchema,\n  passwordResetSchema,\n  insertUserSchema,\n  insertTaskSchema,\n  insertApiKeySchema,\n  insertModuleSchema,\n  insertModuleExecutionSchema,\n} from \"@shared/schema\";\nimport { PythonAgentClient } from \"./python-agent-client\";\nimport { sql, and, eq, desc } from \"drizzle-orm\";\nimport {\n  agentCatalog,\n  agentSubscriptions,\n  users,\n  tasks,\n  moduleExecutions,\n} from \"@shared/db/schema\"; // Assuming these imports are correct\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ===== Authentication Routes =====\n\n  // Regular Login\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      await storage.updateUserLastLogin(user.id);\n\n      const token = generateToken(user);\n      res.json({ token, user: { ...user, password: undefined } });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Login failed\" });\n    }\n  });\n\n  // Admin Login (Super Admin and Admin only)\n  app.post(\"/api/auth/admin/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      // Check if user is admin or super_admin\n      if (user.role !== \"admin\" && user.role !== \"super_admin\") {\n        return res.status(403).json({ message: \"Access denied. Admin privileges required.\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      await storage.updateUserLastLogin(user.id);\n\n      const token = generateToken(user);\n      res.json({\n        token,\n        user: { ...user, password: undefined },\n        message: `Welcome back, ${user.role === \"super_admin\" ? \"Super Admin\" : \"Admin\"}`\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Admin login failed\" });\n    }\n  });\n\n  // Signup - First user becomes super admin, additional users disabled\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n\n      // Check if any user already exists\n      const allUsers = await storage.getAllUsersGlobal();\n      if (allUsers.length > 0) {\n        return res.status(403).json({\n          message: \"Signup disabled. System already has a super admin. Contact the administrator to get invited.\"\n        });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Create single default organization for the system\n      const organization = await storage.createOrganization({\n        name: \"Abetworks System\",\n        plan: \"enterprise\",\n      });\n\n      // Hash password and create FIRST and ONLY super admin\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        name,\n        email,\n        password: hashedPassword,\n        role: \"super_admin\", // First user is THE super admin\n        orgId: organization.id,\n      });\n\n      const token = generateToken(user);\n      res.json({\n        token,\n        user: { ...user, password: undefined },\n        message: \"Super Admin account created successfully. You control the entire system.\"\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Signup failed\" });\n    }\n  });\n\n  // Password reset (placeholder)\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { email } = passwordResetSchema.parse(req.body);\n\n      // In production, send actual email\n      // For now, just return success\n      res.json({ message: \"Password reset email sent\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Reset failed\" });\n    }\n  });\n\n  // ===== User Routes =====\n\n  // Get all users in system (super admin sees everyone)\n  app.get(\"/api/users\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const users = await storage.getAllUsersGlobal();\n      res.json(users.map((u) => ({ ...u, password: undefined })));\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch users\" });\n    }\n  });\n\n  // Invite user (super admin only)\n  app.post(\"/api/users/invite\", requireAuth, requireRole(\"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { name, email, role } = req.body;\n\n      // Get the system's organization\n      const systemOrg = await storage.getOrganization(req.user!.orgId);\n      if (!systemOrg) {\n        return res.status(500).json({ message: \"System organization not found\" });\n      }\n\n      // Validate role\n      const validRoles = [\"member\", \"admin\"];\n      const userRole = role || \"member\";\n\n      if (!validRoles.includes(userRole)) {\n        return res.status(400).json({ message: \"Invalid role. Only 'member' or 'admin' allowed.\" });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Generate temporary password\n      const tempPassword = randomBytes(16).toString(\"hex\");\n      const hashedPassword = await bcrypt.hash(tempPassword, 10);\n\n      const user = await storage.createUser({\n        name,\n        email,\n        password: hashedPassword,\n        role: userRole,\n        orgId: systemOrg.id, // All users in same org\n      });\n\n      // In production, send invitation email with temp password\n      res.json({\n        user: { ...user, password: undefined },\n        tempPassword, // Return this in dev only - remove in production\n        message: `User invited as ${userRole}. Email: ${email}, Temp Password: ${tempPassword}`\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to invite user\" });\n    }\n  });\n\n  // Update user (admin only)\n  app.patch(\"/api/users/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { name, role } = req.body;\n\n      // Verify user belongs to same org\n      const user = await storage.getUser(id);\n      if (!user || user.orgId !== req.user!.orgId) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Update user (implement in storage)\n      // const updatedUser = await storage.updateUser(id, { name, role });\n\n      res.json({ message: \"User updated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to update user\" });\n    }\n  });\n\n  // Delete user (admin only)\n  app.delete(\"/api/users/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id, req.user!.orgId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete user\" });\n    }\n  });\n\n  // ===== Organization Routes =====\n\n  // Get organization details\n  app.get(\"/api/organization\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const org = await storage.getOrganization(req.user!.orgId);\n      res.json(org);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch organization\" });\n    }\n  });\n\n  // ===== Task Routes =====\n\n  // Get all tasks in organization\n  app.get(\"/api/tasks\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const tasks = await storage.getAllTasks(req.user!.orgId);\n      res.json(tasks);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch tasks\" });\n    }\n  });\n\n  // Create task\n  app.post(\"/api/tasks\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const taskData = {\n        description: req.body.description,\n        status: \"pending\" as const,\n        userId: req.user!.id,\n        orgId: req.user!.orgId,\n      };\n\n      const task = await storage.createTask(taskData);\n      res.json(task);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create task\" });\n    }\n  });\n\n  // ===== Logs Routes =====\n\n  // Get logs for organization\n  app.get(\"/api/logs\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getAllLogs(req.user!.orgId, limit);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch logs\" });\n    }\n  });\n\n  // ===== Metrics Routes =====\n\n  // Dashboard metrics\n  app.get(\"/api/metrics/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const orgId = req.user!.orgId;\n\n      // Get active users count\n      const activeUsers = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(users)\n        .where(eq(users.orgId, orgId));\n\n      // Get completed tasks\n      const completedTasks = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(tasks)\n        .where(\n          and(\n            eq(tasks.orgId, orgId),\n            eq(tasks.status, \"completed\")\n          )\n        );\n\n      // Get pending tasks\n      const pendingTasks = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(tasks)\n        .where(\n          and(\n            eq(tasks.orgId, orgId),\n            eq(tasks.status, \"pending\")\n          )\n        );\n\n      // Get total executions (as \"leads generated\" for now)\n      const totalExecutions = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(moduleExecutions)\n        .where(eq(moduleExecutions.orgId, orgId));\n\n      res.json({\n        activeUsers: Number(activeUsers[0]?.count || 0),\n        tasksDone: Number(completedTasks[0]?.count || 0),\n        leadsGenerated: Number(totalExecutions[0]?.count || 0),\n        tasksPending: Number(pendingTasks[0]?.count || 0),\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Reports metrics\n  app.get(\"/api/metrics/reports\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const tasks = await storage.getAllTasks(req.user!.orgId);\n      const users = await storage.getAllUsers(req.user!.orgId);\n      const resourceUsages = await storage.getResourceUsage(req.user!.orgId);\n\n      // Tasks by status\n      const tasksByStatus = [\n        { status: \"Pending\", count: tasks.filter((t) => t.status === \"pending\").length },\n        { status: \"Running\", count: tasks.filter((t) => t.status === \"running\").length },\n        { status: \"Completed\", count: tasks.filter((t) => t.status === \"completed\").length },\n        { status: \"Failed\", count: tasks.filter((t) => t.status === \"failed\").length },\n      ];\n\n      // Tasks by user\n      const tasksByUser = users.map((user) => ({\n        user: user.name,\n        count: tasks.filter((t) => t.userId === user.id).length,\n      }));\n\n      // Tasks over time (last 7 days)\n      const tasksOverTime = Array.from({ length: 7 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() - (6 - i));\n        const dateStr = date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" });\n\n        return {\n          date: dateStr,\n          count: Math.floor(Math.random() * 20) + 5, // Placeholder\n        };\n      });\n\n      // Resource usage\n      const totalUsage = resourceUsages.reduce(\n        (acc, usage) => ({\n          apiCalls: acc.apiCalls + usage.apiCalls,\n          tasksRun: acc.tasksRun + usage.tasksRun,\n          storageUsed: acc.storageUsed + usage.storageUsed,\n        }),\n        { apiCalls: 0, tasksRun: 0, storageUsed: 0 }\n      );\n\n      res.json({\n        tasksByStatus,\n        tasksByUser,\n        tasksOverTime,\n        resourceUsage: totalUsage,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch reports\" });\n    }\n  });\n\n  // ===== Agent Catalog & Subscription Routes =====\n\n  // Get all available agents from catalog (marketplace)\n  app.get(\"/api/agent-catalog\", requireAuth, async (_req: AuthRequest, res) => {\n    try {\n      const agents = await storage.getAllAgentCatalog();\n      res.json(agents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch agent catalog\" });\n    }\n  });\n\n  // Get all agents that the organization has activated\n  app.get(\"/api/agents\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const subscriptions = await storage.getAllAgentSubscriptions(req.user!.orgId);\n\n      const agentsWithDetails = await Promise.all(\n        subscriptions.map(async (sub) => {\n          const catalogAgent = await storage.getAgentCatalog(sub.agentId);\n          return {\n            ...sub,\n            agent: catalogAgent,\n          };\n        })\n      );\n\n      res.json(agentsWithDetails);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch activated agents\" });\n    }\n  });\n\n  // Activate an agent for the organization\n  app.post(\"/api/agents/activate\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { agentId } = req.body;\n\n      if (!agentId || typeof agentId !== \"string\") {\n        return res.status(400).json({ message: \"agentId is required and must be a string\" });\n      }\n\n      const catalogAgent = await storage.getAgentCatalog(agentId);\n      if (!catalogAgent) {\n        return res.status(404).json({ message: \"Agent not found in catalog\" });\n      }\n\n      const existing = await storage.getAgentSubscriptionByAgentId(agentId, req.user!.orgId);\n      if (existing) {\n        return res.status(400).json({ message: \"Agent already activated\" });\n      }\n\n      const subscription = await storage.createAgentSubscription({\n        orgId: req.user!.orgId,\n        agentId,\n        status: \"active\",\n      });\n\n      res.json({ message: \"Agent activated successfully\", subscription });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to activate agent\" });\n    }\n  });\n\n  // Deactivate an agent for the organization\n  app.delete(\"/api/agents/:subscriptionId\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { subscriptionId } = req.params;\n      await storage.deleteAgentSubscription(subscriptionId, req.user!.orgId);\n      res.json({ message: \"Agent deactivated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to deactivate agent\" });\n    }\n  });\n\n  // ===== Agent Marketplace Routes =====\n\n  // Agent marketplace endpoints\n  app.get(\"/api/agents/marketplace\", requireAuth, async (req, res) => {\n    try {\n      const agents = await db.select().from(agentCatalog);\n      res.json(agents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/agents/:agentId/activate\", requireAuth, async (req, res) => {\n    try {\n      const { agentId } = req.params;\n      const { config } = req.body;\n      const orgId = req.user!.orgId;\n\n      // Check if already activated\n      const existing = await db\n        .select()\n        .from(agentSubscriptions)\n        .where(\n          and(\n            eq(agentSubscriptions.agentId, agentId),\n            eq(agentSubscriptions.orgId, orgId)\n          )\n        );\n\n      if (existing.length > 0) {\n        return res.status(400).json({ message: \"Agent already activated\" });\n      }\n\n      // Activate agent\n      const [subscription] = await db\n        .insert(agentSubscriptions)\n        .values({\n          agentId,\n          orgId,\n          config: config || {},\n          isActive: true,\n        })\n        .returning();\n\n      res.json(subscription);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/agents/:agentId/deactivate\", requireAuth, async (req, res) => {\n    try {\n      const { agentId } = req.params;\n      const orgId = req.user!.orgId;\n\n      await db\n        .delete(agentSubscriptions)\n        .where(\n          and(\n            eq(agentSubscriptions.agentId, agentId),\n            eq(agentSubscriptions.orgId, orgId)\n          )\n        );\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/agents/active\", requireAuth, async (req, res) => {\n    try {\n      const orgId = req.user!.orgId;\n\n      const activeAgents = await db\n        .select({\n          agent: agentCatalog,\n          subscription: agentSubscriptions,\n        })\n        .from(agentSubscriptions)\n        .innerJoin(agentCatalog, eq(agentSubscriptions.agentId, agentCatalog.id))\n        .where(\n          and(\n            eq(agentSubscriptions.orgId, orgId),\n            eq(agentSubscriptions.isActive, true)\n          )\n        );\n\n      res.json(activeAgents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n\n  // Get all active agents for organization\n  app.get(\"/api/agents/active\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const subscriptions = await storage.getAllAgentSubscriptions(req.user!.orgId);\n\n      const activeAgents = await Promise.all(\n        subscriptions.map(async (sub) => {\n          const catalogAgent = await storage.getAgentCatalog(sub.agentId);\n          return catalogAgent;\n        })\n      );\n\n      res.json(activeAgents.filter(Boolean));\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch active agents\" });\n    }\n  });\n\n  // Activate an agent by ID (URL parameter version)\n  app.post(\"/api/agents/:id/activate\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id: agentId } = req.params;\n\n      const catalogAgent = await storage.getAgentCatalog(agentId);\n      if (!catalogAgent) {\n        return res.status(404).json({ message: \"Agent not found in catalog\" });\n      }\n\n      const existing = await storage.getAgentSubscriptionByAgentId(agentId, req.user!.orgId);\n      if (existing) {\n        return res.status(400).json({ message: \"Agent already activated\" });\n      }\n\n      const subscription = await storage.createAgentSubscription({\n        orgId: req.user!.orgId,\n        agentId,\n        status: \"active\",\n      });\n\n      res.json({ message: \"Agent activated successfully\", subscription });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to activate agent\" });\n    }\n  });\n\n  // ===== Module Routes (Python Agents) =====\n\n  // Python agent endpoints\n  app.post(\"/api/modules/execute\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { inputData, taskId } = req.body;\n\n      const module = await storage.getModule(id, req.user!.orgId);\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n\n      if (module.status !== \"active\") {\n        return res.status(400).json({ message: \"Module is not active\" });\n      }\n\n      // Get organization's API key for Python service\n      const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n      if (!apiKeys.length) {\n        return res.status(400).json({\n          message: \"No API key configured. Please create an API key first.\"\n        });\n      }\n\n      // Create module execution record\n      const execution = await storage.createModuleExecution({\n        moduleId: id,\n        taskId: taskId || null,\n        input: JSON.stringify(inputData),\n        status: \"pending\",\n        orgId: req.user!.orgId,\n      });\n\n      // Call Python agent service\n      try {\n        const client = new PythonAgentClient(apiKeys[0].key);\n\n        await storage.updateModuleExecution(\n          execution.id,\n          req.user!.orgId,\n          \"running\"\n        );\n\n        const result = await client.executeModule(\n          module.pythonModule,\n          req.user!.orgId,\n          inputData,\n          taskId\n        );\n\n        await storage.updateModuleExecution(\n          execution.id,\n          req.user!.orgId,\n          result.status === \"completed\" ? \"completed\" : \"failed\",\n          result.output ? JSON.stringify(result.output) : undefined,\n          result.error\n        );\n\n        res.json({\n          executionId: execution.id,\n          ...result,\n        });\n      } catch (error: any) {\n        await storage.updateModuleExecution(\n          execution.id,\n          req.user!.orgId,\n          \"failed\",\n          undefined,\n          error.message\n        );\n\n        throw error;\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to execute module\" });\n    }\n  });\n\n\n  // Get all modules\n  app.get(\"/api/modules\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const modules = await storage.getAllModules(req.user!.orgId);\n      res.json(modules);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch modules\" });\n    }\n  });\n\n  // Get a specific module\n  app.get(\"/api/modules/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const module = await storage.getModule(id, req.user!.orgId);\n\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n\n      res.json(module);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch module\" });\n    }\n  });\n\n  // Create a module\n  app.post(\"/api/modules\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const moduleData = insertModuleSchema.parse({\n        ...req.body,\n        orgId: req.user!.orgId,\n      });\n\n      const module = await storage.createModule(moduleData);\n      res.json(module);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create module\" });\n    }\n  });\n\n  // Update module status\n  app.patch(\"/api/modules/:id/status\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (![\"active\", \"inactive\", \"error\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      await storage.updateModuleStatus(id, req.user!.orgId, status);\n      res.json({ message: \"Module status updated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to update module status\" });\n    }\n  });\n\n  // Delete a module\n  app.delete(\"/api/modules/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteModule(id, req.user!.orgId);\n      res.json({ message: \"Module deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete module\" });\n    }\n  });\n\n  // Get all module executions\n  app.get(\"/api/module-executions\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const executions = await storage.getAllModuleExecutions(req.user!.orgId, limit);\n      res.json(executions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch executions\" });\n    }\n  });\n\n  // Get executions for a specific module\n  app.get(\"/api/modules/:id/executions\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n\n      const executions = await storage.getModuleExecutionsByModule(\n        id,\n        req.user!.orgId,\n        limit\n      );\n      res.json(executions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch executions\" });\n    }\n  });\n\n  // Get module configuration\n  app.get(\"/api/modules/:id/config\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const module = await storage.getModule(id, req.user!.orgId);\n\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n\n      const config = module.userConfig ? JSON.parse(module.userConfig) : {};\n      res.json({ config });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch configuration\" });\n    }\n  });\n\n  // Update module configuration\n  app.put(\"/api/modules/:id/config\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { config } = req.body;\n\n      const module = await storage.getModule(id, req.user!.orgId);\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n\n      await storage.updateModuleConfig(id, req.user!.orgId, JSON.stringify(config));\n      res.json({ message: \"Configuration updated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to update configuration\" });\n    }\n  });\n\n  // Health check for Python service\n  app.get(\"/api/python-agent/health\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n\n      if (!apiKeys.length) {\n        return res.json({\n          status: \"unavailable\",\n          message: \"No API key configured\"\n        });\n      }\n\n      const client = new PythonAgentClient(apiKeys[0].key);\n      const health = await client.healthCheck();\n      res.json(health);\n    } catch (error: any) {\n      res.status(500).json({\n        status: \"unhealthy\",\n        error: error.message\n      });\n    }\n  });\n\n  // ===== API Key Routes =====\n\n  // Get all API keys\n  app.get(\"/api/api-keys\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const keys = await storage.getAllApiKeys(req.user!.orgId);\n      res.json(keys);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch API keys\" });\n    }\n  });\n\n  // Create API key\n  app.post(\"/api/api-keys\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { name } = req.body;\n      const key = `abw_${randomBytes(32).toString(\"hex\")}`;\n\n      const apiKey = await storage.createApiKey({\n        name,\n        key,\n        orgId: req.user!.orgId,\n      });\n\n      res.json(apiKey);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create API key\" });\n    }\n  });\n\n  // Delete API key\n  app.delete(\"/api/api-keys/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteApiKey(id, req.user!.orgId);\n      res.json({ message: \"API key deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete API key\" });\n    }\n  });\n\n  // ===== Integration Routes =====\n\n  // Get all integrations\n  app.get(\"/api/integrations\", requireAuth, requireOrgAccess, async (req: AuthRequest, res) => {\n    try {\n      const integrations = await storage.getAllIntegrations(req.user!.orgId);\n      res.json(integrations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch integrations\" });\n    }\n  });\n\n  // ===== External Agent Registration =====\n\n  // Register a new agent from external API\n  app.post(\"/api/agents/register\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const {\n        id,\n        name,\n        type,\n        description,\n        longDescription,\n        icon,\n        category,\n        backendEndpoint,\n        configSchema,\n        price = 0,\n      } = req.body;\n\n      if (!id || !name || !type || !description || !category) {\n        return res.status(400).json({\n          message: \"Missing required fields: id, name, type, description, category\"\n        });\n      }\n\n      // Check if agent already exists\n      const existing = await storage.getAgentCatalog(id);\n      if (existing) {\n        return res.status(400).json({\n          message: \"Agent with this ID already exists\"\n        });\n      }\n\n      // Create agent in catalog\n      const agent = await storage.createAgentCatalog({\n        id,\n        name,\n        type,\n        description,\n        longDescription: longDescription || description,\n        icon: icon || \"🤖\",\n        category,\n        backendEndpoint: backendEndpoint || `/api/agents/${id}`,\n        configSchema: configSchema ? JSON.stringify(configSchema) : null,\n        price,\n        isActive: true,\n      });\n\n      res.json({\n        message: \"Agent registered successfully\",\n        agent\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to register agent\" });\n    }\n  });\n\n  // Update agent metadata\n  app.patch(\"/api/agents/catalog/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const agent = await storage.getAgentCatalog(id);\n      if (!agent) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n\n      // Update agent (you'll need to implement this in storage)\n      // await storage.updateAgentCatalog(id, updates);\n\n      res.json({\n        message: \"Agent updated successfully\"\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to update agent\" });\n    }\n  });\n\n  // Delete agent from catalog\n  app.delete(\"/api/agents/catalog/:id\", requireAuth, requireRole(\"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n\n      // First deactivate all subscriptions\n      const subscriptions = await storage.getAllAgentSubscriptions(req.user!.orgId);\n      const agentSubs = subscriptions.filter(sub => sub.agentId === id);\n\n      for (const sub of agentSubs) {\n        await storage.deleteAgentSubscription(sub.id, req.user!.orgId);\n      }\n\n      // Delete from catalog (you'll need to implement this)\n      // await storage.deleteAgentCatalog(id);\n\n      res.json({\n        message: \"Agent deleted from catalog\"\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete agent\" });\n    }\n  });\n\n  // ===== Database Seed Route (Development Only) =====\n\n  // Seed agents endpoint (admin only)\n  app.post(\"/api/agents/seed\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.userId!);\n      if (user.role !== \"super_admin\" && user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { seedAgents } = await import(\"./seed-agents\");\n      await seedAgents(storage);\n\n      res.json({ message: \"Agents seeded successfully\" });\n    } catch (error: any) {\n      console.error(\"Seed error:\", error);\n      res.status(500).json({ message: error.message || \"Failed to seed agents\" });\n    }\n  });\n\n  // Agent registration endpoint\n  app.post(\"/api/agents/register\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const {\n        id,\n        name,\n        type,\n        description,\n        longDescription,\n        icon,\n        category,\n        backendEndpoint,\n        configSchema,\n        price = 0,\n      } = req.body;\n\n      if (!id || !name || !type || !description || !category) {\n        return res.status(400).json({\n          message: \"Missing required fields: id, name, type, description, category\"\n        });\n      }\n\n      // Check if agent already exists\n      const existing = await storage.getAgentCatalog(id);\n      if (existing) {\n        return res.status(400).json({\n          message: \"Agent with this ID already exists\"\n        });\n      }\n\n      // Create agent in catalog\n      const agent = await storage.createAgentCatalog({\n        id,\n        name,\n        type,\n        description,\n        longDescription: longDescription || description,\n        icon: icon || \"🤖\",\n        category,\n        backendEndpoint: backendEndpoint || `/api/agents/${id}`,\n        configSchema: configSchema ? JSON.stringify(configSchema) : null,\n        price,\n        isActive: true,\n      });\n\n      res.json({\n        message: \"Agent registered successfully\",\n        agent\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to register agent\" });\n    }\n  });\n\n  // Update agent metadata\n  app.patch(\"/api/agents/catalog/:id\", requireAuth, requireRole(\"admin\", \"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const agent = await storage.getAgentCatalog(id);\n      if (!agent) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n\n      // Update agent (you'll need to implement this in storage)\n      // await storage.updateAgentCatalog(id, updates);\n\n      res.json({\n        message: \"Agent updated successfully\"\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to update agent\" });\n    }\n  });\n\n  // Delete agent from catalog\n  app.delete(\"/api/agents/catalog/:id\", requireAuth, requireRole(\"super_admin\"), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n\n      // First deactivate all subscriptions\n      const subscriptions = await storage.getAllAgentSubscriptions(req.user!.orgId);\n      const agentSubs = subscriptions.filter(sub => sub.agentId === id);\n\n      for (const sub of agentSubs) {\n        await storage.deleteAgentSubscription(sub.id, req.user!.orgId);\n      }\n\n      // Delete from catalog (you'll need to implement this)\n      // await storage.deleteAgentCatalog(id);\n\n      res.json({\n        message: \"Agent deleted from catalog\"\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete agent\" });\n    }\n  });\n\n  // ===== Database Seed Route (Development Only) =====\n\n  // Seed the agent catalog with sample agents\n  app.post(\"/api/seed/agents\", requireAuth, requireRole(\"super_admin\"), async (_req: AuthRequest, res) => {\n    try {\n      const sampleAgents = [\n        {\n          id: \"lead-scoring-ai\",\n          name: \"Lead Scoring AI\",\n          type: \"ml-classifier\",\n          description: \"Automatically score and prioritize leads based on behavior, demographics, and engagement patterns\",\n          longDescription: \"Our Lead Scoring AI uses machine learning to analyze multiple data points including email engagement, website visits, company size, and industry to assign a score to each lead. This helps your sales team focus on the most promising opportunities.\\n\\nFeatures:\\n- Real-time scoring updates\\n- Customizable scoring criteria\\n- Integration with CRM systems\\n- Historical trend analysis\",\n          icon: \"🎯\",\n          category: \"lead-generation\",\n          backendEndpoint: \"/api/ml/lead-scoring\",\n          configSchema: JSON.stringify({\n            weights: {\n              demographic: 0.3,\n              behavioral: 0.5,\n              engagement: 0.2\n            },\n            threshold: 70\n          }),\n          price: 0,\n          isActive: true,\n        },\n        {\n          id: \"nlp-sentiment\",\n          name: \"Sentiment Analysis\",\n          type: \"nlp\",\n          description: \"Analyze customer feedback, reviews, and communications for sentiment and key insights\",\n          longDescription: \"Understand how your customers feel about your products and services with advanced NLP. This agent processes text from various sources including emails, chat messages, and reviews to extract sentiment scores and identify key themes.\\n\\nCapabilities:\\n- Multi-language support\\n- Entity extraction\\n- Emotion detection\\n- Summary generation\",\n          icon: \"💬\",\n          category: \"analytics\",\n          backendEndpoint: \"/api/nlp/sentiment\",\n          configSchema: JSON.stringify({\n            languages: [\"en\", \"es\", \"fr\"],\n            minConfidence: 0.7\n          }),\n          price: 0,\n          isActive: true,\n        },\n        {\n          id: \"sales-forecaster\",\n          name: \"Sales Forecaster\",\n          type: \"time-series\",\n          description: \"Predict future sales trends based on historical data and market conditions\",\n          longDescription: \"Make data-driven decisions with accurate sales forecasts. This agent analyzes historical sales patterns, seasonality, and market trends to predict future performance.\\n\\nKey features:\\n- Multiple forecasting models\\n- Confidence intervals\\n- Scenario planning\\n- Automated reports\",\n          icon: \"📈\",\n          category: \"forecasting\",\n          backendEndpoint: \"/api/forecast/sales\",\n          configSchema: JSON.stringify({\n            forecastHorizon: 90,\n            seasonalityPeriod: 7\n          }),\n          price: 49,\n          isActive: true,\n        },\n        {\n          id: \"email-automation\",\n          name: \"Email Campaign Optimizer\",\n          type: \"automation\",\n          description: \"Optimize email campaigns with AI-powered send time, subject line, and content recommendations\",\n          longDescription: \"Maximize email engagement with intelligent automation. This agent analyzes past campaign performance to suggest optimal send times, compelling subject lines, and personalized content variations.\\n\\nBenefits:\\n- Increased open rates\\n- Better click-through rates\\n- A/B testing automation\\n- Personalization at scale\",\n          icon: \"📧\",\n          category: \"communication\",\n          backendEndpoint: \"/api/automation/email\",\n          configSchema: JSON.stringify({\n            maxVariants: 5,\n            testDuration: 24\n          }),\n          price: 29,\n          isActive: true,\n        },\n        {\n          id: \"data-cleaner\",\n          name: \"Data Quality Agent\",\n          type: \"data-processing\",\n          description: \"Automatically detect and fix data quality issues in your CRM and databases\",\n          longDescription: \"Maintain pristine data quality with automated cleaning and validation. This agent identifies duplicates, standardizes formats, validates fields, and enriches missing information.\\n\\nFeatures:\\n- Duplicate detection and merging\\n- Format standardization\\n- Missing data enrichment\\n- Quality scoring\",\n          icon: \"🧹\",\n          category: \"data-processing\",\n          backendEndpoint: \"/api/data/clean\",\n          configSchema: JSON.stringify({\n            dedupeThreshold: 0.9,\n            autoFix: false\n          }),\n          price: 0,\n          isActive: true,\n        },\n        {\n          id: \"customer-churn\",\n          name: \"Churn Prediction\",\n          type: \"ml-classifier\",\n          description: \"Identify customers at risk of churning before they leave\",\n          longDescription: \"Retain more customers by identifying churn risk early. This agent analyzes usage patterns, support interactions, and engagement metrics to flag accounts that may be at risk.\\n\\nPrevention strategies:\\n- Early warning alerts\\n- Risk scoring\\n- Recommended interventions\\n- Success tracking\",\n          icon: \"⚠️\",\n          category: \"analytics\",\n          backendEndpoint: \"/api/ml/churn\",\n          configSchema: JSON.stringify({\n            riskThreshold: 0.7,\n            lookbackDays: 90\n          }),\n          price: 99,\n          isActive: true,\n        },\n        {\n          id: \"social-monitor\",\n          name: \"Social Media Monitor\",\n          type: \"monitoring\",\n          description: \"Track brand mentions, sentiment, and engagement across social media platforms\",\n          longDescription: \"Stay on top of your social media presence with real-time monitoring. This agent tracks mentions of your brand, products, and competitors across major social platforms.\\n\\nMonitoring includes:\\n- Brand mentions\\n- Sentiment tracking\\n- Competitor analysis\\n- Influencer identification\",\n          icon: \"📱\",\n          category: \"communication\",\n          backendEndpoint: \"/api/social/monitor\",\n          configSchema: JSON.stringify({\n            platforms: [\"twitter\", \"linkedin\", \"facebook\"],\n            updateFrequency: 300\n          }),\n          price: 79,\n          isActive: true,\n        },\n        {\n          id: \"task-automator\",\n          name: \"Task Automation Engine\",\n          type: \"automation\",\n          description: \"Automate repetitive tasks and workflows across your organization\",\n          longDescription: \"Free up time for high-value work by automating routine tasks. This agent can handle data entry, status updates, notifications, and complex multi-step workflows.\\n\\nAutomation types:\\n- Scheduled tasks\\n- Event-triggered workflows\\n- Conditional logic\\n- Multi-system integration\",\n          icon: \"🤖\",\n          category: \"automation\",\n          backendEndpoint: \"/api/automation/tasks\",\n          configSchema: JSON.stringify({\n            maxConcurrent: 10,\n            retryAttempts: 3\n          }),\n          price: 0,\n          isActive: true,\n        },\n      ];\n\n      let created = 0;\n      let skipped = 0;\n\n      for (const agent of sampleAgents) {\n        const existing = await storage.getAgentCatalog(agent.id);\n        if (!existing) {\n          await storage.createAgentCatalog(agent);\n          created++;\n        } else {\n          skipped++;\n        }\n      }\n\n      res.json({\n        message: \"Agent catalog seeded successfully\",\n        created,\n        skipped,\n        total: sampleAgents.length\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to seed agent catalog\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":43506},"README.md":{"content":"# Abetworks - Modular AI Automation Platform\n\nA production-ready, modular AI automation platform built for intelligent workflow orchestration. The system provides comprehensive user management, task tracking, reporting, and a powerful Python-based agent system for AI/ML workloads.\n\n## 🚀 Features\n\n### Core Functionality\n- ✅ **Multi-tenant Architecture** - Complete data isolation between organizations\n- ✅ **User Management** - Role-based access control (Member, Admin, Super Admin)\n- ✅ **Task Management** - Create, track, and manage automation workflows\n- ✅ **Dashboard Analytics** - Real-time metrics and reporting with interactive charts\n- ✅ **API Key Management** - Generate and manage API keys for integrations\n- ✅ **Modular Agent System** - Python-based AI agents with dynamic module loading\n- ✅ **Workflow Orchestration** - Chain multiple agents for complex automation\n- ✅ **Secure Authentication** - JWT-based authentication with database verification\n\n### AI Automation Features\n- Python microservices for AI/ML processing\n- Modular agent architecture (NLP, data processing, ML models)\n- Real-time execution tracking\n- Agent execution history and analytics\n- Custom module configuration\n- Agent testing interface\n- Live agent settings management\n\n### Security Features\n- Password hashing with bcrypt\n- JWT token authentication\n- Multi-tenant data isolation\n- Role-based access control\n- Secure API key generation\n- Python ↔ Node.js authentication\n\n## 🛠 Tech Stack\n\n### Frontend\n- **React 18+** with TypeScript\n- **Tailwind CSS** for styling\n- **Shadcn UI** component library\n- **Recharts** for data visualization\n- **React Query** (TanStack Query) for data fetching\n- **Wouter** for routing\n\n### Backend API (Node.js)\n- **Node.js** + Express + TypeScript\n- **PostgreSQL** (Neon serverless)\n- **Drizzle ORM**\n- **JWT** authentication\n- **bcrypt** for password hashing\n\n### Agent Runtime (Python)\n- **Python 3.11+**\n- **FastAPI** for REST endpoints\n- **psycopg2** for database access\n- **OpenAI** and **LangChain** for AI capabilities\n- **Pandas** and **NumPy** for data processing\n\n## 📋 Prerequisites\n\n- Node.js 18+ \n- Python 3.11+\n- PostgreSQL database (Neon serverless recommended)\n- npm or yarn package manager\n\n## 🚀 Quick Start\n\n### 1. Installation\n\n```bash\nnpm install\ncd python-agents\npip install -r requirements.txt\ncd ..\n```\n\n### 2. Environment Setup\n\n**Create a `.env` file in the root directory:**\n\n```env\nDATABASE_URL=postgresql://user:password@host/database?sslmode=require\nJWT_SECRET=your_secure_jwt_secret_minimum_32_characters\nNODE_ENV=development\nPYTHON_AGENT_URL=http://0.0.0.0:8000\nPYTHON_API_KEY=your_secure_api_key\n```\n\n**Create a `.env` file in the `python-agents` directory:**\n\n```env\nDATABASE_URL=postgresql://user:password@host/database?sslmode=require\nNODE_API_URL=http://0.0.0.0:5000\nPYTHON_API_KEY=your_secure_api_key\nOPENAI_API_KEY=sk-your-openai-api-key\n```\n\n**Important:** Use the same `DATABASE_URL` and `PYTHON_API_KEY` in both files.\n\n### 3. Database Setup\n\nPush the database schema:\n\n```bash\nnpm run db:push\n```\n\nFor force migration:\n\n```bash\nnpm run db:push --force\n```\n\n### 4. Start Development Servers\n\n**Terminal 1 - Node.js API:**\n```bash\nnpm run dev\n```\n\n**Terminal 2 - Python Agents:**\n```bash\ncd python-agents\nuvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\nThe application will be available at the URL shown in the Replit webview.\n\n## 📁 Project Structure\n\n```\nabetworks/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # UI components (Shadcn)\n│   │   │   ├── agent-displays/  # Agent-specific visualizations\n│   │   │   ├── ui/              # Shadcn UI components\n│   │   │   ├── agent-config-modal.tsx\n│   │   │   ├── agent-status.tsx\n│   │   │   ├── agent-test-interface.tsx\n│   │   │   └── app-sidebar.tsx\n│   │   ├── pages/         # Application pages\n│   │   │   ├── dashboard.tsx\n│   │   │   ├── modules.tsx         # Active modules dashboard\n│   │   │   ├── execution-history.tsx\n│   │   │   ├── agent-shop.tsx\n│   │   │   ├── agents.tsx\n│   │   │   ├── tasks.tsx\n│   │   │   ├── users.tsx\n│   │   │   ├── reports.tsx\n│   │   │   └── settings.tsx\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/           # Utilities and configurations\n│   │   └── App.tsx        # Main application component\n│   └── index.html\n├── server/                # Backend Express application\n│   ├── middleware/        # Authentication middleware\n│   ├── db.ts             # Database connection\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # Database operations\n│   ├── python-agent-client.ts  # Python agent communication\n│   └── index.ts          # Server entry point\n├── python-agents/         # Python AI agent runtime\n│   ├── agents/           # Agent implementations\n│   │   ├── base_agent.py # Abstract base class\n│   │   ├── nlp_agent.py  # NLP processing agent\n│   │   └── data_agent.py # Data transformation agent\n│   ├── main.py           # FastAPI server\n│   ├── .env              # Python environment variables\n│   └── requirements.txt  # Python dependencies\n├── shared/\n│   └── schema.ts         # Shared TypeScript types & DB schema\n├── docs/                 # Documentation\n│   ├── API.md\n│   ├── SETUP.md\n│   ├── AGENT_DEVELOPMENT.md\n│   └── REMAINING_TASKS.md\n└── design_guidelines.md  # UI/UX design system\n```\n\n## 🔐 Authentication\n\n### Login\nUsers can log in with email and password. JWT tokens are stored in localStorage and sent via Authorization header on protected requests.\n\n### Signup\nNew users can create accounts, which automatically creates a new organization. The user becomes a Super Admin of their organization.\n\n### Password Reset\nPassword reset workflow is implemented with email placeholder functionality.\n\n## 👥 User Roles\n\n| Role | Permissions |\n|------|-------------|\n| **Member** | View tasks, create tasks, view reports |\n| **Admin** | All Member permissions + manage users, manage API keys, manage modules |\n| **Super Admin** | All Admin permissions + full organization control |\n\n## 📊 Database Schema\n\n### Core Tables\n- **Users**: User accounts with role-based access\n- **Organizations**: Multi-tenant organization data\n- **Tasks**: Automation workflow tasks\n- **Modules**: Python agent module registry\n- **ModuleExecutions**: Agent execution history and results\n- **Agents**: Agent configurations (legacy)\n- **ApiKeys**: API authentication keys\n- **Logs**: Activity and execution logs\n\n### AI Agent Tables\n- **Modules**: Tracks available Python agent modules\n  - id, name, category, pythonModule, endpoint, config, status, orgId\n- **ModuleExecutions**: Execution history and analytics\n  - id, moduleId, taskId, input, output, status, error, duration, startedAt, completedAt\n\n## 🔌 API Endpoints\n\n### Authentication\n- `POST /api/auth/login` - User login\n- `POST /api/auth/signup` - User registration\n- `POST /api/auth/reset-password` - Password reset\n\n### Users\n- `GET /api/users` - Get all users in organization\n- `POST /api/users/invite` - Invite new user (Admin only)\n- `DELETE /api/users/:id` - Delete user (Admin only)\n\n### Tasks\n- `GET /api/tasks` - Get all tasks\n- `POST /api/tasks` - Create new task\n\n### Python Agent Modules\n- `POST /api/modules/:id/execute` - Execute a Python agent module\n- `GET /api/modules/health` - Check Python agent service health\n- `GET /api/modules/available` - List available Python modules\n\n### Metrics\n- `GET /api/metrics/dashboard` - Dashboard statistics\n- `GET /api/metrics/reports` - Detailed reports with charts\n\n### API Keys\n- `GET /api/api-keys` - Get all API keys (Admin only)\n- `POST /api/api-keys` - Generate new API key (Admin only)\n- `DELETE /api/api-keys/:id` - Delete API key (Admin only)\n\n## 🤖 Python Agent System\n\n### Agent Architecture\n\nThe platform uses a modular Python agent system where each agent inherits from `BaseAgent`:\n\n```python\nclass NLPAgent(BaseAgent):\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        # Agent implementation\n        pass\n```\n\n### Available Agent Types\n\n1. **NLP Agent** (`nlp_processor`): Natural language processing with OpenAI\n2. **Data Agent** (`data_processor`): Data transformation with Pandas\n3. **Custom Agents**: Extend `BaseAgent` to create your own\n\n### Creating Custom Agents\n\n1. Create a new file in `python-agents/agents/`\n2. Inherit from `BaseAgent`\n3. Implement the `execute()` method\n4. Register in `MODULE_REGISTRY` in `main.py`\n\n### Execution Flow\n\n```\nFrontend → Node.js API → Python FastAPI → Agent Module → Database\n   ↓           ↓              ↓              ↓            ↓\nResponse ← JSON Result ← Execution Log ← Processing ← Multi-tenant Check\n```\n\n## 🎨 Design System\n\nThe application follows a professional Linear/Notion-inspired design system. Key principles:\n\n- **Clean, minimal interface** with data-dense layouts\n- **Consistent spacing** using Tailwind units (2, 3, 4, 6, 8, 12, 16)\n- **Typography hierarchy** with Inter font family\n- **Blue accent color** scheme\n- **Responsive design** for mobile, tablet, and desktop\n- **Professional data-dense layouts**\n\nSee [design_guidelines.md](./design_guidelines.md) for complete design specifications.\n\n## 🔒 Security Best Practices\n\n1. **Environment Variables**: Never commit `.env` files. Use Replit Secrets for sensitive data.\n2. **JWT Tokens**: Tokens are verified against the database on every request.\n3. **Password Hashing**: All passwords are hashed with bcrypt before storage.\n4. **Multi-tenant Isolation**: All queries are scoped to the user's organization.\n5. **Role-based Access**: Middleware enforces role requirements on protected routes.\n6. **Python Agent Security**: API key authentication for Node.js ↔ Python communication.\n7. **Database Isolation**: All Python agent queries filter by `org_id`.\n\n## 🧪 Development\n\n### Available Scripts\n\n- `npm run dev` - Start Node.js development server\n- `npm run build` - Build for production\n- `npm run db:push` - Push database schema changes\n- `npm run db:studio` - Open Drizzle Studio (database GUI)\n\n### Python Agent Development\n\n```bash\ncd python-agents\npip install -r requirements.txt\nuvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\n### Adding New Features\n\n1. **Database Changes**: Update `shared/schema.ts` and run `npm run db:push`\n2. **Backend Routes**: Add endpoints in `server/routes.ts`\n3. **Python Agents**: Create new agent in `python-agents/agents/`\n4. **Frontend Pages**: Create new pages in `client/src/pages/`\n5. **UI Components**: Use Shadcn components from `client/src/components/ui/`\n\n## 📦 Deployment on Replit\n\n### Step 1: Configure Secrets\n\nIn Replit Secrets, add the following environment variables:\n\n**Required Secrets:**\n1. `DATABASE_URL` - Your Neon PostgreSQL connection string\n2. `JWT_SECRET` - A secure random string (minimum 32 characters)\n3. `PYTHON_AGENT_URL` - `http://0.0.0.0:8000`\n4. `PYTHON_API_KEY` - Secure API key for Python service auth\n5. `OPENAI_API_KEY` - Your OpenAI API key (optional, for NLP agent)\n\n**Generate secure keys:**\n```bash\n# Generate JWT secret\nopenssl rand -base64 32\n\n# Generate API key\nopenssl rand -hex 32\n```\n\n### Step 2: Database Migration\n\nEnsure your production database schema is up to date:\n\n```bash\nnpm run db:push\n```\n\n### Step 3: Update Python .env\n\nThe Python agents also need the same `DATABASE_URL`:\n\n1. Open `python-agents/.env`\n2. Ensure `DATABASE_URL` matches the one in Replit Secrets\n3. Ensure `PYTHON_API_KEY` matches the one in Replit Secrets\n\n### Step 4: Deploy\n\n1. Click the \"Deploy\" button in Replit\n2. The application will run both Node.js and Python services\n3. Configure custom domain if desired\n\n### Post-Deployment Checklist\n\n- [ ] All environment variables set in Replit Secrets\n- [ ] Database schema pushed successfully\n- [ ] Python agents `.env` file updated\n- [ ] Both Node.js (port 5000) and Python (port 8000) services running\n- [ ] Test login/signup functionality\n- [ ] Test agent execution\n- [ ] Verify multi-tenant isolation\n\nSee [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed deployment instructions.\n\n## 🤝 Contributing\n\n1. Follow the existing code structure\n2. Maintain multi-tenant isolation in all new features\n3. Add proper TypeScript types\n4. Follow the design system guidelines\n5. Test with multiple organizations and user roles\n6. Ensure Python agents respect `org_id` isolation\n\n## 📝 License\n\nProprietary - Abetworks\n\n## 🆘 Support\n\nFor issues, questions, or feature requests:\n- Check existing documentation in `docs/` directory\n- Review API endpoints in `docs/API.md`\n- See agent development guide in `docs/AGENT_DEVELOPMENT.md`\n- See complete platform guide in `COMPLETE_AI_PLATFORM_GUIDE.md`\n- Contact the development team\n\n---\n\n**Version:** 2.0.0 (AI Automation Platform)  \n**Last Updated:** 2024","size_bytes":13266},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\n\n// Auth Pages\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport ResetPassword from \"@/pages/reset-password\";\n// Import AdminLogin page\nimport AdminLogin from \"@/pages/admin-login\";\n\n// Dashboard Pages\nimport Dashboard from \"@/pages/dashboard\";\nimport Users from \"@/pages/users\";\nimport Tasks from \"@/pages/tasks\";\nimport Reports from \"@/pages/reports\";\nimport Agents from \"@/pages/agents\";\nimport AgentShop from \"@/pages/agent-shop\";\nimport Modules from \"./pages/modules\";\nimport ExecutionHistory from \"./pages/execution-history\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthLayout({ children }: { children: React.ReactNode }) {\n  return <>{children}</>;\n}\n\nfunction DashboardLayout({ children }: { children: React.ReactNode }) {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center h-16 px-6 border-b border-border\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex-1\" />\n          </header>\n          <main className=\"flex-1 overflow-y-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Auth Routes */}\n      <Route path=\"/login\">\n        <AuthLayout>\n          <Login />\n        </AuthLayout>\n      </Route>\n      {/* Admin Login Route */}\n      <Route path=\"/admin/login\">\n        <AuthLayout>\n          <AdminLogin />\n        </AuthLayout>\n      </Route>\n      <Route path=\"/signup\">\n        <AuthLayout>\n          <Signup />\n        </AuthLayout>\n      </Route>\n      <Route path=\"/reset-password\">\n        <AuthLayout>\n          <ResetPassword />\n        </AuthLayout>\n      </Route>\n\n      {/* Dashboard Routes */}\n      <Route path=\"/\">\n        <DashboardLayout>\n          <Dashboard />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/users\">\n        <DashboardLayout>\n          <Users />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/tasks\">\n        <DashboardLayout>\n          <Tasks />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/reports\">\n        <DashboardLayout>\n          <Reports />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/agents\">\n        <DashboardLayout>\n          <Agents />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/agent-shop\">\n        <DashboardLayout>\n          <AgentShop />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/modules\">\n        <DashboardLayout>\n          <Modules />\n        </DashboardLayout>\n      </Route>\n      <Route path=\"/execution-history\">\n        <DashboardLayout>\n          <ExecutionHistory />\n        </DashboardLayout>\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3692},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, MoreHorizontal, Trash2, Loader2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport type { User } from \"@shared/schema\";\n\ninterface InviteUserForm {\n  name: string;\n  email: string;\n  role: \"member\" | \"admin\" | \"super_admin\";\n}\n\nexport default function Users() {\n  const { toast } = useToast();\n  const [isInviteDialogOpen, setIsInviteDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const form = useForm<InviteUserForm>({\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      role: \"member\",\n    },\n  });\n\n  const inviteMutation = useMutation({\n    mutationFn: async (data: InviteUserForm) => {\n      return apiRequest(\"POST\", \"/api/users/invite\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsInviteDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"User invited\",\n        description: \"Invitation sent successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Invitation failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"DELETE\", `/api/users/${userId}`, null);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"User removed\",\n        description: \"User has been removed from the organization\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to remove user\",\n        description: error.message,\n      });\n    },\n  });\n\n  const filteredUsers = users?.filter(\n    (user) =>\n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"default\";\n      case \"admin\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"Super Admin\";\n      case \"admin\":\n        return \"Admin\";\n      default:\n        return \"Member\";\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Users</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Manage your team members and their permissions\n          </p>\n        </div>\n        <Button onClick={() => setIsInviteDialogOpen(true)} data-testid=\"button-invite-user\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Invite User\n        </Button>\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"mb-6\">\n          <Input\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search-users\"\n          />\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-16\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : filteredUsers && filteredUsers.length > 0 ? (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    User\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Email\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Role\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Last Login\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide text-right\">\n                    Actions\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.map((user) => (\n                  <TableRow key={user.id} className=\"hover-elevate\" data-testid={`row-user-${user.id}`}>\n                    <TableCell className=\"py-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback className=\"text-xs font-medium\">\n                            {getInitials(user.name)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"font-medium text-sm\">{user.name}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {user.email}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getRoleBadgeVariant(user.role)} className=\"text-xs\">\n                        {getRoleLabel(user.role)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {user.lastLogin\n                        ? new Date(user.lastLogin).toLocaleDateString()\n                        : \"Never\"}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => {\n                            // TODO: Add edit user dialog\n                            toast({\n                              title: \"Edit user\",\n                              description: \"Edit functionality coming soon\",\n                            });\n                          }}\n                          data-testid={`button-edit-${user.id}`}\n                        >\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => deleteMutation.mutate(user.id)}\n                          disabled={deleteMutation.isPending}\n                          data-testid={`button-delete-${user.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <p className=\"text-muted-foreground\">No users found</p>\n          </div>\n        )}\n      </Card>\n\n      <Dialog open={isInviteDialogOpen} onOpenChange={setIsInviteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Invite User</DialogTitle>\n            <DialogDescription>\n              Send an invitation to join your organization\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit((data) => inviteMutation.mutate(data))}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" data-testid=\"input-invite-name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"john@example.com\"\n                        data-testid=\"input-invite-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-invite-role\">\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"member\">Member</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsInviteDialogOpen(false)}\n                  data-testid=\"button-cancel-invite\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={inviteMutation.isPending}\n                  data-testid=\"button-send-invite\"\n                >\n                  {inviteMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    \"Send Invitation\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11985},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n\n      const result = await response.json();\n      localStorage.setItem(\"token\", result.token);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-md bg-primary mb-4\">\n            <span className=\"text-primary-foreground font-bold text-xl\">A</span>\n          </div>\n          <h1 className=\"text-3xl font-semibold tracking-tight mb-2\">Welcome back</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Sign in to your Abetworks account\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"you@example.com\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      data-testid=\"input-email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter your password\"\n                      type=\"password\"\n                      autoComplete=\"current-password\"\n                      data-testid=\"input-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-6 text-center space-y-2\">\n          <a\n            href=\"/reset-password\"\n            className=\"text-sm text-primary hover:underline block\"\n            data-testid=\"link-reset-password\"\n          >\n            Forgot your password?\n          </a>\n          <p className=\"text-sm text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <a href=\"/signup\" className=\"text-primary hover:underline\" data-testid=\"link-signup\">\n              Sign up\n            </a>\n          </p>\n          <p className=\"text-sm text-muted-foreground pt-2 border-t\">\n            Administrator?{\" \"}\n            <a href=\"/admin/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-admin-login\">\n              Admin Portal\n            </a>\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5055},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"ecosystem.config.js":{"content":"\nmodule.exports = {\n  apps: [\n    {\n      name: 'abetworks-api',\n      script: 'dist/index.js',\n      instances: 'max',\n      exec_mode: 'cluster',\n      env: {\n        NODE_ENV: 'production',\n        PORT: 5000\n      },\n      error_file: './logs/api-error.log',\n      out_file: './logs/api-out.log',\n      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n      merge_logs: true,\n      max_memory_restart: '1G',\n      watch: false,\n      autorestart: true,\n      max_restarts: 10,\n      min_uptime: '10s'\n    },\n    {\n      name: 'abetworks-python-agents',\n      script: 'python3',\n      args: '-m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2',\n      cwd: './python-agents',\n      interpreter: 'none',\n      env: {\n        PYTHONPATH: './python-agents',\n        PYTHONUNBUFFERED: '1'\n      },\n      error_file: './logs/python-error.log',\n      out_file: './logs/python-out.log',\n      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n      merge_logs: true,\n      autorestart: true,\n      max_restarts: 10,\n      min_uptime: '10s'\n    }\n  ]\n};\n","size_bytes":1041},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  --opaque-button-border-intensity: -8;\n\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 70.91 21.57% 90%;\n  --foreground: 0 0% 8.24%;\n  --border: 35 10.53% 77.65%;\n\n  --card: 180 6.6667% 97.0588%;\n  --card-foreground: 210 25% 7.8431%;\n  --card-border: 180 6.67% 94.51%;\n\n  --sidebar: 180 6.6667% 97.0588%;\n  --sidebar-foreground: 210 25% 7.8431%;\n  --sidebar-border: 205.0000 25.0000% 90.5882%;\n  --sidebar-primary: 203.8863 88.2845% 53.1373%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 211.5789 51.3514% 92.7451%;\n  --sidebar-accent-foreground: 203.8863 88.2845% 53.1373%;\n  --sidebar-ring: 202.8169 89.1213% 53.1373%;\n\n  --popover: 0 0% 100%;\n  --popover-foreground: 210 25% 7.8431%;\n  --popover-border: 180 6.67% 92.55%;\n\n  --primary: 165.65 26.44% 65.88%;\n  --primary-foreground: 0 0% 8.24%;\n\n  --secondary: 0 0% 8.24%;\n  --secondary-foreground: 70.91 21.57% 90%;\n\n  --muted: 72 12.82% 84.71%;\n  --muted-foreground: 72 2.39% 40.98%;\n\n  --accent: 292.13 48.03% 75.1%;\n  --accent-foreground: 0 0% 8.24%;\n\n  --destructive: 0.49 54.19% 55.49%;\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 35.29 11.41% 70.78%;\n  --ring: 166.76 29.82% 44.71%;\n\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Source Serif Pro', serif;\n  --font-mono: 'IBM Plex Mono', monospace;\n  --radius: 0.875rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;\n\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 0%;\n  --foreground: 200 6.6667% 91.1765%;\n  --border: 210 5.2632% 14.9020%;\n\n  --card: 228 9.8039% 10%;\n  --card-foreground: 0 0% 85.0980%;\n  --card-border: 228 9.80% 12%;\n\n  --sidebar: 228 9.8039% 10%;\n  --sidebar-foreground: 0 0% 85.0980%;\n  --sidebar-border: 205.7143 15.7895% 26.0784%;\n  --sidebar-primary: 202.8169 89.1213% 53.1373%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 205.7143 70% 7.8431%;\n  --sidebar-accent-foreground: 203.7736 87.6033% 52.5490%;\n  --sidebar-ring: 202.8169 89.1213% 53.1373%;\n\n  --popover: 0 0% 0%;\n  --popover-foreground: 200 6.6667% 91.1765%;\n  --popover-border: 228 9.80% 12%;\n\n  --primary: 203.7736 87.6033% 52.5490%;\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 195.0000 15.3846% 94.9020%;\n  --secondary-foreground: 210 25% 7.8431%;\n\n  --muted: 0 0% 9.4118%;\n  --muted-foreground: 210 3.3898% 46.2745%;\n\n  --accent: 205.7143 70% 7.8431%;\n  --accent-foreground: 203.7736 87.6033% 52.5490%;\n\n  --destructive: 356.3033 90.5579% 54.3137%;\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 207.6923 27.6596% 18.4314%;\n  --ring: 202.8169 89.1213% 53.1373%;\n\n  --chart-1: 203.8863 88.2845% 53.1373%;\n  --chart-2: 159.7826 100% 36.0784%;\n  --chart-3: 42.0290 92.8251% 56.2745%;\n  --chart-4: 147.1429 78.5047% 41.9608%;\n  --chart-5: 341.4894 75.2000% 50.9804%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --radius: 1.3rem;\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --tracking-normal: 0em;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9724},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"docs/API.md":{"content":"\n# API Documentation\n\nComplete API reference for the Abetworks Modular AI Automation Platform.\n\n## Base URL\n\n```\nDevelopment: http://localhost:5000\nProduction: https://your-repl-url.repl.co\n```\n\n## Authentication\n\nAll protected endpoints require a JWT token in the Authorization header:\n\n```\nAuthorization: Bearer {your_jwt_token}\n```\n\n### Error Responses\n\nAll endpoints may return the following error responses:\n\n| Status Code | Description |\n|-------------|-------------|\n| 401 | Unauthorized - Missing or invalid token |\n| 403 | Forbidden - Insufficient permissions |\n| 404 | Not Found - Resource doesn't exist |\n| 500 | Internal Server Error |\n\n## Endpoints\n\n### Authentication Endpoints\n\n#### POST /api/auth/login\n\nAuthenticate a user and receive a JWT token.\n\n**Request Body:**\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\"\n}\n```\n\n**Success Response (200):**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"user@example.com\",\n    \"role\": \"admin\",\n    \"orgId\": 1,\n    \"lastLogin\": \"2024-01-15T10:30:00Z\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\"\n  }\n}\n```\n\n**Error Response (401):**\n```json\n{\n  \"message\": \"Invalid credentials\"\n}\n```\n\n---\n\n#### POST /api/auth/signup\n\nCreate a new user account and organization.\n\n**Request Body:**\n```json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\",\n  \"organizationName\": \"Acme Corp\"\n}\n```\n\n**Success Response (201):**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"user@example.com\",\n    \"role\": \"super_admin\",\n    \"orgId\": 1,\n    \"createdAt\": \"2024-01-15T10:30:00Z\"\n  }\n}\n```\n\n---\n\n### User Endpoints\n\n#### GET /api/users\n\nGet all users in the authenticated user's organization.\n\n**Authentication Required:** Yes\n\n**Success Response (200):**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"role\": \"admin\",\n    \"orgId\": 1,\n    \"lastLogin\": \"2024-01-15T10:30:00Z\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\"\n  }\n]\n```\n\n---\n\n#### POST /api/users/invite\n\nInvite a new user to the organization (Admin/Super Admin only).\n\n**Authentication Required:** Yes (Admin or Super Admin)\n\n**Request Body:**\n```json\n{\n  \"name\": \"New User\",\n  \"email\": \"newuser@example.com\",\n  \"role\": \"member\"\n}\n```\n\n**Success Response (201):**\n```json\n{\n  \"id\": 3,\n  \"name\": \"New User\",\n  \"email\": \"newuser@example.com\",\n  \"role\": \"member\",\n  \"orgId\": 1,\n  \"createdAt\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n---\n\n#### DELETE /api/users/:id\n\nRemove a user from the organization (Admin/Super Admin only).\n\n**Authentication Required:** Yes (Admin or Super Admin)\n\n**Success Response (200):**\n```json\n{\n  \"message\": \"User deleted successfully\"\n}\n```\n\n---\n\n### Task Endpoints\n\n#### GET /api/tasks\n\nGet all tasks for the authenticated user's organization.\n\n**Authentication Required:** Yes\n\n**Query Parameters:**\n- `status` (optional): Filter by status (pending, running, completed, failed)\n\n**Success Response (200):**\n```json\n[\n  {\n    \"id\": 1,\n    \"agentId\": 2,\n    \"description\": \"Process customer feedback with NLP\",\n    \"status\": \"completed\",\n    \"result\": \"Sentiment analysis completed\",\n    \"userId\": 1,\n    \"orgId\": 1,\n    \"createdAt\": \"2024-01-15T09:00:00Z\",\n    \"completedAt\": \"2024-01-15T09:15:00Z\"\n  }\n]\n```\n\n---\n\n#### POST /api/tasks\n\nCreate a new task.\n\n**Authentication Required:** Yes\n\n**Request Body:**\n```json\n{\n  \"description\": \"Analyze sales data for Q4\",\n  \"agentId\": 1\n}\n```\n\n**Success Response (201):**\n```json\n{\n  \"id\": 3,\n  \"agentId\": 1,\n  \"description\": \"Analyze sales data for Q4\",\n  \"status\": \"pending\",\n  \"result\": null,\n  \"userId\": 1,\n  \"orgId\": 1,\n  \"createdAt\": \"2024-01-15T10:30:00Z\",\n  \"completedAt\": null\n}\n```\n\n---\n\n### Python Agent Module Endpoints\n\n#### POST /api/modules/:id/execute\n\nExecute a Python agent module.\n\n**Authentication Required:** Yes\n\n**URL Parameters:**\n- `id`: Module ID (e.g., `nlp_processor`, `data_processor`)\n\n**Request Body:**\n```json\n{\n  \"inputData\": {\n    \"text\": \"This is sample text to process\",\n    \"task\": \"summarize\"\n  },\n  \"taskId\": \"task_123\"\n}\n```\n\n**Success Response (200):**\n```json\n{\n  \"execution_id\": \"exec_abc123\",\n  \"status\": \"success\",\n  \"output\": {\n    \"result\": \"Processed summary of the text...\",\n    \"task_type\": \"summarize\",\n    \"model\": \"gpt-4\",\n    \"tokens_used\": 150\n  },\n  \"duration\": 1250\n}\n```\n\n**Error Response (500):**\n```json\n{\n  \"execution_id\": \"\",\n  \"status\": \"failed\",\n  \"error\": \"OpenAI API error: Rate limit exceeded\",\n  \"duration\": 500\n}\n```\n\n---\n\n#### GET /api/modules/health\n\nCheck Python agent service health status.\n\n**Authentication Required:** Yes\n\n**Success Response (200):**\n```json\n{\n  \"status\": \"healthy\",\n  \"service\": \"python-agents\",\n  \"modules\": [\"nlp_processor\", \"data_processor\"]\n}\n```\n\n**Error Response (500):**\n```json\n{\n  \"status\": \"unhealthy\",\n  \"service\": \"python-agents\",\n  \"error\": \"Connection refused\"\n}\n```\n\n---\n\n#### GET /api/modules/available\n\nList all available Python agent modules.\n\n**Authentication Required:** Yes\n\n**Success Response (200):**\n```json\n{\n  \"modules\": [\n    {\n      \"id\": \"nlp_processor\",\n      \"name\": \"NLPAgent\"\n    },\n    {\n      \"id\": \"data_processor\",\n      \"name\": \"DataAgent\"\n    }\n  ]\n}\n```\n\n---\n\n### Metrics Endpoints\n\n#### GET /api/metrics/dashboard\n\nGet dashboard overview metrics.\n\n**Authentication Required:** Yes\n\n**Success Response (200):**\n```json\n{\n  \"activeUsers\": 5,\n  \"tasksDone\": 42,\n  \"workflowsActive\": 8,\n  \"tasksPending\": 12\n}\n```\n\n---\n\n#### GET /api/metrics/reports\n\nGet detailed reports with chart data.\n\n**Authentication Required:** Yes\n\n**Success Response (200):**\n```json\n{\n  \"tasksByStatus\": [\n    { \"status\": \"Completed\", \"count\": 42 },\n    { \"status\": \"Pending\", \"count\": 12 },\n    { \"status\": \"Running\", \"count\": 3 },\n    { \"status\": \"Failed\", \"count\": 2 }\n  ],\n  \"tasksByUser\": [\n    { \"user\": \"John Doe\", \"count\": 25 },\n    { \"user\": \"Jane Smith\", \"count\": 20 }\n  ],\n  \"tasksOverTime\": [\n    { \"date\": \"2024-01-01\", \"count\": 5 },\n    { \"date\": \"2024-01-02\", \"count\": 8 }\n  ]\n}\n```\n\n---\n\n### API Key Endpoints\n\n#### GET /api/api-keys\n\nGet all API keys for the organization (Admin/Super Admin only).\n\n**Authentication Required:** Yes (Admin or Super Admin)\n\n**Success Response (200):**\n```json\n[\n  {\n    \"id\": 1,\n    \"orgId\": 1,\n    \"name\": \"Production API Key\",\n    \"key\": \"ak_1234567890abcdef\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"lastUsed\": \"2024-01-15T10:00:00Z\"\n  }\n]\n```\n\n---\n\n#### POST /api/api-keys\n\nGenerate a new API key (Admin/Super Admin only).\n\n**Authentication Required:** Yes (Admin or Super Admin)\n\n**Request Body:**\n```json\n{\n  \"name\": \"Python Agent API Key\"\n}\n```\n\n**Success Response (201):**\n```json\n{\n  \"id\": 2,\n  \"orgId\": 1,\n  \"name\": \"Python Agent API Key\",\n  \"key\": \"ak_abcdef1234567890\",\n  \"createdAt\": \"2024-01-15T10:30:00Z\",\n  \"lastUsed\": null\n}\n```\n\n---\n\n#### DELETE /api/api-keys/:id\n\nDelete an API key (Admin/Super Admin only).\n\n**Authentication Required:** Yes (Admin or Super Admin)\n\n**Success Response (200):**\n```json\n{\n  \"message\": \"API key deleted successfully\"\n}\n```\n\n---\n\n## Python Agent Module API\n\nThe Python agent service runs on port 8000 and provides the following endpoints:\n\n### POST /execute\n\nExecute a Python agent module directly (internal use).\n\n**Headers:**\n- `X-API-Key`: API key for authentication\n\n**Request Body:**\n```json\n{\n  \"module_id\": \"nlp_processor\",\n  \"org_id\": \"org_123\",\n  \"task_id\": \"task_456\",\n  \"input_data\": {\n    \"text\": \"Sample text\",\n    \"task\": \"summarize\"\n  }\n}\n```\n\n**Response:**\n```json\n{\n  \"execution_id\": \"exec_789\",\n  \"status\": \"success\",\n  \"output\": { /* module-specific output */ },\n  \"duration\": 1250\n}\n```\n\n---\n\n### GET /health\n\nHealth check endpoint.\n\n**Response:**\n```json\n{\n  \"status\": \"healthy\",\n  \"service\": \"python-agents\",\n  \"modules\": [\"nlp_processor\", \"data_processor\"]\n}\n```\n\n---\n\n### GET /modules\n\nList available modules (requires API key).\n\n**Headers:**\n- `X-API-Key`: API key for authentication\n\n**Response:**\n```json\n{\n  \"modules\": [\n    { \"id\": \"nlp_processor\", \"name\": \"NLPAgent\" },\n    { \"id\": \"data_processor\", \"name\": \"DataAgent\" }\n  ]\n}\n```\n\n---\n\n## Rate Limiting\n\nCurrently no rate limiting is implemented. This should be added in production.\n\n## Versioning\n\nAPI Version: 2.0 (AI Automation Platform)  \nNo versioning strategy currently implemented.\n","size_bytes":8396},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nfunction getAuthHeaders(): Record<string, string> {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  }\n  return {};\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    // Redirect to login on 401\n    if (res.status === 401) {\n      localStorage.removeItem(\"token\");\n      if (window.location.pathname !== \"/login\" && \n          window.location.pathname !== \"/signup\" && \n          window.location.pathname !== \"/reset-password\") {\n        window.location.href = \"/login\";\n      }\n    }\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      ...getAuthHeaders(),\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: {\n        ...getAuthHeaders(),\n      },\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1990},"design_guidelines.md":{"content":"# Design Guidelines: Multi-Tenant CRM & Sales Automation Platform\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Design System Foundation\n\nDrawing primary inspiration from **Linear** and **Notion** for their exceptional data-dense dashboard experiences, combined with enterprise dashboard patterns from **Asana** and **Monday.com**. These references excel at presenting complex information hierarchies while maintaining visual clarity and professional polish.\n\n**Key Design Principles:**\n1. Information density without clutter - maximize data visibility while preserving breathing room\n2. Consistent spatial rhythm throughout the application\n3. Clear visual hierarchy through typography and spacing, not color\n4. Functional minimalism - every element serves a purpose\n5. Enterprise-grade professionalism with modern sensibilities\n\n---\n\n## Typography System\n\n**Font Selection:**\n- Primary: Inter (via Google Fonts CDN) - exceptional readability at all sizes, professional appearance\n- Monospace: JetBrains Mono - for API keys, technical data, log outputs\n\n**Hierarchy Scale:**\n\n**Page Titles:** text-3xl font-semibold tracking-tight  \n**Section Headings:** text-xl font-semibold  \n**Card Titles:** text-lg font-medium  \n**Subsection Headers:** text-base font-medium  \n**Body Text:** text-sm font-normal  \n**Secondary/Meta Text:** text-xs font-normal  \n**Table Headers:** text-xs font-semibold uppercase tracking-wide  \n**Buttons:** text-sm font-medium  \n\n**Line Heights:**\n- Headings: leading-tight (1.25)\n- Body text: leading-normal (1.5)\n- Dense tables: leading-relaxed (1.625)\n\n---\n\n## Layout System\n\n**Tailwind Spacing Primitives:**\n\nWe will use a constrained set of Tailwind units for consistency: **2, 3, 4, 6, 8, 12, 16**\n\n**Common Applications:**\n- Component padding: p-4, p-6, p-8\n- Card spacing: p-6 internally, gap-6 between cards\n- Section margins: mb-8, mb-12\n- Table cells: px-4 py-3\n- Form fields: p-3\n- Icon spacing: mr-2, mr-3\n- Grid gaps: gap-4, gap-6\n\n**Container System:**\n- Dashboard content area: max-w-7xl mx-auto px-6 py-8\n- Modal containers: max-w-2xl\n- Form containers: max-w-lg\n- Table containers: w-full (with horizontal scroll on mobile)\n\n**Grid Patterns:**\n- Overview cards: grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\n- Settings sections: grid grid-cols-1 lg:grid-cols-2 gap-8\n- User cards: grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\n\n---\n\n## Component Library\n\n### Navigation Architecture\n\n**Sidebar (Fixed Left, ~240px width):**\n- Logo/org name at top (h-16, px-4)\n- Navigation items with icons from Heroicons (h-10, px-3, rounded-md)\n- Active state: subtle background treatment\n- Bottom section for user profile with avatar (40x40), name, role\n- Collapsible on mobile into hamburger overlay\n\n**Top Bar (Fixed, h-16):**\n- Breadcrumb navigation on left (text-sm)\n- Right section: search input (max-w-md), notification bell icon, profile dropdown\n- Consistent px-6 horizontal padding\n- Sits flush with sidebar\n\n### Dashboard Components\n\n**Overview Cards:**\n- Structure: Rounded corners (rounded-lg), padding p-6\n- Layout: Metric number (text-3xl font-bold), label below (text-sm), icon positioned top-right (w-10 h-10)\n- Trend indicator: Small arrow icon + percentage (text-xs)\n- Border treatment with subtle shadow\n\n**Data Tables:**\n- Header row: Sticky position, uppercase text-xs font-semibold, pb-3 border-b\n- Data rows: py-3 px-4, border-b on each row except last\n- Row hover state for interactivity\n- Action buttons in last column (icon buttons, w-8 h-8)\n- Pagination at bottom: Compact numbered style\n- Empty state: Centered icon + message in py-16\n\n**Task Cards:**\n- Compact height (min-h-20), rounded-md border\n- Left accent border (w-1) indicating status\n- Layout: Title (font-medium), meta row (text-xs) with user avatar + timestamp\n- Status badge in top-right (px-2 py-1 rounded text-xs)\n- Checkbox for selection on left (mr-3)\n\n**Charts Section:**\n- Container: p-6 rounded-lg border\n- Chart height: h-64 to h-80 depending on data density\n- Use Recharts library via CDN for bar/line charts\n- Legend positioned top-right, compact\n- Axis labels: text-xs\n\n### Forms & Inputs\n\n**Input Fields:**\n- Height: h-10 for text inputs, h-24 for textareas\n- Padding: px-3 py-2\n- Border: Rounded (rounded-md), 1px border\n- Focus state: Ring treatment (focus:ring-2)\n- Label above: text-sm font-medium mb-2 block\n- Helper text below: text-xs mt-1\n- Error state: Red ring + error message\n\n**Buttons:**\n- Primary: px-4 py-2, rounded-md, font-medium text-sm\n- Secondary: Similar sizing, outlined style\n- Icon buttons: w-8 h-8, rounded-md, centered icon (w-4 h-4)\n- Loading state: Spinner icon (w-4 h-4 animate-spin) replaces text\n\n**Dropdowns/Selects:**\n- Match input height (h-10)\n- Chevron icon positioned right (mr-3)\n- Dropdown panel: rounded-lg shadow-lg border, max-h-60 overflow-auto\n\n### Modal & Overlays\n\n**Modal Structure:**\n- Backdrop: fixed inset-0 with blur effect\n- Panel: max-w-2xl, rounded-lg, p-6\n- Header: pb-4 border-b, flex justify-between items-center\n- Body: py-6\n- Footer: pt-4 border-t, flex justify-end gap-3\n\n**Toast Notifications:**\n- Fixed top-right positioning\n- Width: max-w-sm\n- Padding: p-4, rounded-lg\n- Icon on left (w-5 h-5), close button on right\n- Stacked with gap-3 when multiple\n\n### Agents Placeholder Page\n\n**Agent Cards Grid:**\n- Grid layout: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- Card structure: p-6 rounded-lg border\n- Agent icon at top (w-12 h-12 rounded-full)\n- Name: text-lg font-semibold mb-2\n- Type badge: Inline pill shape (px-2 py-1 rounded text-xs)\n- Description: text-sm, 2-line clamp\n- Status indicator: Dot (w-2 h-2 rounded-full) + text\n- Action row at bottom: Three compact buttons (View, Run, Settings) each w-20 h-8\n\n**Empty State:**\n- Centered container: max-w-md mx-auto text-center py-20\n- Large icon (w-16 h-16)\n- Heading + description\n- Primary CTA button\n\n### Settings Pages\n\n**Settings Layout:**\n- Left sidebar navigation (~200px, list of setting sections)\n- Main content area with max-w-4xl\n- Section structure: mb-12 spacing between sections\n- Section header: text-xl font-semibold mb-6\n- Subsections with cards: p-6 rounded-lg border\n\n**API Key Management:**\n- Table with columns: Name, Key (masked with show/hide toggle), Created, Actions\n- Generate new key button prominent at top\n- Revoke action with confirmation modal\n\n**Integration Cards:**\n- Grid of integration options: grid-cols-1 md:grid-cols-2 gap-4\n- Card: p-4 rounded-lg border, flex items-center gap-4\n- Service logo/icon (w-10 h-10)\n- Name + status indicator\n- Connect/Configure button on right\n\n---\n\n## Responsive Behavior\n\n**Breakpoints:**\n- Mobile: < 768px - Stack cards, single column tables, hamburger sidebar\n- Tablet: 768px - 1024px - Two-column grids, visible sidebar\n- Desktop: > 1024px - Full multi-column layouts, spacious padding\n\n**Mobile Adaptations:**\n- Sidebar collapses to overlay (slide from left)\n- Tables horizontal scroll in container\n- Overview cards stack to single column\n- Reduced padding (p-4 instead of p-6)\n- Top bar reduces to essential elements only\n\n---\n\n## Icon System\n\n**Library:** Heroicons (outline and solid variants via CDN)\n\n**Icon Sizing:**\n- Navigation: w-5 h-5\n- Buttons: w-4 h-4\n- Cards/headers: w-6 h-6\n- Empty states: w-16 h-16\n- Table actions: w-4 h-4\n\n**Common Icons:**\n- Dashboard: ChartBarIcon\n- Users: UsersIcon\n- Tasks: CheckCircleIcon\n- Reports: DocumentChartBarIcon\n- Settings: CogIcon\n- Agents: CpuChipIcon\n\n---\n\n## Animation & Interaction\n\n**Minimal Animation Philosophy:**\n\nUse animations extremely sparingly - only for functional feedback:\n\n- Sidebar expand/collapse: 200ms ease transition\n- Modal/toast entrance: 150ms fade + scale\n- Dropdown opening: 150ms ease\n- Loading spinners: Continuous rotation\n- NO scroll animations, parallax, or decorative motion\n\n**Hover States:**\n- Subtle background shift on interactive elements\n- Cursor pointer on clickable items\n- No dramatic transformations\n\n---\n\n## Authentication Pages\n\n**Login/Signup Layout:**\n- Centered card: max-w-md, p-8 rounded-lg\n- Logo at top centered (mb-8)\n- Form fields with mb-4 spacing\n- Primary button full width\n- Links (forgot password, sign up) below: text-sm\n- Minimal, focused, no distractions\n\n**Password Reset:**\n- Similar layout to login\n- Success state: Green checkmark icon + message\n- Link back to login\n\n---\n\n## Images\n\n**No large hero images** - this is a utility dashboard application focused on data and functionality, not marketing. \n\n**Avatar Images:**\n- User avatars throughout: 32x32 (small), 40x40 (default), 48x48 (profile page)\n- Organization logo: 40x40 in sidebar, 120x120 in settings\n\n**Empty State Illustrations:**\n- Simple illustrative icons or abstract graphics for empty tables/sections\n- Placeholder format: `<!-- ILLUSTRATION: [description] -->`\n\n**No decorative imagery** - maintain focus on content and functionality","size_bytes":8879},"server/db.ts":{"content":"// Reference: javascript_database blueprint integration\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":539},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Users, CheckCircle, TrendingUp, Activity } from \"lucide-react\";\n\ninterface DashboardStats {\n  activeUsers: number;\n  tasksDone: number;\n  leadsGenerated: number;\n  tasksPending: number;\n}\n\nfunction StatCard({\n  title,\n  value,\n  icon: Icon,\n  trend,\n  trendValue,\n}: {\n  title: string;\n  value: number;\n  icon: any;\n  trend?: \"up\" | \"down\";\n  trendValue?: string;\n}) {\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-muted-foreground mb-1\">{title}</p>\n          <h3 className=\"text-3xl font-bold\" data-testid={`stat-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {value.toLocaleString()}\n          </h3>\n          {trend && trendValue && (\n            <div className={`flex items-center gap-1 mt-2 text-xs ${trend === \"up\" ? \"text-green-600\" : \"text-red-600\"}`}>\n              <TrendingUp className={`w-3 h-3 ${trend === \"down\" ? \"rotate-180\" : \"\"}`} />\n              <span>{trendValue}</span>\n            </div>\n          )}\n        </div>\n        <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center\">\n          <Icon className=\"w-6 h-6 text-primary\" />\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/metrics/dashboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Dashboard</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Welcome to your CRM overview\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"p-6 h-32 animate-pulse bg-muted/10\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-semibold tracking-tight\">Dashboard</h1>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          Welcome to your CRM overview\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <StatCard\n          title=\"Active Users\"\n          value={stats?.activeUsers || 0}\n          icon={Users}\n          trend=\"up\"\n          trendValue=\"+12%\"\n        />\n        <StatCard\n          title=\"Tasks Done\"\n          value={stats?.tasksDone || 0}\n          icon={CheckCircle}\n          trend=\"up\"\n          trendValue=\"+8%\"\n        />\n        <StatCard\n          title=\"Leads Generated\"\n          value={stats?.leadsGenerated || 0}\n          icon={TrendingUp}\n          trend=\"up\"\n          trendValue=\"+23%\"\n        />\n        <StatCard\n          title=\"Pending Tasks\"\n          value={stats?.tasksPending || 0}\n          icon={Activity}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Recent Activity</h2>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3 py-3 border-b last:border-b-0\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500 mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">New user registered</p>\n                <p className=\"text-xs text-muted-foreground\">2 minutes ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3 py-3 border-b last:border-b-0\">\n              <div className=\"w-2 h-2 rounded-full bg-blue-500 mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Task completed</p>\n                <p className=\"text-xs text-muted-foreground\">15 minutes ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3 py-3 border-b last:border-b-0\">\n              <div className=\"w-2 h-2 rounded-full bg-purple-500 mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Agent execution started</p>\n                <p className=\"text-xs text-muted-foreground\">1 hour ago</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Quick Actions</h2>\n          <div className=\"space-y-3\">\n            <a\n              href=\"/tasks\"\n              className=\"flex items-center gap-3 p-3 rounded-md hover-elevate border\"\n              data-testid=\"link-create-task\"\n            >\n              <CheckCircle className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">Create New Task</span>\n            </a>\n            <a\n              href=\"/users\"\n              className=\"flex items-center gap-3 p-3 rounded-md hover-elevate border\"\n              data-testid=\"link-manage-users\"\n            >\n              <Users className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">Manage Users</span>\n            </a>\n            <a\n              href=\"/reports\"\n              className=\"flex items-center gap-3 p-3 rounded-md hover-elevate border\"\n              data-testid=\"link-view-reports\"\n            >\n              <TrendingUp className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">View Reports</span>\n            </a>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5768},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"DEPLOYMENT.md":{"content":"\n# Deployment Guide\n\nComplete guide for deploying the Abetworks AI Automation Platform on various environments.\n\n## Table of Contents\n1. [Replit Deployment (Recommended)](#replit-deployment)\n2. [Manual VPS/VM Deployment](#manual-vpsvm-deployment)\n3. [Docker Deployment](#docker-deployment)\n4. [Environment Variables](#environment-variables)\n5. [Post-Deployment Checklist](#post-deployment-checklist)\n\n---\n\n## Replit Deployment\n\n### Quick Deploy on Replit\n\nYour application is already configured for Replit deployment!\n\n#### Step 1: Configure Secrets\n\n1. Click the lock icon 🔒 in the left sidebar (Tools → Secrets)\n2. Add these environment variables:\n\n```\nDATABASE_URL=postgresql://user:password@host/database?sslmode=require\nJWT_SECRET=your_secure_random_string_minimum_32_characters\nNODE_ENV=production\nPYTHON_API_KEY=your_secure_api_key_for_python_agents\nOPENAI_API_KEY=sk-your-openai-api-key\n```\n\n#### Step 2: Push Database Schema\n\nRun in Shell:\n```bash\nnpm run db:push\n```\n\n#### Step 3: Deploy\n\n1. Click **Deploy** button (top right)\n2. Choose **Reserved VM** or **Autoscale** deployment\n3. Configure settings:\n   - **Machine size**: 0.5 vCPU / 1 GiB RAM (minimum)\n   - **Web server**: Yes\n   - **Build command**: `npm run build`\n   - **Run command**: Leave default (uses .replit config)\n\n4. Click **Deploy your project**\n\nYour app will be live at `https://your-repl-name.replit.app`\n\n### Deployment Type Recommendations\n\n**Use Autoscale if:**\n- You expect variable traffic\n- You want to pay only for actual usage\n- You need automatic scaling\n- You're running a public-facing application\n\n**Use Reserved VM if:**\n- You need consistent performance\n- You run background tasks (Python agents)\n- You want cost certainty\n- You need persistent connections\n\n---\n\n## Manual VPS/VM Deployment\n\nFor deploying on DigitalOcean, AWS EC2, Azure, Google Cloud, or any VPS.\n\n### Prerequisites\n\n- Ubuntu 22.04 LTS (recommended)\n- Node.js 20+\n- Python 3.11+\n- PostgreSQL 14+\n- Nginx (for reverse proxy)\n- PM2 (for process management)\n\n### Step 1: Server Setup\n\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install Node.js 20\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install Python 3.11 and pip\nsudo apt install -y python3.11 python3.11-venv python3-pip\n\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Install Nginx\nsudo apt install -y nginx\n\n# Install PM2\nsudo npm install -g pm2\n```\n\n### Step 2: Setup Database\n\n```bash\n# Login to PostgreSQL\nsudo -u postgres psql\n\n# Create database and user\nCREATE DATABASE abetworks;\nCREATE USER abetworks_user WITH PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE abetworks TO abetworks_user;\n\\q\n```\n\n### Step 3: Clone and Setup Application\n\n```bash\n# Create app directory\nsudo mkdir -p /var/www/abetworks\ncd /var/www/abetworks\n\n# Clone your repository (or upload files)\ngit clone https://github.com/your-repo/abetworks.git .\n\n# Install Node.js dependencies\nnpm install\n\n# Install Python dependencies\ncd python-agents\npython3.11 -m pip install -r requirements.txt\ncd ..\n\n# Create .env file\ncat > .env << EOF\nDATABASE_URL=postgresql://abetworks_user:your_secure_password@localhost:5432/abetworks\nJWT_SECRET=$(openssl rand -base64 32)\nNODE_ENV=production\nPYTHON_API_KEY=$(openssl rand -base64 32)\nOPENAI_API_KEY=sk-your-openai-key\nEOF\n\n# Push database schema\nnpm run db:push\n\n# Build frontend\nnpm run build\n```\n\n### Step 4: Configure PM2\n\nCreate PM2 ecosystem file:\n\n```bash\ncat > ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [\n    {\n      name: 'abetworks-api',\n      script: 'dist/index.js',\n      instances: 2,\n      exec_mode: 'cluster',\n      env: {\n        NODE_ENV: 'production',\n        PORT: 5000\n      }\n    },\n    {\n      name: 'abetworks-python-agents',\n      script: 'python3.11',\n      args: '-m uvicorn main:app --host 0.0.0.0 --port 8000',\n      cwd: './python-agents',\n      interpreter: 'none',\n      env: {\n        PYTHONPATH: './python-agents'\n      }\n    }\n  ]\n};\nEOF\n```\n\nStart services:\n\n```bash\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n### Step 5: Configure Nginx\n\n```bash\nsudo cat > /etc/nginx/sites-available/abetworks << 'EOF'\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com www.your-domain.com;\n\n    # SSL certificates (use certbot for Let's Encrypt)\n    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Main application\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Python agents API\n    location /python-api/ {\n        proxy_pass http://localhost:8000/;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/abetworks /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### Step 6: Setup SSL with Let's Encrypt\n\n```bash\nsudo apt install -y certbot python3-certbot-nginx\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n```\n\n---\n\n## Docker Deployment\n\n### Dockerfile for Node.js API\n\n```dockerfile\nFROM node:20-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy application files\nCOPY . .\n\n# Build frontend\nRUN npm run build\n\n# Expose port\nEXPOSE 5000\n\n# Start application\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n### Dockerfile for Python Agents\n\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY python-agents/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY python-agents/ .\n\n# Expose port\nEXPOSE 8000\n\n# Start application\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:16-alpine\n    environment:\n      POSTGRES_DB: abetworks\n      POSTGRES_USER: abetworks\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    environment:\n      DATABASE_URL: postgresql://abetworks:${DB_PASSWORD}@postgres:5432/abetworks\n      JWT_SECRET: ${JWT_SECRET}\n      NODE_ENV: production\n      PYTHON_API_KEY: ${PYTHON_API_KEY}\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - postgres\n\n  python-agents:\n    build:\n      context: .\n      dockerfile: Dockerfile.python\n    environment:\n      DATABASE_URL: postgresql://abetworks:${DB_PASSWORD}@postgres:5432/abetworks\n      PYTHON_API_KEY: ${PYTHON_API_KEY}\n      OPENAI_API_KEY: ${OPENAI_API_KEY}\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - postgres\n\nvolumes:\n  postgres_data:\n```\n\n---\n\n## Environment Variables\n\n### Required Variables\n\n```bash\n# Database\nDATABASE_URL=postgresql://user:password@host:5432/database\n\n# Security\nJWT_SECRET=minimum_32_character_random_string\nPYTHON_API_KEY=secure_api_key_for_python_service\n\n# Application\nNODE_ENV=production\nPORT=5000\n\n# AI Services (Optional)\nOPENAI_API_KEY=sk-your-openai-key\n```\n\n### Generating Secure Keys\n\n```bash\n# Generate JWT secret\nopenssl rand -base64 32\n\n# Generate API key\nopenssl rand -hex 32\n```\n\n---\n\n## Post-Deployment Checklist\n\n### Security\n- [ ] All environment variables set securely\n- [ ] Database uses SSL connections\n- [ ] Strong passwords for database\n- [ ] JWT secret is random and secure (32+ characters)\n- [ ] HTTPS/SSL configured\n- [ ] Firewall configured (only ports 80, 443, 22 open)\n\n### Database\n- [ ] Schema pushed successfully (`npm run db:push`)\n- [ ] Database backups configured\n- [ ] Connection pooling enabled\n\n### Application\n- [ ] Both Node.js and Python services running\n- [ ] Health checks passing\n- [ ] Logs monitoring configured\n- [ ] Error tracking setup (optional: Sentry)\n\n### Testing\n- [ ] Login/signup works\n- [ ] API endpoints responding\n- [ ] Multi-tenant isolation verified\n- [ ] Python agents executable\n- [ ] WebSocket connections stable (if applicable)\n\n### Monitoring\n- [ ] Application logs accessible\n- [ ] Database performance monitored\n- [ ] Server resources monitored (CPU, RAM, disk)\n- [ ] Uptime monitoring configured\n\n### DNS & Domain\n- [ ] Domain configured correctly\n- [ ] SSL certificate valid\n- [ ] WWW and non-WWW both work\n\n---\n\n## Troubleshooting\n\n### Application Won't Start\n\n```bash\n# Check logs\npm2 logs abetworks-api\npm2 logs abetworks-python-agents\n\n# Check processes\npm2 status\n\n# Restart services\npm2 restart all\n```\n\n### Database Connection Issues\n\n```bash\n# Test database connection\npsql -h localhost -U abetworks_user -d abetworks\n\n# Check PostgreSQL service\nsudo systemctl status postgresql\n```\n\n### Port Already in Use\n\n```bash\n# Find process using port\nsudo lsof -i :5000\nsudo lsof -i :8000\n\n# Kill process\nsudo kill -9 <PID>\n```\n\n---\n\n## Scaling Recommendations\n\n### Small (< 1000 users)\n- 1 vCPU, 2 GB RAM\n- Single instance\n- Neon serverless database\n\n### Medium (1000-10000 users)\n- 2 vCPU, 4 GB RAM\n- PM2 cluster mode (2-4 instances)\n- Dedicated PostgreSQL server\n\n### Large (10000+ users)\n- 4+ vCPU, 8+ GB RAM\n- Load balancer + multiple servers\n- PostgreSQL with read replicas\n- Redis for caching\n- CDN for static assets\n\n---\n\nFor more information, see:\n- [Replit Deployment Docs](https://docs.replit.com/deployments)\n- [PM2 Documentation](https://pm2.keymetrics.io/)\n- [Nginx Configuration](https://nginx.org/en/docs/)\n","size_bytes":10303},"MODULAR_AI_INTEGRATION.md":{"content":"\n# Modular AI Automation Platform - Integration Guide\n\n## Overview\nThis guide explains how to transform the current application into a modular AI automation platform with Python-based agents that can be connected and managed through the existing Node.js/TypeScript infrastructure.\n\n## Architecture Changes\n\n### Current Stack\n- **Frontend**: React + TypeScript\n- **Backend API**: Node.js + Express + TypeScript\n- **Database**: PostgreSQL (Neon)\n- **Auth**: JWT\n\n### New Modular Architecture\n- **Frontend**: React + TypeScript (unchanged)\n- **API Gateway**: Node.js + Express (unchanged)\n- **Agent Runtime**: Python microservices\n- **Communication**: REST API + WebSocket for real-time updates\n- **Database**: Shared PostgreSQL (multi-tenant isolation maintained)\n\n## Tech Stack Compatibility\n\n### Node.js ↔ Python Communication Options\n\n#### Option 1: REST API (Recommended for MVP)\n**Pros:**\n- Simple to implement\n- Language agnostic\n- Easy debugging\n- HTTP-based, works with existing infrastructure\n\n**Cons:**\n- Slightly higher latency\n- No real-time bidirectional communication (without polling)\n\n#### Option 2: Message Queue (Redis/RabbitMQ)\n**Pros:**\n- Asynchronous processing\n- Better for long-running tasks\n- Built-in retry mechanisms\n\n**Cons:**\n- Additional infrastructure complexity\n- Requires Redis/RabbitMQ setup\n\n#### Option 3: gRPC\n**Pros:**\n- High performance\n- Strong typing\n- Bidirectional streaming\n\n**Cons:**\n- More complex setup\n- Requires .proto file management\n\n**Recommendation**: Start with REST API (Option 1), migrate to Message Queue (Option 2) as you scale.\n\n---\n\n## Implementation Steps\n\n### Phase 1: Database Schema Updates\n\nAdd module-specific tables to `shared/schema.ts`:\n\n```typescript\n// New table for Python agent modules\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(), // e.g., \"nlp\", \"data\", \"automation\"\n  pythonModule: text(\"python_module\").notNull(), // e.g., \"agents.nlp_processor\"\n  endpoint: text(\"endpoint\"), // Optional REST endpoint\n  config: text(\"config\"), // JSON config for the module\n  status: agentStatusEnum(\"status\").notNull().default(\"active\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Track module executions\nexport const moduleExecutions = pgTable(\"module_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: varchar(\"module_id\").notNull().references(() => modules.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").references(() => tasks.id, { onDelete: \"set null\" }),\n  input: text(\"input\"), // JSON input data\n  output: text(\"output\"), // JSON output data\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  error: text(\"error\"),\n  startedAt: timestamp(\"started_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  orgId: varchar(\"org_id\").notNull().references(() => organizations.id, { onDelete: \"cascade\" }),\n});\n```\n\n### Phase 2: Python Agent Infrastructure\n\n#### Directory Structure\n```\n/python-agents\n├── requirements.txt          # Python dependencies\n├── config.py                 # Configuration management\n├── main.py                   # FastAPI server entry point\n├── agents/\n│   ├── __init__.py\n│   ├── base_agent.py        # Abstract base class for all agents\n│   ├── nlp_agent.py         # Example: NLP processing agent\n│   ├── data_agent.py        # Example: Data processing agent\n│   └── automation_agent.py  # Example: Workflow automation agent\n├── utils/\n│   ├── __init__.py\n│   ├── db_connector.py      # PostgreSQL connection\n│   └── api_client.py        # Node.js API client\n└── tests/\n    └── test_agents.py\n```\n\n#### Python Dependencies (requirements.txt)\n```txt\nfastapi==0.109.0\nuvicorn==0.27.0\npsycopg2-binary==2.9.9\npydantic==2.5.0\npython-dotenv==1.0.0\nhttpx==0.26.0\nopenai==1.10.0              # For AI agents\nlangchain==0.1.0            # For AI orchestration\nredis==5.0.1                # Optional: for message queue\ncelery==5.3.6               # Optional: for async tasks\n```\n\n#### Base Agent Class (python-agents/agents/base_agent.py)\n```python\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict\nimport psycopg2\nfrom datetime import datetime\n\nclass BaseAgent(ABC):\n    \"\"\"Abstract base class for all modular agents\"\"\"\n    \n    def __init__(self, org_id: str, config: Dict[str, Any] = None):\n        self.org_id = org_id\n        self.config = config or {}\n        self.db_conn = None\n    \n    @abstractmethod\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Main execution method - must be implemented by each agent\n        \n        Args:\n            input_data: Input data for the agent\n            \n        Returns:\n            Dict with result and metadata\n        \"\"\"\n        pass\n    \n    async def log_execution(self, module_id: str, task_id: str, status: str, output: Any = None, error: str = None):\n        \"\"\"Log execution to database\"\"\"\n        # Implementation to log to module_executions table\n        pass\n    \n    def validate_org_access(self, resource_id: str) -> bool:\n        \"\"\"Ensure multi-tenant isolation\"\"\"\n        # Implementation to verify org_id matches\n        pass\n```\n\n#### FastAPI Server (python-agents/main.py)\n```python\nfrom fastapi import FastAPI, HTTPException, Depends, Header\nfrom pydantic import BaseModel\nimport os\nfrom typing import Optional\nfrom agents.nlp_agent import NLPAgent\nfrom agents.data_agent import DataAgent\n\napp = FastAPI(title=\"Abetworks AI Automation Modules\")\n\n# Request/Response models\nclass ExecutionRequest(BaseModel):\n    module_id: str\n    org_id: str\n    task_id: Optional[str] = None\n    input_data: dict\n\nclass ExecutionResponse(BaseModel):\n    execution_id: str\n    status: str\n    output: Optional[dict] = None\n    error: Optional[str] = None\n\n# Authentication middleware\nasync def verify_api_key(x_api_key: str = Header(...)):\n    # Verify API key against your PostgreSQL database\n    # This should match the api_keys table in your Node.js app\n    if not x_api_key or not x_api_key.startswith(\"abw_\"):\n        raise HTTPException(status_code=401, detail=\"Invalid API key\")\n    return x_api_key\n\n@app.post(\"/execute\", response_model=ExecutionResponse)\nasync def execute_module(\n    request: ExecutionRequest,\n    api_key: str = Depends(verify_api_key)\n):\n    \"\"\"Execute a Python agent module\"\"\"\n    try:\n        # Route to appropriate agent based on module_id\n        # This is where you'd load the module dynamically\n        \n        if request.module_id == \"nlp_processor\":\n            agent = NLPAgent(org_id=request.org_id)\n            result = await agent.execute(request.input_data)\n        elif request.module_id == \"data_processor\":\n            agent = DataAgent(org_id=request.org_id)\n            result = await agent.execute(request.input_data)\n        else:\n            raise HTTPException(status_code=404, detail=\"Module not found\")\n        \n        return ExecutionResponse(\n            execution_id=result[\"execution_id\"],\n            status=\"completed\",\n            output=result[\"output\"]\n        )\n    except Exception as e:\n        return ExecutionResponse(\n            execution_id=\"\",\n            status=\"failed\",\n            error=str(e)\n        )\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"healthy\", \"service\": \"python-agents\"}\n```\n\n### Phase 3: Node.js Integration\n\n#### Add Python Agent Client (server/python-agent-client.ts)\n```typescript\nimport axios from 'axios';\n\nconst PYTHON_AGENT_URL = process.env.PYTHON_AGENT_URL || 'http://0.0.0.0:8000';\n\nexport class PythonAgentClient {\n  private apiKey: string;\n  \n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n  \n  async executeModule(\n    moduleId: string,\n    orgId: string,\n    inputData: any,\n    taskId?: string\n  ) {\n    try {\n      const response = await axios.post(\n        `${PYTHON_AGENT_URL}/execute`,\n        {\n          module_id: moduleId,\n          org_id: orgId,\n          task_id: taskId,\n          input_data: inputData\n        },\n        {\n          headers: {\n            'X-API-Key': this.apiKey\n          },\n          timeout: 60000 // 60 seconds\n        }\n      );\n      \n      return response.data;\n    } catch (error: any) {\n      throw new Error(`Python agent execution failed: ${error.message}`);\n    }\n  }\n  \n  async healthCheck() {\n    try {\n      const response = await axios.get(`${PYTHON_AGENT_URL}/health`);\n      return response.data;\n    } catch (error) {\n      return { status: 'unhealthy', error: error.message };\n    }\n  }\n}\n```\n\n#### Update Routes (add to server/routes.ts)\n```typescript\nimport { PythonAgentClient } from './python-agent-client';\n\n// Execute Python module\napp.post(\"/api/modules/:id/execute\", requireAuth, async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    const { inputData } = req.body;\n    \n    // Get organization's API key for Python service\n    const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n    if (!apiKeys.length) {\n      return res.status(400).json({ message: \"No API key configured\" });\n    }\n    \n    const client = new PythonAgentClient(apiKeys[0].key);\n    const result = await client.executeModule(\n      id,\n      req.user!.orgId,\n      inputData\n    );\n    \n    res.json(result);\n  } catch (error: any) {\n    res.status(500).json({ message: error.message });\n  }\n});\n```\n\n### Phase 4: Frontend Module Management\n\nUpdate the Agents page to support module configuration and Python agent connections.\n\n---\n\n## Admin Connection Setup\n\n### Environment Variables\n\n**Node.js (.env)**\n```bash\nDATABASE_URL=postgresql://...\nJWT_SECRET=your-secret\nPYTHON_AGENT_URL=http://0.0.0.0:8000\n```\n\n**Python (.env in /python-agents)**\n```bash\nDATABASE_URL=postgresql://...\nNODE_API_URL=http://0.0.0.0:5000\nAPI_KEY=abw_...\n```\n\n### Running Both Services\n\n**Development (Local)**\n```bash\n# Terminal 1: Node.js API\nnpm run dev\n\n# Terminal 2: Python agents\ncd python-agents\npip install -r requirements.txt\nuvicorn main:app --host 0.0.0.0 --port 8000 --reload\n```\n\n**Production (Replit)**\nUpdate `.replit` to run both services:\n```toml\n[deployment]\nrun = [\"sh\", \"-c\", \"npm run start & cd python-agents && uvicorn main:app --host 0.0.0.0 --port 8000\"]\n```\n\n---\n\n## Multi-Tenant Security\n\n### Critical Points\n1. **Always pass `org_id`** to Python agents\n2. **Validate org_id** in Python before any database query\n3. **Use API keys** for Node.js ↔ Python authentication\n4. **Database isolation**: All Python queries MUST filter by `org_id`\n\nExample secure query in Python:\n```python\ndef get_tasks(self, org_id: str):\n    cursor = self.db_conn.cursor()\n    cursor.execute(\n        \"SELECT * FROM tasks WHERE org_id = %s\",\n        (org_id,)\n    )\n    return cursor.fetchall()\n```\n\n---\n\n## Migration Path\n\n### Week 1: Setup\n- [ ] Create `/python-agents` directory structure\n- [ ] Install Python dependencies\n- [ ] Set up FastAPI server\n- [ ] Test basic connectivity\n\n### Week 2: Integration\n- [ ] Add `modules` table to database\n- [ ] Create PythonAgentClient in Node.js\n- [ ] Add API routes for module execution\n- [ ] Test end-to-end flow\n\n### Week 3: Agents\n- [ ] Build first Python agent (e.g., NLP)\n- [ ] Test multi-tenant isolation\n- [ ] Add frontend UI for module management\n\n### Week 4: Production\n- [ ] Configure deployment for dual services\n- [ ] Add monitoring and logging\n- [ ] Performance testing\n- [ ] Security audit\n\n---\n\n## Example Use Cases\n\n### 1. NLP Processing Agent\n```python\n# python-agents/agents/nlp_agent.py\nimport openai\nfrom .base_agent import BaseAgent\n\nclass NLPAgent(BaseAgent):\n    async def execute(self, input_data):\n        text = input_data.get('text')\n        \n        # Process with OpenAI\n        response = await openai.ChatCompletion.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": text}]\n        )\n        \n        return {\n            \"execution_id\": \"exec_123\",\n            \"output\": {\n                \"processed_text\": response.choices[0].message.content\n            }\n        }\n```\n\n### 2. Data Transformation Agent\n```python\n# python-agents/agents/data_agent.py\nimport pandas as pd\nfrom .base_agent import BaseAgent\n\nclass DataAgent(BaseAgent):\n    async def execute(self, input_data):\n        data = input_data.get('data')\n        \n        # Process with pandas\n        df = pd.DataFrame(data)\n        result = df.describe().to_dict()\n        \n        return {\n            \"execution_id\": \"exec_456\",\n            \"output\": result\n        }\n```\n\n---\n\n## Benefits of This Architecture\n\n1. **Language Flexibility**: Use Python for AI/ML, Node.js for API\n2. **Modular**: Add new agents without changing core system\n3. **Scalable**: Python services can scale independently\n4. **Maintainable**: Clear separation of concerns\n5. **Multi-tenant Safe**: Isolation enforced at every layer\n6. **Cost Effective**: Only run Python agents when needed\n\n---\n\n## Next Steps\n\n1. Review this architecture with your team\n2. Set up Python environment on Replit\n3. Build proof-of-concept with one agent\n4. Test multi-tenant isolation thoroughly\n5. Gradually migrate functionality from Node.js to Python modules where AI/ML is needed\n","size_bytes":13457},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { signupSchema, type SignupData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<Omit<SignupData, 'organizationName'>>({\n    resolver: zodResolver(signupSchema.omit({ organizationName: true })),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignupData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Signup failed\");\n      }\n\n      const result = await response.json();\n      localStorage.setItem(\"token\", result.token);\n\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to Abetworks CRM\",\n      });\n\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Signup failed\",\n        description: error.message || \"Could not create account\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-md bg-primary mb-4\">\n            <span className=\"text-primary-foreground font-bold text-xl\">A</span>\n          </div>\n          <h1 className=\"text-3xl font-semibold tracking-tight mb-2\">Super Admin Setup</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Create the master admin account (one-time only)\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"John Doe\"\n                      autoComplete=\"name\"\n                      data-testid=\"input-name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"you@example.com\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      data-testid=\"input-email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"At least 6 characters\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      data-testid=\"input-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-signup\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                \"Create account\"\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Already have an account?{\" \"}\n            <a href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n              Sign in\n            </a>\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5225},"client/src/components/app-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  LayoutDashboard,\n  Users,\n  CheckCircle,\n  BarChart3,\n  Settings,\n  Cpu,\n  Package,\n  LogOut,\n  Store,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n  },\n  {\n    title: \"Users\",\n    url: \"/users\",\n    icon: Users,\n  },\n  {\n    title: \"Tasks\",\n    url: \"/tasks\",\n    icon: CheckCircle,\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Agent Shop\",\n    url: \"/agent-shop\",\n    icon: Store,\n  },\n  {\n    title: \"Agents\",\n    url: \"/agents\",\n    icon: Cpu,\n  },\n  {\n    title: \"Modules\",\n    url: \"/modules\",\n    icon: Package,\n  },\n  {\n    title: \"Execution History\",\n    url: \"/execution-history\",\n    icon: CheckCircle,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/login\";\n  };\n\n  const user = {\n    name: \"Admin User\",\n    email: \"admin@abetworks.com\",\n    role: \"Super Admin\",\n    initials: \"AU\",\n  };\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <div className=\"flex items-center h-16 px-4 border-b border-sidebar-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 rounded-md bg-primary flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-sm\">A</span>\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-base\">Abetworks</h1>\n              <p className=\"text-xs text-muted-foreground\">CRM Platform</p>\n            </div>\n          </div>\n        </div>\n\n        <SidebarGroup className=\"mt-4\">\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={isActive} data-testid={`link-${item.title.toLowerCase()}`}>\n                      <Link href={item.url}>\n                        <item.icon className=\"w-5 h-5\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-sm font-medium\">\n              {user.initials}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\">{user.name}</p>\n            <p className=\"text-xs text-muted-foreground truncate\">{user.role}</p>\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full justify-start\"\n          onClick={handleLogout}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Sign Out\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":3830},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Loader2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport type { Task } from \"@shared/schema\";\n\ninterface CreateTaskForm {\n  description: string;\n}\n\ntype TaskStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\nexport default function Tasks() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [statusFilter, setStatusFilter] = useState<TaskStatus | \"all\">(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: tasks, isLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const form = useForm<CreateTaskForm>({\n    defaultValues: {\n      description: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateTaskForm) => {\n      return apiRequest(\"POST\", \"/api/tasks\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Task created\",\n        description: \"Your task has been created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create task\",\n        description: error.message,\n      });\n    },\n  });\n\n  const filteredTasks = tasks\n    ?.filter((task) => statusFilter === \"all\" || task.status === statusFilter)\n    ?.filter((task) =>\n      task.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n  const getStatusBadgeVariant = (status: TaskStatus) => {\n    switch (status) {\n      case \"completed\":\n        return \"default\";\n      case \"running\":\n        return \"secondary\";\n      case \"failed\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    return status.charAt(0).toUpperCase() + status.slice(1);\n  };\n\n  const taskCounts = {\n    all: tasks?.length || 0,\n    pending: tasks?.filter((t) => t.status === \"pending\").length || 0,\n    running: tasks?.filter((t) => t.status === \"running\").length || 0,\n    completed: tasks?.filter((t) => t.status === \"completed\").length || 0,\n    failed: tasks?.filter((t) => t.status === \"failed\").length || 0,\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Tasks</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Manage and track your automation tasks\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-task\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Task\n        </Button>\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"mb-6 flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n          <Tabs value={statusFilter} onValueChange={(v) => setStatusFilter(v as any)}>\n            <TabsList>\n              <TabsTrigger value=\"all\" data-testid=\"filter-all\">\n                All ({taskCounts.all})\n              </TabsTrigger>\n              <TabsTrigger value=\"pending\" data-testid=\"filter-pending\">\n                Pending ({taskCounts.pending})\n              </TabsTrigger>\n              <TabsTrigger value=\"running\" data-testid=\"filter-running\">\n                Running ({taskCounts.running})\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\" data-testid=\"filter-completed\">\n                Completed ({taskCounts.completed})\n              </TabsTrigger>\n              <TabsTrigger value=\"failed\" data-testid=\"filter-failed\">\n                Failed ({taskCounts.failed})\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n\n          <Input\n            placeholder=\"Search tasks...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search-tasks\"\n          />\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-16\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : filteredTasks && filteredTasks.length > 0 ? (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Description\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Status\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Created\n                  </TableHead>\n                  <TableHead className=\"text-xs font-semibold uppercase tracking-wide\">\n                    Completed\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTasks.map((task) => (\n                  <TableRow key={task.id} className=\"hover-elevate\" data-testid={`row-task-${task.id}`}>\n                    <TableCell className=\"py-3\">\n                      <p className=\"font-medium text-sm line-clamp-2\">\n                        {task.description}\n                      </p>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getStatusBadgeVariant(task.status as TaskStatus)}>\n                        {getStatusLabel(task.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {new Date(task.createdAt).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {task.completedAt\n                        ? new Date(task.completedAt).toLocaleDateString()\n                        : \"-\"}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <CheckCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">\n              {statusFilter === \"all\"\n                ? \"No tasks yet. Create your first task to get started.\"\n                : `No ${statusFilter} tasks found.`}\n            </p>\n          </div>\n        )}\n      </Card>\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Task</DialogTitle>\n            <DialogDescription>\n              Create a new automation task for your agents\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit((data) => createMutation.mutate(data))}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe what this task should do...\"\n                        className=\"min-h-24\"\n                        data-testid=\"input-task-description\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-task\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-task\"\n                >\n                  {createMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Creating...\n                    </>\n                  ) : (\n                    \"Create Task\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction CheckCircle({ className }: { className?: string }) {\n  return (\n    <svg\n      className={className}\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n  );\n}\n","size_bytes":10150},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"python-agents/main.py":{"content":"\nfrom fastapi import FastAPI, HTTPException, Depends, Header\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Any\nimport os\nimport uuid\nfrom dotenv import load_dotenv\nfrom agents import NLPAgent, DataAgent\n\nload_dotenv()\n\napp = FastAPI(\n    title=\"Abetworks AI Automation Platform\",\n    description=\"Modular AI automation agents\",\n    version=\"1.0.0\"\n)\n\n# Request/Response models\nclass ExecutionRequest(BaseModel):\n    module_id: str\n    org_id: str\n    task_id: Optional[str] = None\n    input_data: Dict[str, Any]\n\nclass ExecutionResponse(BaseModel):\n    execution_id: str\n    status: str\n    output: Optional[Dict[str, Any]] = None\n    error: Optional[str] = None\n\n# Module registry mapping module IDs to agent classes\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"nlp_agent\": NLPAgent,\n    \"data_processor\": DataAgent,\n    \"data_agent\": DataAgent,\n}\n\n# Authentication\nasync def verify_api_key(x_api_key: str = Header(...)):\n    \"\"\"Verify API key from Node.js backend\"\"\"\n    valid_key = os.getenv(\"API_KEY\", \"\")\n    \n    if not valid_key:\n        return x_api_key\n    \n    if not x_api_key or x_api_key != valid_key:\n        raise HTTPException(status_code=401, detail=\"Invalid API key\")\n    return x_api_key\n\n@app.get(\"/\")\nasync def root():\n    return {\n        \"service\": \"Abetworks AI Automation Platform\",\n        \"status\": \"running\",\n        \"version\": \"1.0.0\",\n        \"available_modules\": list(MODULE_REGISTRY.keys())\n    }\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"service\": \"python-agents\",\n        \"available_modules\": list(MODULE_REGISTRY.keys())\n    }\n\n@app.get(\"/modules\")\nasync def list_modules(api_key: str = Depends(verify_api_key)):\n    \"\"\"List all available agent modules\"\"\"\n    return {\n        \"modules\": [\n            {\n                \"id\": \"nlp_processor\",\n                \"name\": \"NLP Processor\",\n                \"category\": \"nlp\",\n                \"description\": \"Natural language processing using OpenAI\"\n            },\n            {\n                \"id\": \"data_processor\",\n                \"name\": \"Data Processor\",\n                \"category\": \"data\",\n                \"description\": \"Data transformation and analysis using pandas\"\n            }\n        ]\n    }\n\n@app.post(\"/execute\", response_model=ExecutionResponse)\nasync def execute_module(\n    request: ExecutionRequest,\n    api_key: str = Depends(verify_api_key)\n):\n    \"\"\"Execute a Python agent module\"\"\"\n    execution_id = f\"exec_{uuid.uuid4().hex[:8]}\"\n    \n    try:\n        agent_class = MODULE_REGISTRY.get(request.module_id)\n        \n        if not agent_class:\n            return ExecutionResponse(\n                execution_id=execution_id,\n                status=\"failed\",\n                error=f\"Module '{request.module_id}' not found. Available modules: {list(MODULE_REGISTRY.keys())}\"\n            )\n        \n        agent = agent_class(org_id=request.org_id)\n        \n        result = await agent.execute(request.input_data)\n        \n        agent.close_db()\n        \n        return ExecutionResponse(\n            execution_id=execution_id,\n            status=\"completed\",\n            output=result\n        )\n        \n    except Exception as e:\n        return ExecutionResponse(\n            execution_id=execution_id,\n            status=\"failed\",\n            error=str(e)\n        )\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True\n    )\n","size_bytes":3512},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/modules.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Settings, History, TrendingUp } from \"lucide-react\";\nimport AgentStatus from \"@/components/agent-status\";\n\nexport default function Modules() {\n  const { data: activeAgents, isLoading } = useQuery({\n    queryKey: [\"/api/agents/active\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-64\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-48 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!activeAgents || activeAgents.length === 0) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <h1 className=\"text-3xl font-semibold tracking-tight mb-8\">Active Agents</h1>\n        <Card className=\"p-16 text-center\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <TrendingUp className=\"w-16 h-16 text-muted-foreground\" />\n            <h3 className=\"text-xl font-semibold\">No Active Agents Yet</h3>\n            <p className=\"text-muted-foreground max-w-md\">\n              Browse the Agent Shop to activate AI automation modules for your organization.\n            </p>\n            <Button asChild className=\"mt-4\">\n              <a href=\"/agent-shop\">Browse Agent Shop</a>\n            </Button>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Active Agents</h1>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Manage and monitor your activated automation modules\n          </p>\n        </div>\n        <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\n          {activeAgents.length} Active\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {activeAgents.map(({ agent, subscription }: any) => (\n          <Card key={agent.id} className=\"p-6 hover:shadow-lg transition-shadow\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"text-3xl\">{agent.icon}</div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{agent.name}</h3>\n                  <Badge variant=\"outline\" className=\"mt-1\">\n                    {agent.category}\n                  </Badge>\n                </div>\n              </div>\n              <AgentStatus agentId={agent.id} status=\"idle\" />\n            </div>\n\n            <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n              {agent.description}\n            </p>\n\n            <div className=\"flex gap-2\">\n              <Button size=\"sm\" variant=\"default\" className=\"flex-1\">\n                <Play className=\"w-4 h-4 mr-1\" />\n                Run\n              </Button>\n              <Button size=\"sm\" variant=\"outline\">\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n              <Button size=\"sm\" variant=\"outline\">\n                <History className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":3635},"python-agents/agents/nlp_agent.py":{"content":"from .base_agent import BaseAgent\nfrom typing import Any, Dict\nimport os\n\nclass NLPAgent(BaseAgent):\n    \"\"\"NLP Processing Agent using OpenAI\"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute NLP processing task\n        \n        Args:\n            input_data: Should contain 'text' key with text to process\n            \n        Returns:\n            Dict with processed text and metadata\n        \"\"\"\n        try:\n            text = input_data.get(\"text\", \"\")\n            \n            if not text:\n                return {\n                    \"success\": False,\n                    \"error\": \"No text provided for processing\"\n                }\n            \n            openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n            \n            if openai_api_key:\n                try:\n                    import openai\n                    \n                    client = openai.OpenAI(api_key=openai_api_key)\n                    \n                    response = client.chat.completions.create(\n                        model=\"gpt-4o-mini\",\n                        messages=[\n                            {\"role\": \"system\", \"content\": \"You are a helpful assistant for NLP processing.\"},\n                            {\"role\": \"user\", \"content\": text}\n                        ],\n                        max_tokens=1000\n                    )\n                    \n                    processed_text = response.choices[0].message.content\n                    \n                    return {\n                        \"success\": True,\n                        \"processed_text\": processed_text,\n                        \"original_text\": text,\n                        \"model\": \"gpt-4o-mini\"\n                    }\n                except Exception as e:\n                    return {\n                        \"success\": False,\n                        \"error\": f\"OpenAI processing failed: {str(e)}\"\n                    }\n            else:\n                return {\n                    \"success\": True,\n                    \"processed_text\": f\"[NLP Processing] Text analyzed: {len(text)} characters\",\n                    \"original_text\": text,\n                    \"model\": \"mock\",\n                    \"note\": \"OpenAI API key not configured, using mock response\"\n                }\n                \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n","size_bytes":2449},"PROJECT_VISION.md":{"content":"\n# Abetworks - Business AI Automation Platform Vision & Roadmap\n\n## 📋 Executive Summary\n\n**Project Name**: Abetworks Business AI Automation Platform  \n**Current Status**: Foundation Phase - Frontend Complete, Backend In Progress  \n**Architecture**: Modular AI Agent System for Business Automation\n\n### What We're Building\n\nA production-ready AI automation platform that enables businesses to:\n- **Collect & Process Leads** from forms, chatbots, and multiple sources\n- **Score & Qualify Leads** using AI-powered analysis\n- **Forecast Sales & Trends** with predictive analytics\n- **Automate Customer Interactions** through intelligent chatbots\n- **Orchestrate Business Workflows** with agent chaining\n- **Monitor Performance** in real-time with analytics dashboards\n\n---\n\n## 🎯 Current State (What Replit Has Built)\n\n### ✅ Completed Frontend (React + TypeScript + Tailwind)\n\n#### 1. Authentication & User Management\n- **Login System** (`/login`) - JWT-based authentication\n- **Super Admin Login** (`/admin/login`) - Separate admin authentication\n- **Signup** (`/signup`) - First user becomes super admin\n- **Multi-tenant Isolation** - Each organization has isolated data\n\n#### 2. Dashboard (`/dashboard`)\n**Current Metrics Display**:\n- Active Users count\n- Tasks Done count  \n- Workflows Active count\n- Tasks Pending count\n\n**Features**:\n- Clean, professional UI with modern design\n- Real-time metrics visualization\n- Responsive layout\n- Interactive charts using Recharts\n\n#### 3. User Management (`/users`)\n**Role-Based System**:\n- **Super Admin** - Full system control, manages all organizations\n- **Admin** - Organization management, user invites, API key management\n- **Member** - Task creation and viewing\n\n#### 4. Tasks System (`/tasks`)\n**Task Management**:\n- Create automation workflow tasks\n- Track task status (Pending, Running, Completed, Failed)\n- Associate tasks with users and organizations\n- Task execution history\n\n#### 5. Reports & Analytics (`/reports`)\n**Metrics & Visualization**:\n- Aggregate task metrics per user/organization\n- Interactive charts\n- Resource usage tracking\n- Performance analytics\n\n#### 6. Settings (`/settings`)\n**Organization Configuration**:\n- Organization information\n- API key management\n- Integration placeholders\n\n#### 7. Agents Board (`/agents`) - **PLACEHOLDER READY**\n**Current State**:\n- Visual card/block layout for agents\n- Agent metadata display\n- Action buttons: View, Run, Settings\n- **Ready for Backend Integration**\n\n---\n\n## 🤖 Business AI Agent Types (What Backend Will Create)\n\n### 1. Form Data Collection Agent\n\n**Purpose**: Capture, validate, and process lead data from web forms\n\n**Capabilities**:\n- Multi-source form integration (website, landing pages, social media)\n- Real-time data validation and cleaning\n- Duplicate detection\n- Auto-enrichment with external data sources\n- Email/SMS verification\n- Custom field mapping\n\n**Example Use Cases**:\n- Contact form submissions\n- Newsletter signups\n- Demo request forms\n- Quote request forms\n- Survey responses\n\n**Configuration Schema**:\n```json\n{\n  \"form_sources\": [\n    {\n      \"name\": \"Website Contact Form\",\n      \"webhook_url\": \"https://api.example.com/webhook\",\n      \"fields\": {\n        \"name\": \"required\",\n        \"email\": \"required\",\n        \"phone\": \"optional\",\n        \"company\": \"optional\"\n      }\n    }\n  ],\n  \"validation_rules\": {\n    \"email\": \"email_format\",\n    \"phone\": \"phone_format\"\n  },\n  \"enrichment\": {\n    \"enabled\": true,\n    \"sources\": [\"clearbit\", \"hunter.io\"]\n  },\n  \"deduplication\": {\n    \"enabled\": true,\n    \"match_fields\": [\"email\"]\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Webhook receiver for form submissions\n- Data validation engine\n- External API integrations (Clearbit, Hunter.io, etc.)\n- Duplicate detection algorithm\n- Data storage with multi-tenant isolation\n\n---\n\n### 2. Chatbot Agent\n\n**Purpose**: Intelligent conversational AI for customer interaction and lead qualification\n\n**Capabilities**:\n- Natural language understanding (NLU)\n- Multi-channel support (website, WhatsApp, Slack, email)\n- Lead qualification through conversation\n- FAQ handling\n- Appointment scheduling\n- Conversation history and analytics\n- Human handoff for complex queries\n\n**Example Use Cases**:\n- Website visitor engagement\n- Pre-sales qualification\n- Customer support automation\n- Appointment booking\n- Product recommendations\n\n**Configuration Schema**:\n```json\n{\n  \"bot_personality\": {\n    \"name\": \"Abby\",\n    \"tone\": \"friendly_professional\",\n    \"language\": \"en\"\n  },\n  \"channels\": [\n    {\n      \"type\": \"website\",\n      \"widget_config\": {\n        \"position\": \"bottom-right\",\n        \"primary_color\": \"#0066FF\"\n      }\n    },\n    {\n      \"type\": \"whatsapp\",\n      \"phone_number\": \"+1234567890\"\n    }\n  ],\n  \"qualification_questions\": [\n    \"What is your company size?\",\n    \"What is your budget range?\",\n    \"When do you plan to make a decision?\"\n  ],\n  \"handoff_triggers\": [\n    \"pricing\",\n    \"technical_questions\",\n    \"high_intent_keywords\"\n  ],\n  \"llm_config\": {\n    \"provider\": \"openai\",\n    \"model\": \"gpt-4\",\n    \"temperature\": 0.7\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- LLM integration (OpenAI, Anthropic, or local models)\n- Intent classification\n- Entity extraction\n- Conversation state management\n- Multi-channel connectors (WhatsApp API, Slack API, etc.)\n- Real-time messaging infrastructure\n- Conversation analytics\n\n---\n\n### 3. Lead Scoring Agent\n\n**Purpose**: AI-powered lead qualification and ranking based on conversion probability\n\n**Capabilities**:\n- Multi-factor scoring algorithm\n- Behavioral analysis (website visits, email opens, content downloads)\n- Demographic scoring (company size, industry, job title)\n- Engagement scoring (response time, interaction frequency)\n- Predictive scoring using machine learning\n- Auto-prioritization for sales team\n- Score decay over time\n\n**Example Use Cases**:\n- Prioritize hot leads for sales follow-up\n- Identify high-value prospects\n- Trigger automated nurture campaigns for cold leads\n- Alert sales team about buying signals\n\n**Scoring Factors**:\n```json\n{\n  \"demographic_factors\": {\n    \"company_size\": {\n      \"1-10\": 10,\n      \"11-50\": 20,\n      \"51-200\": 40,\n      \"201-1000\": 60,\n      \"1000+\": 80\n    },\n    \"industry\": {\n      \"technology\": 80,\n      \"finance\": 70,\n      \"healthcare\": 60\n    },\n    \"job_title\": {\n      \"C-level\": 100,\n      \"VP/Director\": 80,\n      \"Manager\": 50,\n      \"Individual Contributor\": 20\n    }\n  },\n  \"behavioral_factors\": {\n    \"website_visits\": 5,\n    \"demo_request\": 50,\n    \"pricing_page_view\": 30,\n    \"email_open\": 5,\n    \"email_click\": 10,\n    \"content_download\": 20\n  },\n  \"engagement_factors\": {\n    \"response_within_1_hour\": 40,\n    \"response_within_24_hours\": 20,\n    \"response_after_24_hours\": 5\n  },\n  \"ml_model\": {\n    \"enabled\": true,\n    \"retrain_interval\": \"weekly\",\n    \"features\": [\"all_above\", \"historical_conversion_data\"]\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Scoring algorithm engine\n- Behavioral tracking integration\n- Machine learning model (scikit-learn, XGBoost)\n- Real-time score calculation\n- Historical data analysis\n- Score threshold triggers\n- CRM integration for lead updates\n\n---\n\n### 4. Forecasting Agent\n\n**Purpose**: Predictive analytics for sales, revenue, and business trends\n\n**Capabilities**:\n- Sales pipeline forecasting\n- Revenue predictions\n- Churn prediction\n- Seasonal trend analysis\n- Growth projection\n- Scenario modeling (\"what-if\" analysis)\n- Anomaly detection\n\n**Example Use Cases**:\n- Monthly/quarterly sales forecasts\n- Revenue projections for planning\n- Predict customer churn risk\n- Identify growth opportunities\n- Budget planning\n\n**Configuration Schema**:\n```json\n{\n  \"forecast_types\": [\n    {\n      \"type\": \"sales_revenue\",\n      \"time_horizon\": \"90_days\",\n      \"model\": \"prophet\",\n      \"confidence_interval\": 0.95\n    },\n    {\n      \"type\": \"deal_close_probability\",\n      \"features\": [\"deal_age\", \"engagement_score\", \"deal_size\"],\n      \"model\": \"gradient_boosting\"\n    }\n  ],\n  \"data_sources\": [\n    {\n      \"type\": \"historical_sales\",\n      \"table\": \"tasks\",\n      \"date_field\": \"completed_at\",\n      \"value_field\": \"result\"\n    }\n  ],\n  \"refresh_interval\": \"daily\",\n  \"alert_thresholds\": {\n    \"revenue_below_target\": 0.8,\n    \"high_churn_risk\": 0.7\n  }\n}\n```\n\n**Models Used**:\n- **Time Series**: Prophet (Facebook), ARIMA, LSTM\n- **Classification**: Gradient Boosting, Random Forest\n- **Regression**: Linear Regression, XGBoost\n\n**Backend Implementation Requirements**:\n- Time series forecasting models\n- Machine learning pipeline\n- Historical data aggregation\n- Scenario simulation engine\n- Data visualization preparation\n- Alert system for threshold breaches\n\n---\n\n### 5. Email/SMS Marketing Agent\n\n**Purpose**: Automated, personalized outreach campaigns\n\n**Capabilities**:\n- Drip campaign automation\n- Personalized email generation (AI-powered)\n- A/B testing\n- Send time optimization\n- Engagement tracking\n- Automated follow-ups\n- SMS campaigns\n\n**Example Use Cases**:\n- Welcome email sequences\n- Nurture campaigns for cold leads\n- Re-engagement campaigns\n- Event invitations\n- Product announcements\n\n**Configuration Schema**:\n```json\n{\n  \"campaign_type\": \"nurture\",\n  \"channels\": [\"email\", \"sms\"],\n  \"sequence\": [\n    {\n      \"step\": 1,\n      \"delay\": \"0_hours\",\n      \"channel\": \"email\",\n      \"subject\": \"Welcome to {{company_name}}!\",\n      \"template\": \"welcome_email\",\n      \"personalization\": true\n    },\n    {\n      \"step\": 2,\n      \"delay\": \"24_hours\",\n      \"channel\": \"email\",\n      \"subject\": \"Here's how we can help\",\n      \"template\": \"value_prop_email\"\n    },\n    {\n      \"step\": 3,\n      \"delay\": \"72_hours\",\n      \"channel\": \"sms\",\n      \"message\": \"Hi {{first_name}}, ready to see a demo?\"\n    }\n  ],\n  \"ai_personalization\": {\n    \"enabled\": true,\n    \"model\": \"gpt-4\",\n    \"tone\": \"professional_friendly\"\n  },\n  \"tracking\": {\n    \"opens\": true,\n    \"clicks\": true,\n    \"replies\": true\n  }\n}\n```\n\n**Backend Implementation Requirements**:\n- Email service integration (SendGrid, Mailgun, AWS SES)\n- SMS service integration (Twilio, MessageBird)\n- Campaign scheduler\n- Template engine with AI generation\n- Tracking pixel and link tracking\n- Analytics and reporting\n\n---\n\n### 6. Data Enrichment Agent\n\n**Purpose**: Enhance lead data with external information sources\n\n**Capabilities**:\n- Company information lookup\n- Contact verification\n- Social media profile discovery\n- Technographic data (tech stack used)\n- Firmographic data (company size, revenue, industry)\n- Email verification and validation\n\n**Example Use Cases**:\n- Enrich new leads with company data\n- Find decision-maker contacts\n- Validate email addresses\n- Discover social profiles\n\n**Configuration Schema**:\n```json\n{\n  \"enrichment_sources\": [\n    {\n      \"provider\": \"clearbit\",\n      \"api_key_secret\": \"CLEARBIT_API_KEY\",\n      \"fields\": [\"company_name\", \"company_size\", \"industry\"]\n    },\n    {\n      \"provider\": \"hunter_io\",\n      \"api_key_secret\": \"HUNTER_API_KEY\",\n      \"fields\": [\"email_verification\", \"company_emails\"]\n    }\n  ],\n  \"auto_enrich\": true,\n  \"enrich_on\": [\"lead_creation\", \"form_submission\"]\n}\n```\n\n**Backend Implementation Requirements**:\n- Multiple API integrations (Clearbit, Hunter.io, FullContact, etc.)\n- Rate limiting and cost management\n- Data merge logic\n- Confidence scoring\n- Fallback strategies\n\n---\n\n## 🎨 Frontend Requirements (What Replit Will Build)\n\n### 1. Responsive Agent Management UI\n\n**Agent Cards/Dashboard**:\n- Visual representation of each agent type\n- Status indicators (Active, Paused, Error)\n- Quick action buttons (Configure, Run, View Analytics)\n- Agent performance metrics\n\n**Agent Configuration Interface**:\n- Form-based configuration for each agent\n- JSON editor for advanced settings\n- Template library for quick setup\n- Validation and testing tools\n\n### 2. Form Builder Interface\n\n**Visual Form Designer**:\n- Drag-and-drop form fields\n- Field validation rules\n- Custom styling options\n- Embed code generation\n- Preview mode\n\n**Form Analytics**:\n- Submission rates\n- Conversion tracking\n- Field completion rates\n- Drop-off analysis\n\n### 3. Chatbot Interface\n\n**Chatbot Customization**:\n- Personality and tone settings\n- Welcome message editor\n- FAQ management\n- Conversation flow builder (visual)\n- Widget customization (colors, position, branding)\n\n**Conversation Analytics**:\n- Active conversations list\n- Conversation history viewer\n- Intent analysis dashboard\n- Handoff tracking\n- Customer satisfaction scores\n\n### 4. Lead Management Dashboard\n\n**Lead List View**:\n- Sortable/filterable lead table\n- Lead score visualization\n- Quick actions (assign, tag, note)\n- Bulk operations\n- Export functionality\n\n**Lead Detail View**:\n- Complete lead profile\n- Activity timeline\n- Score breakdown\n- Conversation history\n- Notes and tasks\n\n### 5. Forecasting Dashboard\n\n**Interactive Charts**:\n- Revenue forecast line charts\n- Pipeline stage breakdown\n- Deal probability distribution\n- Trend analysis\n- Scenario comparison\n\n**Forecast Configuration**:\n- Time horizon selector\n- Model parameter tuning\n- Data source selection\n- Alert threshold settings\n\n### 6. Campaign Builder\n\n**Email/SMS Campaign Interface**:\n- Campaign sequence builder (visual timeline)\n- Template editor with AI assistance\n- Personalization token selector\n- A/B test configuration\n- Send time optimizer\n\n**Campaign Analytics**:\n- Delivery rates\n- Open/click rates\n- Conversion tracking\n- Engagement heatmaps\n- ROI calculation\n\n---\n\n## 🔌 Backend API Endpoints (To Be Implemented)\n\n### Form Collection Endpoints\n```\nPOST   /api/forms/submit              - Receive form submission from webhook\nGET    /api/forms/submissions         - List all form submissions (filtered)\nGET    /api/forms/submissions/:id     - Get submission details\nPOST   /api/forms/validate            - Validate form data\nPOST   /api/forms/enrich              - Enrich submission with external data\n```\n\n### Chatbot Endpoints\n```\nPOST   /api/chatbot/message           - Send message, get bot response\nGET    /api/chatbot/conversations     - List conversations\nGET    /api/chatbot/conversations/:id - Get conversation history\nPOST   /api/chatbot/handoff           - Transfer to human agent\nPUT    /api/chatbot/config            - Update bot configuration\n```\n\n### Lead Scoring Endpoints\n```\nGET    /api/leads                     - List leads with scores\nGET    /api/leads/:id                 - Get lead details with score breakdown\nPOST   /api/leads/:id/score           - Manually trigger score recalculation\nGET    /api/leads/hot                 - Get high-scoring leads\nPUT    /api/leads/:id                 - Update lead information\n```\n\n### Forecasting Endpoints\n```\nGET    /api/forecasts/revenue         - Get revenue forecast\nGET    /api/forecasts/pipeline        - Get pipeline forecast\nGET    /api/forecasts/churn           - Get churn predictions\nPOST   /api/forecasts/scenario        - Run custom scenario analysis\nGET    /api/forecasts/accuracy        - Get model accuracy metrics\n```\n\n### Campaign Endpoints\n```\nGET    /api/campaigns                 - List campaigns\nPOST   /api/campaigns                 - Create campaign\nGET    /api/campaigns/:id             - Get campaign details\nPUT    /api/campaigns/:id             - Update campaign\nPOST   /api/campaigns/:id/start       - Start campaign\nPOST   /api/campaigns/:id/pause       - Pause campaign\nGET    /api/campaigns/:id/analytics   - Get campaign performance\n```\n\n---\n\n## 🔐 Multi-Tenant Security (Critical)\n\n**All Backend Agents MUST**:\n1. Filter all queries by `org_id`\n2. Validate JWT tokens on every request\n3. Never expose data across organizations\n4. Encrypt sensitive data (API keys, customer data)\n5. Implement rate limiting per organization\n6. Audit log all actions\n\n**Example (Python)**:\n```python\nclass FormCollectionAgent(BaseAgent):\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        # Always validate org_id\n        if not self.validate_org_access(input_data['form_id'], 'forms'):\n            return {\"success\": False, \"error\": \"Access denied\"}\n        \n        # Process only org-specific data\n        submissions = self.get_submissions_by_org(self.org_id)\n        # ...\n```\n\n---\n\n## 🚀 Development Roadmap\n\n### Phase 1: Form & Lead Collection (Weeks 1-2)\n**Backend**:\n- [ ] Form submission webhook receiver\n- [ ] Data validation engine\n- [ ] Duplicate detection\n- [ ] Email verification integration\n\n**Frontend**:\n- [ ] Form builder interface\n- [ ] Form submission dashboard\n- [ ] Lead list view\n- [ ] Lead detail page\n\n### Phase 2: Lead Scoring (Weeks 3-4)\n**Backend**:\n- [ ] Scoring algorithm implementation\n- [ ] Machine learning model training\n- [ ] Real-time score calculation\n- [ ] Score update triggers\n\n**Frontend**:\n- [ ] Lead score visualization\n- [ ] Score breakdown component\n- [ ] Hot leads dashboard\n- [ ] Scoring configuration UI\n\n### Phase 3: Chatbot (Weeks 5-6)\n**Backend**:\n- [ ] LLM integration (OpenAI/Anthropic)\n- [ ] Intent classification\n- [ ] Conversation state management\n- [ ] Multi-channel support\n\n**Frontend**:\n- [ ] Chat widget component\n- [ ] Conversation viewer\n- [ ] Bot configuration interface\n- [ ] Analytics dashboard\n\n### Phase 4: Forecasting (Weeks 7-8)\n**Backend**:\n- [ ] Time series models (Prophet)\n- [ ] ML pipeline (scikit-learn, XGBoost)\n- [ ] Scenario simulation\n- [ ] Alert system\n\n**Frontend**:\n- [ ] Forecast charts (Recharts)\n- [ ] Model configuration UI\n- [ ] Scenario builder\n- [ ] Alert management\n\n### Phase 5: Email/SMS Campaigns (Weeks 9-10)\n**Backend**:\n- [ ] Email service integration (SendGrid)\n- [ ] SMS service integration (Twilio)\n- [ ] Campaign scheduler\n- [ ] AI personalization engine\n\n**Frontend**:\n- [ ] Campaign builder (visual)\n- [ ] Template editor\n- [ ] Analytics dashboard\n- [ ] A/B test configuration\n\n---\n\n## 📊 Success Metrics\n\n### Business Metrics\n- Lead capture rate increase\n- Lead-to-customer conversion rate\n- Average lead score accuracy\n- Forecast accuracy (±10%)\n- Email campaign open rate (>20%)\n- Chatbot engagement rate\n\n### Technical Metrics\n- API response time (<200ms)\n- Agent execution success rate (>95%)\n- System uptime (>99.9%)\n- Multi-tenant isolation (100%)\n\n---\n\n## 💡 Future Enhancements\n\n1. **WhatsApp Business API Integration**\n2. **Advanced Workflow Automation** (Zapier-like)\n3. **AI Voice Calls** for outreach\n4. **Video Meeting Bot** (Zoom/Meet integration)\n5. **Social Media Lead Generation** (LinkedIn, Facebook)\n6. **Agent Marketplace** (pre-built agents)\n7. **Mobile Apps** (iOS/Android)\n\n---\n\n**Document Version**: 2.0  \n**Last Updated**: 2024  \n**Focus**: Business AI Automation (Forms, Chatbots, Lead Scoring, Forecasting)  \n**Status**: Vision Complete - Ready for Implementation  \n\n---\n\n**Division of Work**:\n- **Replit**: Frontend UI/UX, responsive design, user experience\n- **Backend Developer**: AI agents, business logic, API endpoints, integrations\n- **Integration**: Frontend calls backend APIs for all agent operations\n","size_bytes":18979},"client/src/pages/admin-login.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card } from \"@/components/ui/card\";\nimport { Loader2, Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Admin login failed\");\n      }\n\n      const result = await response.json();\n      localStorage.setItem(\"token\", result.token);\n      \n      toast({\n        title: result.message || \"Welcome back, Admin!\",\n        description: \"You have successfully logged in as administrator.\",\n      });\n\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Admin login failed\",\n        description: error.message || \"Invalid credentials or insufficient privileges\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-md bg-primary mb-4\">\n            <Shield className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-3xl font-semibold tracking-tight mb-2\">Admin Portal</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Sign in with your administrator account\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Admin Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"admin@abetworks.com\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      data-testid=\"input-admin-email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Admin Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter your admin password\"\n                      type=\"password\"\n                      autoComplete=\"current-password\"\n                      data-testid=\"input-admin-password\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-admin-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Authenticating...\n                </>\n              ) : (\n                <>\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Admin Sign In\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-6 text-center space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">\n            Regular user?{\" \"}\n            <a href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-user-login\">\n              Sign in here\n            </a>\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4781},"python-agents/agents/data_agent.py":{"content":"from .base_agent import BaseAgent\nfrom typing import Any, Dict\n\nclass DataAgent(BaseAgent):\n    \"\"\"Data Transformation Agent using pandas\"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute data transformation task\n        \n        Args:\n            input_data: Should contain 'data' key with data to process\n            \n        Returns:\n            Dict with processed data and statistics\n        \"\"\"\n        try:\n            data = input_data.get(\"data\", [])\n            operation = input_data.get(\"operation\", \"describe\")\n            \n            if not data:\n                return {\n                    \"success\": False,\n                    \"error\": \"No data provided for processing\"\n                }\n            \n            try:\n                import pandas as pd\n                \n                df = pd.DataFrame(data)\n                \n                if operation == \"describe\":\n                    result = df.describe().to_dict()\n                    return {\n                        \"success\": True,\n                        \"statistics\": result,\n                        \"row_count\": len(df),\n                        \"column_count\": len(df.columns),\n                        \"columns\": list(df.columns)\n                    }\n                \n                elif operation == \"summary\":\n                    return {\n                        \"success\": True,\n                        \"row_count\": len(df),\n                        \"column_count\": len(df.columns),\n                        \"columns\": list(df.columns),\n                        \"dtypes\": df.dtypes.astype(str).to_dict(),\n                        \"sample\": df.head(5).to_dict(orient=\"records\")\n                    }\n                \n                elif operation == \"clean\":\n                    df_cleaned = df.dropna()\n                    return {\n                        \"success\": True,\n                        \"cleaned_data\": df_cleaned.to_dict(orient=\"records\"),\n                        \"original_rows\": len(df),\n                        \"cleaned_rows\": len(df_cleaned),\n                        \"rows_removed\": len(df) - len(df_cleaned)\n                    }\n                \n                else:\n                    return {\n                        \"success\": False,\n                        \"error\": f\"Unknown operation: {operation}\"\n                    }\n                    \n            except ImportError:\n                return {\n                    \"success\": False,\n                    \"error\": \"pandas library not installed\"\n                }\n                \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n","size_bytes":2735},"python-agents/agents/base_agent.py":{"content":"from abc import ABC, abstractmethod\nfrom typing import Any, Dict\nimport os\nimport psycopg2\nfrom datetime import datetime\n\nclass BaseAgent(ABC):\n    \"\"\"Abstract base class for all modular agents\"\"\"\n    \n    def __init__(self, org_id: str, config: Dict[str, Any] = None):\n        self.org_id = org_id\n        self.config = config or {}\n        self.db_conn = None\n    \n    def connect_db(self):\n        \"\"\"Connect to PostgreSQL database\"\"\"\n        if not self.db_conn:\n            database_url = os.getenv(\"DATABASE_URL\")\n            if database_url:\n                self.db_conn = psycopg2.connect(database_url)\n        return self.db_conn\n    \n    def close_db(self):\n        \"\"\"Close database connection\"\"\"\n        if self.db_conn:\n            self.db_conn.close()\n            self.db_conn = None\n    \n    @abstractmethod\n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Main execution method - must be implemented by each agent\n        \n        Args:\n            input_data: Input data for the agent\n            \n        Returns:\n            Dict with result and metadata\n        \"\"\"\n        pass\n    \n    async def log_execution(\n        self, \n        module_id: str, \n        task_id: str, \n        status: str, \n        output: Any = None, \n        error: str = None\n    ):\n        \"\"\"Log execution to database\"\"\"\n        try:\n            conn = self.connect_db()\n            cursor = conn.cursor()\n            \n            cursor.execute(\n                \"\"\"\n                INSERT INTO module_executions \n                (module_id, task_id, status, output, error, org_id)\n                VALUES (%s, %s, %s, %s, %s, %s)\n                \"\"\",\n                (module_id, task_id, status, str(output), error, self.org_id)\n            )\n            \n            conn.commit()\n        except Exception as e:\n            print(f\"Failed to log execution: {e}\")\n        finally:\n            if cursor:\n                cursor.close()\n    \n    def validate_org_access(self, resource_id: str, table: str) -> bool:\n        \"\"\"Ensure multi-tenant isolation\"\"\"\n        try:\n            conn = self.connect_db()\n            cursor = conn.cursor()\n            \n            cursor.execute(\n                f\"SELECT org_id FROM {table} WHERE id = %s\",\n                (resource_id,)\n            )\n            \n            result = cursor.fetchone()\n            cursor.close()\n            \n            if result and result[0] == self.org_id:\n                return True\n            return False\n        except Exception as e:\n            print(f\"Validation error: {e}\")\n            return False\n","size_bytes":2631},"python-agents/agents/__init__.py":{"content":"from .base_agent import BaseAgent\nfrom .nlp_agent import NLPAgent\nfrom .data_agent import DataAgent\n\n__all__ = [\"BaseAgent\", \"NLPAgent\", \"DataAgent\"]\n","size_bytes":150},"server/seed-agents.ts":{"content":"import { db } from \"./db\";\nimport { agentCatalog } from \"@shared/schema\";\nimport type { Storage } from \"./storage\";\nimport type { InsertAgentCatalog } from \"@shared/schema\";\n\nconst SAMPLE_AGENTS = [\n  {\n    id: \"form-collection\",\n    name: \"Form Data Collection Agent\",\n    type: \"lead-generation\",\n    description: \"Capture, validate, and process lead data from web forms\",\n    longDescription: \"Multi-source form integration with real-time data validation, duplicate detection, auto-enrichment with external data sources, and email/SMS verification.\",\n    icon: \"ClipboardList\",\n    category: \"lead-generation\",\n    backendEndpoint: \"/api/agents/form-collection\",\n    price: 0,\n    isActive: true,\n  },\n  {\n    id: \"chatbot\",\n    name: \"Chatbot Agent\",\n    type: \"customer-engagement\",\n    description: \"Intelligent conversational AI for customer interaction and lead qualification\",\n    longDescription: \"Natural language understanding, multi-channel support (website, WhatsApp, Slack), lead qualification through conversation, FAQ handling, and appointment scheduling.\",\n    icon: \"MessageSquare\",\n    category: \"customer-engagement\",\n    backendEndpoint: \"/api/agents/chatbot\",\n    price: 0,\n    isActive: true,\n  },\n  {\n    id: \"lead-scoring\",\n    name: \"Lead Scoring Agent\",\n    type: \"lead-qualification\",\n    description: \"AI-powered lead qualification and ranking based on conversion probability\",\n    longDescription: \"Multi-factor scoring algorithm with behavioral analysis, demographic scoring, engagement scoring, predictive ML models, auto-prioritization, and score decay over time.\",\n    icon: \"TrendingUp\",\n    category: \"lead-qualification\",\n    backendEndpoint: \"/api/agents/lead-scoring\",\n    price: 0,\n    isActive: true,\n  },\n  {\n    id: \"forecasting\",\n    name: \"Forecasting Agent\",\n    type: \"analytics\",\n    description: \"Predictive analytics for sales, revenue, and business trends\",\n    longDescription: \"Sales pipeline forecasting, revenue predictions, churn prediction, seasonal trend analysis, growth projection, and scenario modeling with time series models.\",\n    icon: \"BarChart\",\n    category: \"analytics\",\n    backendEndpoint: \"/api/agents/forecasting\",\n    price: 0,\n    isActive: true,\n  },\n  {\n    id: \"email-sms-marketing\",\n    name: \"Email/SMS Marketing Agent\",\n    type: \"marketing\",\n    description: \"Automated, personalized outreach campaigns\",\n    longDescription: \"Drip campaign automation, AI-powered personalized email generation, A/B testing, send time optimization, engagement tracking, and automated follow-ups.\",\n    icon: \"Mail\",\n    category: \"marketing\",\n    backendEndpoint: \"/api/agents/email-sms\",\n    price: 0,\n    isActive: true,\n  },\n  {\n    id: \"data-enrichment\",\n    name: \"Data Enrichment Agent\",\n    type: \"data-processing\",\n    description: \"Enhance lead data with external information sources\",\n    longDescription: \"Company information lookup, contact verification, social media profile discovery, technographic and firmographic data, email verification and validation.\",\n    icon: \"Database\",\n    category: \"data-processing\",\n    backendEndpoint: \"/api/agents/data-enrichment\",\n    price: 0,\n    isActive: true,\n  },\n];\n\nexport async function seedAgents(storage: Storage) {\n  console.log(\"Seeding agent catalog...\");\n\n  for (const agent of SAMPLE_AGENTS) {\n    try {\n      await storage.createAgentInCatalog(agent);\n      console.log(`✓ Seeded agent: ${agent.name}`);\n    } catch (error: any) {\n      if (error.message?.includes(\"already exists\")) {\n        console.log(`- Agent already exists: ${agent.name}`);\n      } else {\n        console.error(`✗ Failed to seed ${agent.name}:`, error.message);\n      }\n    }\n  }\n\n  console.log(\"Agent seeding complete!\");\n}","size_bytes":3734},"docs/AGENT_REGISTRATION_FLOW.md":{"content":"\n# Agent Registration & Auto-UI Generation System\n\n## Overview\n\nThe Abetworks platform features an intelligent agent registration system where **backend agent registration automatically generates the frontend UI** without requiring manual frontend code changes. This document explains how this system works end-to-end.\n\n---\n\n## How It Works: Complete Flow\n\n### 1. Agent Registration (Backend)\n\nWhen you register a new agent (either via API or the UI registration form), the agent metadata is stored in the database:\n\n```mermaid\ngraph LR\n    A[Register Agent] --> B[Store in Database]\n    B --> C[Agent Catalog Table]\n    C --> D[Frontend Auto-Fetches]\n    D --> E[UI Auto-Generates]\n```\n\n#### Registration Methods\n\n**Method A: Via API**\n```bash\ncurl -X POST https://your-app.repl.co/api/agents/register \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"custom-sentiment-analyzer\",\n    \"name\": \"Sentiment Analyzer\",\n    \"type\": \"nlp\",\n    \"description\": \"Analyzes text sentiment\",\n    \"category\": \"analytics\",\n    \"icon\": \"😊\",\n    \"price\": 0\n  }'\n```\n\n**Method B: Via UI Registration Form**\n1. Navigate to **Agent Marketplace** page\n2. Click **\"Register Agent\"** button\n3. Fill out the form with agent details\n4. Submit → Agent is stored in database\n\n---\n\n### 2. Database Storage\n\nThe agent metadata is stored in the `agent_catalog` table:\n\n```sql\nCREATE TABLE agent_catalog (\n  id VARCHAR PRIMARY KEY,           -- \"custom-sentiment-analyzer\"\n  name TEXT NOT NULL,               -- \"Sentiment Analyzer\"\n  type TEXT NOT NULL,               -- \"nlp\"\n  description TEXT NOT NULL,        -- Short description\n  long_description TEXT,            -- Detailed description\n  icon TEXT,                        -- \"😊\"\n  category TEXT NOT NULL,           -- \"analytics\"\n  backend_endpoint TEXT,            -- \"/api/agents/custom-sentiment-analyzer\"\n  config_schema TEXT,               -- JSON schema for configuration\n  price INTEGER DEFAULT 0,          -- Pricing in USD\n  is_active BOOLEAN DEFAULT true,   -- Availability status\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n**Example Row:**\n```json\n{\n  \"id\": \"custom-sentiment-analyzer\",\n  \"name\": \"Sentiment Analyzer\",\n  \"type\": \"nlp\",\n  \"description\": \"Analyzes text sentiment with 95% accuracy\",\n  \"longDescription\": \"Advanced NLP model for sentiment analysis...\",\n  \"icon\": \"😊\",\n  \"category\": \"analytics\",\n  \"backendEndpoint\": \"/api/agents/custom-sentiment-analyzer\",\n  \"configSchema\": \"{\\\"apiKey\\\":{\\\"type\\\":\\\"string\\\",\\\"required\\\":true}}\",\n  \"price\": 0,\n  \"isActive\": true\n}\n```\n\n---\n\n### 3. Frontend Auto-Fetches Agent Data\n\nThe frontend **automatically fetches** all agents from the database whenever the marketplace page loads:\n\n**File: `client/src/pages/agent-shop.tsx`**\n```typescript\nconst { data: marketplace = [], isLoading } = useQuery<AgentCatalog[]>({\n  queryKey: [\"/api/agents/marketplace\"],\n});\n```\n\n**What happens:**\n1. React component mounts\n2. TanStack Query executes `GET /api/agents/marketplace`\n3. Backend returns all agents from `agent_catalog` table\n4. Frontend stores data in `marketplace` state\n5. UI automatically re-renders with new agents\n\n---\n\n### 4. UI Auto-Generates Agent Cards\n\nThe frontend uses a **generic card component** that dynamically renders based on agent metadata:\n\n**File: `client/src/pages/agent-shop.tsx` (lines 100-140)**\n```typescript\n{filteredAgents.map((agent) => {\n  const active = isAgentActive(agent.id);\n  return (\n    <Card key={agent.id} className=\"hover-elevate cursor-pointer\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          {/* Icon from database */}\n          <span className=\"text-2xl\">{agent.icon}</span>\n          \n          {/* Name from database */}\n          <span>{agent.name}</span>\n        </CardTitle>\n        \n        {/* Description from database */}\n        <CardDescription>{agent.description}</CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Category badge */}\n        <Badge variant=\"secondary\">{agent.category}</Badge>\n        \n        {/* Price from database */}\n        {agent.price > 0 ? (\n          <span>${agent.price}/mo</span>\n        ) : (\n          <span>Free</span>\n        )}\n      </CardContent>\n    </Card>\n  );\n})}\n```\n\n**Key Point:** The card component is **generic** and works for ANY agent. It doesn't have hardcoded agent-specific logic.\n\n---\n\n### 5. Dynamic Configuration Forms\n\nIf an agent has a `configSchema`, the system automatically generates a configuration form:\n\n**Example Agent with Config Schema:**\n```json\n{\n  \"id\": \"email-automation\",\n  \"name\": \"Email Automation\",\n  \"configSchema\": {\n    \"apiKey\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"API key for email service\"\n    },\n    \"sendingDomain\": {\n      \"type\": \"string\",\n      \"default\": \"example.com\",\n      \"description\": \"Domain for sending emails\"\n    },\n    \"maxDailyEmails\": {\n      \"type\": \"number\",\n      \"default\": 100,\n      \"min\": 1,\n      \"max\": 1000\n    }\n  }\n}\n```\n\n**Auto-Generated Form Fields:**\n- Text input for `apiKey` (required, with description)\n- Text input for `sendingDomain` (pre-filled with default)\n- Number input for `maxDailyEmails` (with min/max validation)\n\n---\n\n## Complete Registration Flow Diagram\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│ STEP 1: Register Agent (API or UI)                              │\n│                                                                   │\n│  POST /api/agents/register                                       │\n│  {                                                                │\n│    \"id\": \"my-agent\",                                             │\n│    \"name\": \"My Custom Agent\",                                    │\n│    \"description\": \"Does amazing things\",                         │\n│    \"category\": \"automation\"                                      │\n│  }                                                                │\n└────────────────────┬────────────────────────────────────────────┘\n                     │\n                     ▼\n┌─────────────────────────────────────────────────────────────────┐\n│ STEP 2: Backend Stores in Database                               │\n│                                                                   │\n│  INSERT INTO agent_catalog (id, name, description, ...)          │\n│  VALUES ('my-agent', 'My Custom Agent', ...)                     │\n└────────────────────┬────────────────────────────────────────────┘\n                     │\n                     ▼\n┌─────────────────────────────────────────────────────────────────┐\n│ STEP 3: Frontend Auto-Fetches (on page load)                     │\n│                                                                   │\n│  useQuery([\"/api/agents/marketplace\"])                           │\n│  → GET /api/agents/marketplace                                   │\n│  → Returns: [{ id: \"my-agent\", name: \"My Custom Agent\", ... }]  │\n└────────────────────┬────────────────────────────────────────────┘\n                     │\n                     ▼\n┌─────────────────────────────────────────────────────────────────┐\n│ STEP 4: UI Auto-Renders Agent Card                               │\n│                                                                   │\n│  ┌─────────────────────────────────────┐                        │\n│  │  🤖  My Custom Agent                 │                        │\n│  │  ────────────────────────            │                        │\n│  │  Does amazing things                 │                        │\n│  │                                       │                        │\n│  │  [automation]           Free         │                        │\n│  │  [Activate]                          │                        │\n│  └─────────────────────────────────────┘                        │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## What You DON'T Need to Create\n\nWhen adding a new agent, you **DO NOT** need to:\n\n- ❌ Create custom React components\n- ❌ Update routing configuration\n- ❌ Modify the marketplace page\n- ❌ Add hardcoded agent cards\n- ❌ Update navigation menus\n- ❌ Write custom UI code\n\n---\n\n## What You DO Need to Create\n\n### 1. Backend Implementation\n\nImplement the backend logic that executes when the agent runs:\n\n**File: `server/routes.ts`** (add this route)\n```typescript\napp.post(\"/api/agents/my-custom-agent\", requireAuth, async (req, res) => {\n  try {\n    const { input } = req.body;\n    \n    // Your agent logic here\n    const result = await yourCustomLogic(input);\n    \n    res.json({ success: true, output: result });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n```\n\n### 2. Python Agent (Optional)\n\nIf using Python microservices:\n\n**File: `python-agents/agents/my_agent.py`**\n```python\nfrom .base_agent import BaseAgent\n\nclass MyCustomAgent(BaseAgent):\n    async def execute(self, input_data):\n        # Your Python logic here\n        return {\n            \"success\": True,\n            \"output\": {\"result\": \"processed data\"}\n        }\n```\n\n**Register in `python-agents/main.py`:**\n```python\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"data_processor\": DataAgent,\n    \"my_custom_agent\": MyCustomAgent,  # Add this line\n}\n```\n\n---\n\n## Agent Activation Flow\n\nOnce an agent is registered, users can activate it:\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│ User clicks \"Activate\" on agent card                             │\n└────────────────────┬────────────────────────────────────────────┘\n                     │\n                     ▼\n┌─────────────────────────────────────────────────────────────────┐\n│ POST /api/agents/:id/activate                                    │\n│                                                                   │\n│  Creates entry in agent_subscriptions table:                     │\n│  {                                                                │\n│    orgId: \"org_123\",                                             │\n│    agentId: \"my-agent\",                                          │\n│    status: \"active\"                                              │\n│  }                                                                │\n└────────────────────┬────────────────────────────────────────────┘\n                     │\n                     ▼\n┌─────────────────────────────────────────────────────────────────┐\n│ Agent now appears in \"Active Agents\" list                        │\n│ User can configure and execute the agent                         │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Filtering & Search (Auto-Handled)\n\nThe UI automatically handles:\n\n### Search Functionality\n```typescript\nconst filteredAgents = marketplace.filter((agent) => {\n  const matchesSearch =\n    agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    agent.description.toLowerCase().includes(searchTerm.toLowerCase());\n  return matchesSearch;\n});\n```\n\n### Category Filtering\n```typescript\nconst matchesCategory =\n  selectedCategory === \"all\" || agent.category === selectedCategory;\n```\n\nBoth work **automatically** for any new agent you register!\n\n---\n\n## Example: Adding a New Agent (Complete Steps)\n\n### Step 1: Register via API\n```bash\ncurl -X POST http://0.0.0.0:5000/api/agents/register \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"invoice-generator\",\n    \"name\": \"Invoice Generator\",\n    \"type\": \"document-automation\",\n    \"description\": \"Auto-generate professional invoices from data\",\n    \"category\": \"automation\",\n    \"icon\": \"📄\",\n    \"backendEndpoint\": \"/api/agents/invoice-generator\",\n    \"price\": 0\n  }'\n```\n\n### Step 2: Implement Backend Logic\n**File: `server/routes.ts`**\n```typescript\napp.post(\"/api/agents/invoice-generator\", requireAuth, async (req, res) => {\n  try {\n    const { clientName, items, total } = req.body.input;\n    \n    // Generate invoice (example logic)\n    const invoice = {\n      invoiceNumber: Date.now(),\n      client: clientName,\n      items: items,\n      total: total,\n      date: new Date().toISOString()\n    };\n    \n    res.json({ success: true, output: invoice });\n  } catch (error) {\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n```\n\n### Step 3: Done!\n\nThe agent now:\n- ✅ Appears in the marketplace\n- ✅ Can be activated by users\n- ✅ Has a generated card with icon, name, description\n- ✅ Is searchable and filterable\n- ✅ Can be executed via the UI\n\n---\n\n## Key Takeaways\n\n1. **One Registration → Full UI**: Register once, UI generates automatically\n2. **Data-Driven Architecture**: All UI driven by database metadata\n3. **Zero Frontend Changes**: Add agents without touching React code\n4. **Dynamic Configuration**: Config forms auto-generate from schema\n5. **Fully Scalable**: System handles unlimited agents without code changes\n\n---\n\n## Technical Implementation Details\n\n### Frontend Components Involved\n\n**1. Agent Marketplace (`agent-shop.tsx`)**\n- Fetches all agents from API\n- Renders dynamic grid of agent cards\n- Handles search, filtering, activation\n\n**2. Agent Registration Form (`agent-registration-form.tsx`)**\n- Modal form for registering new agents\n- Validates input and submits to API\n- Updates marketplace automatically\n\n**3. Agent Detail Modal**\n- Shows full agent information\n- Displays configuration schema\n- Handles activation\n\n### Backend Endpoints\n\n**1. `POST /api/agents/register`**\n- Creates new agent in catalog\n- Validates required fields\n- Returns created agent object\n\n**2. `GET /api/agents/marketplace`**\n- Returns all agents from catalog\n- Available to all authenticated users\n\n**3. `POST /api/agents/:id/activate`**\n- Creates agent subscription\n- Links agent to organization\n- Enables agent for use\n\n---\n\n## Debugging & Troubleshooting\n\n### Agent Not Appearing?\n\n1. Check database:\n```sql\nSELECT * FROM agent_catalog WHERE id = 'your-agent-id';\n```\n\n2. Check API response:\n```bash\ncurl http://0.0.0.0:5000/api/agents/marketplace \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n```\n\n3. Check browser console for errors\n\n### Agent Card Not Rendering Correctly?\n\n- Verify all required fields are present (id, name, description, category)\n- Check icon is a valid emoji or text\n- Ensure category matches one of the predefined categories\n\n---\n\n**Last Updated:** 2024  \n**Version:** 1.0\n","size_bytes":16730},"client/src/components/agent-displays/ForecastingDisplay.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LineChart, TrendingUp, Target } from \"lucide-react\";\n\nexport interface ForecastingDisplayProps {\n  data: {\n    forecast?: Array<{\n      date: string;\n      predicted: number;\n      lower: number;\n      upper: number;\n    }>;\n    historical?: Array<{\n      date: string;\n      actual: number;\n    }>;\n    metrics?: {\n      predictedRevenue?: number;\n      growthRate?: number;\n      confidence?: number;\n    };\n    scenarios?: Array<{\n      name: string;\n      value: number;\n      probability: number;\n    }>;\n  };\n}\n\nexport function ForecastingDisplay({ data }: ForecastingDisplayProps) {\n  return (\n    <div className=\"space-y-4\">\n      {data.metrics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {data.metrics.predictedRevenue !== undefined && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Target className=\"w-4 h-4 text-primary\" />\n                  <CardTitle className=\"text-sm font-medium\">Predicted Revenue</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-predicted-revenue\">\n                  ${data.metrics.predictedRevenue.toLocaleString()}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          {data.metrics.growthRate !== undefined && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4 text-primary\" />\n                  <CardTitle className=\"text-sm font-medium\">Growth Rate</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-growth-rate\">\n                  {data.metrics.growthRate > 0 ? \"+\" : \"\"}\n                  {data.metrics.growthRate.toFixed(1)}%\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          {data.metrics.confidence !== undefined && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <LineChart className=\"w-4 h-4 text-primary\" />\n                  <CardTitle className=\"text-sm font-medium\">Confidence</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-confidence\">\n                  {(data.metrics.confidence * 100).toFixed(0)}%\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {data.forecast && data.forecast.length > 0 && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <LineChart className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Forecast Data</CardTitle>\n            </div>\n            <CardDescription>Predicted values with confidence intervals</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {data.forecast.map((point, index) => (\n                <div key={index} className=\"p-3 bg-muted rounded-md\" data-testid={`forecast-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">{point.date}</span>\n                    <Badge variant=\"secondary\">${point.predicted.toLocaleString()}</Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <span>Range:</span>\n                    <span>${point.lower.toLocaleString()}</span>\n                    <span>-</span>\n                    <span>${point.upper.toLocaleString()}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.scenarios && data.scenarios.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Scenario Analysis</CardTitle>\n            <CardDescription>Different outcome scenarios with probabilities</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {data.scenarios.map((scenario, index) => (\n                <div key={index} className=\"p-3 bg-muted rounded-md\" data-testid={`scenario-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">{scenario.name}</span>\n                    <Badge variant=\"outline\">${scenario.value.toLocaleString()}</Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">Probability:</span>\n                    <div className=\"flex-1 bg-background rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full\"\n                        style={{ width: `${scenario.probability * 100}%` }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium\">{(scenario.probability * 100).toFixed(0)}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5663},"client/src/components/agent-test-interface.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Play, Loader2, CheckCircle, XCircle } from \"lucide-react\";\nimport { GenericAgentDisplay } from \"./agent-displays/GenericAgentDisplay\";\nimport { NLPAgentDisplay } from \"./agent-displays/NLPAgentDisplay\";\nimport { DataAgentDisplay } from \"./agent-displays/DataAgentDisplay\";\nimport { LeadScoringDisplay } from \"./agent-displays/LeadScoringDisplay\";\nimport { ForecastingDisplay } from \"./agent-displays/ForecastingDisplay\";\n\ninterface AgentTestInterfaceProps {\n  moduleId: string;\n  moduleName: string;\n  moduleType?: string;\n}\n\nconst sampleInputs: Record<string, string> = {\n  nlp_processor: JSON.stringify({ text: \"This is a sample text for NLP processing\", task: \"summarize\" }, null, 2),\n  data_processor: JSON.stringify({ data: [{ id: 1, name: \"John\" }, { id: 2, name: \"Jane\" }], operation: \"filter\" }, null, 2),\n  \"lead-scoring-ai\": JSON.stringify({ email: \"test@example.com\", company: \"Test Corp\", industry: \"Technology\" }, null, 2),\n  default: JSON.stringify({ input: \"Your test data here\" }, null, 2),\n};\n\nexport function AgentTestInterface({ moduleId, moduleName, moduleType }: AgentTestInterfaceProps) {\n  const { toast } = useToast();\n  const [inputData, setInputData] = useState(sampleInputs[moduleId] || sampleInputs.default);\n  const [result, setResult] = useState<any>(null);\n\n  const testMutation = useMutation({\n    mutationFn: async (data: string) => {\n      const parsedData = JSON.parse(data);\n      return apiRequest(\"POST\", `/api/modules/${moduleId}/execute`, {\n        inputData: parsedData,\n      });\n    },\n    onSuccess: (data) => {\n      setResult(data);\n      if (data.status === \"completed\") {\n        toast({\n          title: \"Test successful\",\n          description: \"Agent execution completed\",\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Test failed\",\n          description: data.error || \"Agent execution failed\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Test failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleTest = () => {\n    try {\n      JSON.parse(inputData);\n      testMutation.mutate(inputData);\n    } catch (e) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid JSON\",\n        description: \"Please provide valid JSON input\",\n      });\n    }\n  };\n\n  const loadSampleData = () => {\n    setInputData(sampleInputs[moduleId] || sampleInputs.default);\n  };\n\n  const renderResult = () => {\n    if (!result) return null;\n\n    const output = result.output;\n    \n    // Use specific display components based on module type\n    if (moduleId.includes(\"nlp\") && output) {\n      return <NLPAgentDisplay data={output} />;\n    } else if (moduleId.includes(\"data\") && output) {\n      return <DataAgentDisplay data={output} />;\n    } else if (moduleId.includes(\"scoring\") && output) {\n      return <LeadScoringDisplay data={output} />;\n    } else if (moduleId.includes(\"forecast\") && output) {\n      return <ForecastingDisplay data={output} />;\n    }\n    \n    return <GenericAgentDisplay data={result} agentName={moduleName} />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Test {moduleName}</CardTitle>\n          <CardDescription>\n            Enter test input data and run the agent to see results\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <label className=\"text-sm font-medium\">Input Data (JSON)</label>\n              <Button variant=\"outline\" size=\"sm\" onClick={loadSampleData}>\n                Load Sample\n              </Button>\n            </div>\n            <Textarea\n              value={inputData}\n              onChange={(e) => setInputData(e.target.value)}\n              placeholder=\"Enter JSON input data\"\n              className=\"font-mono text-sm min-h-[200px]\"\n              data-testid=\"textarea-test-input\"\n            />\n          </div>\n\n          <Button\n            onClick={handleTest}\n            disabled={testMutation.isPending}\n            className=\"w-full\"\n            data-testid=\"button-run-test\"\n          >\n            {testMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Running Test...\n              </>\n            ) : (\n              <>\n                <Play className=\"w-4 h-4 mr-2\" />\n                Run Test\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Test Results</span>\n              <Badge variant={result.status === \"completed\" ? \"default\" : \"destructive\"}>\n                {result.status === \"completed\" ? (\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                ) : (\n                  <XCircle className=\"w-3 h-3 mr-1\" />\n                )}\n                {result.status}\n              </Badge>\n            </CardTitle>\n            {result.duration && (\n              <CardDescription>Completed in {result.duration}ms</CardDescription>\n            )}\n          </CardHeader>\n          <CardContent>\n            {renderResult()}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5887},"client/src/components/agent-config-modal.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Settings } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface AgentConfigModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  moduleId: string;\n  moduleName: string;\n  currentConfig?: any;\n}\n\nexport function AgentConfigModal({\n  isOpen,\n  onClose,\n  moduleId,\n  moduleName,\n  currentConfig,\n}: AgentConfigModalProps) {\n  const { toast } = useToast();\n  const [configJson, setConfigJson] = useState(\n    JSON.stringify(currentConfig || {}, null, 2)\n  );\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (config: string) => {\n      const parsedConfig = JSON.parse(config);\n      return apiRequest(\"PUT\", `/api/modules/${moduleId}/config`, {\n        config: parsedConfig,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/modules\"] });\n      toast({\n        title: \"Configuration saved\",\n        description: \"Agent configuration updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to save configuration\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleSave = () => {\n    try {\n      JSON.parse(configJson);\n      updateConfigMutation.mutate(configJson);\n    } catch (e) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid JSON\",\n        description: \"Please provide valid JSON configuration\",\n      });\n    }\n  };\n\n  const resetToDefault = () => {\n    setConfigJson(JSON.stringify({}, null, 2));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            Configure {moduleName}\n          </DialogTitle>\n          <DialogDescription>\n            Update the configuration settings for this agent\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"editor\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"editor\">JSON Editor</TabsTrigger>\n            <TabsTrigger value=\"help\">Help</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"editor\" className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Configuration (JSON)\n              </label>\n              <Textarea\n                value={configJson}\n                onChange={(e) => setConfigJson(e.target.value)}\n                placeholder=\"Enter configuration as JSON\"\n                className=\"font-mono text-sm min-h-[300px]\"\n                data-testid=\"textarea-config\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={resetToDefault}\n              data-testid=\"button-reset\"\n            >\n              Reset to Default\n            </Button>\n          </TabsContent>\n          \n          <TabsContent value=\"help\" className=\"space-y-4\">\n            <div className=\"bg-muted p-4 rounded-md\">\n              <h4 className=\"font-medium mb-2\">Configuration Guide</h4>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Each agent accepts different configuration options. Here are some common settings:\n              </p>\n              <ul className=\"text-sm space-y-2 list-disc list-inside text-muted-foreground\">\n                <li><strong>timeout</strong>: Maximum execution time in seconds</li>\n                <li><strong>retries</strong>: Number of retry attempts on failure</li>\n                <li><strong>batchSize</strong>: Number of items to process at once</li>\n                <li><strong>threshold</strong>: Minimum confidence score (0-1)</li>\n              </ul>\n            </div>\n            <div className=\"bg-muted p-4 rounded-md\">\n              <h4 className=\"font-medium mb-2\">Example Configuration</h4>\n              <pre className=\"text-xs font-mono\">\n{`{\n  \"timeout\": 30,\n  \"retries\": 3,\n  \"batchSize\": 100,\n  \"threshold\": 0.8\n}`}\n              </pre>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={updateConfigMutation.isPending}\n            data-testid=\"button-save\"\n          >\n            {updateConfigMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              \"Save Configuration\"\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5346},"client/src/components/agent-displays/GenericAgentDisplay.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface GenericAgentDisplayProps {\n  data: any;\n  agentName?: string;\n}\n\nexport function GenericAgentDisplay({ data, agentName }: GenericAgentDisplayProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>{agentName || \"Agent\"} Output</span>\n          <Badge variant=\"secondary\">Generic</Badge>\n        </CardTitle>\n        <CardDescription>Raw JSON output from the agent</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"bg-muted p-4 rounded-md overflow-x-auto\">\n          <pre className=\"text-sm font-mono\" data-testid=\"pre-agent-output\">\n            {JSON.stringify(data, null, 2)}\n          </pre>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":920},"docs/AGENT_DEVELOPMENT.md":{"content":"\n# Agent Development Guide\n\n## Overview\n\nThis document outlines the agent system architecture, what's currently built, what remains to be built, and how to easily add new agents to the platform.\n\n---\n\n## 📋 Current Status\n\n### ✅ What's Built\n\n1. **Python Agent Infrastructure**\n   - Base agent class (`python-agents/agents/base_agent.py`)\n   - NLP Agent (`python-agents/agents/nlp_agent.py`)\n   - Data Agent (`python-agents/agents/data_agent.py`)\n   - FastAPI server (`python-agents/main.py`)\n   - Database connectivity with multi-tenant isolation\n   - Execution logging system\n\n2. **Backend API Integration**\n   - Python agent client (`server/python-agent-client.ts`)\n   - Module execution endpoints\n   - Health check endpoints\n   - Module listing endpoints\n\n3. **Database Schema**\n   - `modules` table for agent registry\n   - `module_executions` table for execution history\n   - Multi-tenant isolation via `org_id`\n\n4. **Frontend Pages**\n   - Basic agents page (`client/src/pages/agents.tsx`)\n   - Modules page placeholder (`client/src/pages/modules.tsx`)\n\n---\n\n## 🚧 What Remains to Build\n\n### 1. Agent Marketplace/Shop Interface\n\n**Location**: `client/src/pages/agent-shop.tsx` (needs to be created)\n\n**Required Features**:\n- Browse available agents by category\n- Search and filter agents\n- View agent details (description, pricing, features)\n- One-click agent activation\n- Show which agents are already active\n- Agent configuration modal\n\n**Backend Requirements**:\n- `GET /api/agents/marketplace` - List all available agents\n- `POST /api/agents/activate` - Activate an agent for organization\n- `GET /api/agents/active` - List organization's active agents\n\n### 2. Active Agents Dashboard\n\n**Location**: `client/src/pages/modules.tsx` (needs enhancement)\n\n**Required Features**:\n- Grid/list view of active agents\n- Real-time status indicators (running, idle, error)\n- Recent execution history per agent\n- Quick execution buttons\n- Configuration access\n- Performance metrics (execution count, success rate, avg duration)\n\n### 3. Agent-Specific Display Components\n\n**Location**: `client/src/components/agent-displays/` (needs to be created)\n\n**Required Components**:\n- `NLPAgentDisplay.tsx` - Show NLP processing results\n- `DataAgentDisplay.tsx` - Show data transformation results\n- `LeadScoringDisplay.tsx` - Show lead scores and insights\n- `ChatbotDisplay.tsx` - Show conversation history\n- `ForecastingDisplay.tsx` - Show prediction charts\n- Generic `AgentResultDisplay.tsx` for fallback\n\n### 4. Agent Activation & Testing System\n\n**Backend Endpoints Needed**:\n- `POST /api/modules/:id/test` - Test agent with sample data\n- `GET /api/modules/:id/executions` - Get execution history\n- `GET /api/modules/:id/stats` - Get agent statistics\n\n**Frontend Components Needed**:\n- Agent test interface with sample inputs\n- Execution result viewer\n- Error handling and debugging tools\n\n---\n\n## 🔧 How to Add a New Agent (Easy Guide)\n\n### Step 1: Create Python Agent Class\n\nCreate a new file: `python-agents/agents/your_agent_name.py`\n\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Any, Dict\n\nclass YourAgentName(BaseAgent):\n    \"\"\"Description of what your agent does\"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute your agent's main task\n        \n        Args:\n            input_data: Dict with required input fields\n            \n        Returns:\n            Dict with 'success' boolean and 'output' data\n        \"\"\"\n        try:\n            # 1. Extract input parameters\n            param1 = input_data.get(\"param1\")\n            param2 = input_data.get(\"param2\", \"default_value\")\n            \n            # 2. Validate inputs\n            if not param1:\n                return {\n                    \"success\": False,\n                    \"error\": \"param1 is required\"\n                }\n            \n            # 3. Perform your agent's logic here\n            result = self._process_data(param1, param2)\n            \n            # 4. Return success response\n            return {\n                \"success\": True,\n                \"output\": {\n                    \"result\": result,\n                    \"metadata\": {\n                        \"param1\": param1,\n                        \"param2\": param2\n                    }\n                }\n            }\n            \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n    \n    def _process_data(self, param1, param2):\n        \"\"\"Your internal processing logic\"\"\"\n        # Implement your logic here\n        return f\"Processed: {param1} with {param2}\"\n```\n\n### Step 2: Register Agent in FastAPI Server\n\nEdit `python-agents/main.py` and add your agent:\n\n```python\n# At the top, import your agent\nfrom agents.your_agent_name import YourAgentName\n\n# In the MODULE_REGISTRY dictionary, add:\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"data_processor\": DataAgent,\n    \"your_agent_id\": YourAgentName,  # Add this line\n}\n```\n\n### Step 3: Add Agent Metadata to Database\n\nCreate a seed file or add to `server/seed-agents.ts`:\n\n```typescript\n{\n  id: \"your_agent_id\",\n  name: \"Your Agent Name\",\n  type: \"agent-category\",\n  description: \"Short description\",\n  longDescription: \"Detailed description of capabilities\",\n  icon: \"IconName\", // Lucide icon name\n  category: \"category-name\",\n  backendEndpoint: \"/api/agents/your-agent\",\n  price: 0,\n  isActive: true,\n}\n```\n\n### Step 4: Test Your Agent\n\n**Via API**:\n```bash\ncurl -X POST http://0.0.0.0:8000/execute \\\n  -H \"X-API-Key: your_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"module_id\": \"your_agent_id\",\n    \"org_id\": \"org_123\",\n    \"input_data\": {\n      \"param1\": \"test_value\",\n      \"param2\": \"optional_value\"\n    }\n  }'\n```\n\n**Via Frontend**:\nOnce the shop interface is built, you can test through the UI.\n\n---\n\n## 📊 Agent Categories\n\nOrganize agents by category for better discovery:\n\n1. **lead-generation** - Form collection, web scraping, data capture\n2. **customer-engagement** - Chatbots, email automation, SMS\n3. **lead-qualification** - Scoring, validation, enrichment\n4. **analytics** - Forecasting, reporting, trend analysis\n5. **marketing** - Campaign automation, A/B testing, personalization\n6. **data-processing** - Transformation, cleaning, enrichment\n7. **automation** - Workflow orchestration, task automation\n\n---\n\n## 🧪 Testing Checklist for New Agents\n\nBefore deploying a new agent, verify:\n\n- [ ] Agent executes successfully with valid input\n- [ ] Agent handles missing/invalid input gracefully\n- [ ] Agent respects `org_id` for multi-tenant isolation\n- [ ] Execution is logged to `module_executions` table\n- [ ] Error messages are clear and actionable\n- [ ] Response format matches expected schema\n- [ ] Agent is registered in `MODULE_REGISTRY`\n- [ ] Agent metadata is in database\n- [ ] API endpoint returns expected results\n- [ ] Frontend can display agent results\n\n---\n\n## 🔐 Security Requirements\n\nEvery agent MUST:\n\n1. **Validate org_id**: Always filter database queries by `org_id`\n2. **Sanitize inputs**: Never trust user input directly\n3. **Handle secrets**: Use environment variables for API keys\n4. **Log executions**: Track all agent runs for auditing\n5. **Error handling**: Never expose sensitive error details to frontend\n\n---\n\n## 📈 Performance Best Practices\n\n1. **Database Connections**: Reuse connections, don't create new ones per request\n2. **External API Calls**: Implement retry logic and timeout handling\n3. **Large Data Sets**: Use pagination and streaming when possible\n4. **Caching**: Cache frequently accessed data (e.g., enrichment lookups)\n5. **Async Operations**: Use `async/await` for non-blocking operations\n\n---\n\n## 🎯 Quick Reference: Agent File Locations\n\n```\npython-agents/\n├── agents/\n│   ├── base_agent.py          # Base class (inherit from this)\n│   ├── nlp_agent.py           # Example: NLP processing\n│   ├── data_agent.py          # Example: Data transformation\n│   └── your_agent.py          # Your new agent\n├── main.py                     # FastAPI server (register here)\n└── requirements.txt            # Add dependencies here\n\nserver/\n├── python-agent-client.ts      # Node.js ↔ Python communication\n├── routes.ts                   # Add API endpoints here\n└── seed-agents.ts              # Agent metadata\n\nclient/src/\n├── pages/\n│   ├── agent-shop.tsx         # Browse & activate agents (TO BUILD)\n│   ├── modules.tsx            # Active agents dashboard (TO ENHANCE)\n│   └── agents.tsx             # Current basic agent list\n└── components/\n    └── agent-displays/         # Agent-specific UI components (TO BUILD)\n```\n\n---\n\n## 🚀 Next Steps\n\n1. **Build Agent Shop** - Allow users to browse and activate agents\n2. **Enhance Modules Page** - Show active agents with real-time status\n3. **Create Display Components** - Agent-specific result visualization\n4. **Add Testing UI** - In-app agent testing with sample data\n5. **Implement Agent Marketplace** - Public/private agent sharing\n\n---\n\n**Last Updated**: 2024\n**Version**: 1.0\n","size_bytes":9200},"client/src/components/agent-displays/LeadScoringDisplay.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, TrendingUp, User, Activity, Flame, ThumbsUp, Snowflake } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport interface LeadScoringDisplayProps {\n  data: {\n    leadScore: number;\n    scoreBreakdown?: {\n      demographic?: number;\n      behavioral?: number;\n      engagement?: number;\n    };\n    recommendation?: \"hot\" | \"warm\" | \"cold\" | \"nurture\";\n    historicalScores?: Array<{\n      date: string;\n      score: number;\n    }>;\n    factors?: Array<{\n      name: string;\n      impact: \"positive\" | \"negative\" | \"neutral\";\n      value: string;\n    }>;\n  };\n}\n\nexport function LeadScoringDisplay({ data }: LeadScoringDisplayProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 75) return \"text-green-600\";\n    if (score >= 50) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreBgColor = (score: number) => {\n    if (score >= 75) return \"bg-green-100\";\n    if (score >= 50) return \"bg-yellow-100\";\n    return \"bg-red-100\";\n  };\n\n  const getRecommendationVariant = (rec: string) => {\n    switch (rec) {\n      case \"hot\":\n        return \"default\";\n      case \"warm\":\n        return \"secondary\";\n      case \"cold\":\n        return \"outline\";\n      case \"nurture\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5 text-primary\" />\n            <CardTitle>Lead Score</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <div className={`text-5xl font-bold ${getScoreColor(data.leadScore)}`} data-testid=\"text-lead-score\">\n                {data.leadScore}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">out of 100</div>\n            </div>\n            <div className={`w-24 h-24 rounded-full ${getScoreBgColor(data.leadScore)} flex items-center justify-center`}>\n              {data.leadScore >= 75 ? (\n                <Flame className={`w-12 h-12 ${getScoreColor(data.leadScore)}`} />\n              ) : data.leadScore >= 50 ? (\n                <ThumbsUp className={`w-12 h-12 ${getScoreColor(data.leadScore)}`} />\n              ) : (\n                <Snowflake className={`w-12 h-12 ${getScoreColor(data.leadScore)}`} />\n              )}\n            </div>\n          </div>\n          {data.recommendation && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Recommendation:</span>\n              <Badge variant={getRecommendationVariant(data.recommendation)} data-testid=\"badge-recommendation\">\n                {data.recommendation.toUpperCase()}\n              </Badge>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {data.scoreBreakdown && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Score Breakdown</CardTitle>\n            </div>\n            <CardDescription>Contribution by category</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {data.scoreBreakdown.demographic !== undefined && (\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">Demographic Score</span>\n                  </div>\n                  <span className=\"text-sm font-bold\">{data.scoreBreakdown.demographic}%</span>\n                </div>\n                <Progress value={data.scoreBreakdown.demographic} className=\"h-2\" data-testid=\"progress-demographic\" />\n              </div>\n            )}\n            {data.scoreBreakdown.behavioral !== undefined && (\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Activity className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">Behavioral Score</span>\n                  </div>\n                  <span className=\"text-sm font-bold\">{data.scoreBreakdown.behavioral}%</span>\n                </div>\n                <Progress value={data.scoreBreakdown.behavioral} className=\"h-2\" data-testid=\"progress-behavioral\" />\n              </div>\n            )}\n            {data.scoreBreakdown.engagement !== undefined && (\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">Engagement Score</span>\n                  </div>\n                  <span className=\"text-sm font-bold\">{data.scoreBreakdown.engagement}%</span>\n                </div>\n                <Progress value={data.scoreBreakdown.engagement} className=\"h-2\" data-testid=\"progress-engagement\" />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {data.factors && data.factors.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Contributing Factors</CardTitle>\n            <CardDescription>{data.factors.length} factors analyzed</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {data.factors.map((factor, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded-md\" data-testid={`factor-${index}`}>\n                  <span className=\"text-sm font-medium\">{factor.name}</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm text-muted-foreground\">{factor.value}</span>\n                    <Badge\n                      variant={\n                        factor.impact === \"positive\"\n                          ? \"default\"\n                          : factor.impact === \"negative\"\n                            ? \"destructive\"\n                            : \"secondary\"\n                      }\n                      className=\"text-xs\"\n                    >\n                      {factor.impact === \"positive\" ? \"+\" : factor.impact === \"negative\" ? \"-\" : \"=\"}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":6881},"client/src/components/agent-displays/NLPAgentDisplay.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, TrendingUp, Tag } from \"lucide-react\";\n\nexport interface NLPAgentDisplayProps {\n  data: {\n    originalText: string;\n    processedOutput?: string;\n    sentiment?: {\n      score: number;\n      label: \"positive\" | \"negative\" | \"neutral\";\n    };\n    entities?: Array<{\n      text: string;\n      type: string;\n      confidence: number;\n    }>;\n    summary?: string;\n    confidence?: number;\n  };\n}\n\nexport function NLPAgentDisplay({ data }: NLPAgentDisplayProps) {\n  const getSentimentColor = (label: string) => {\n    switch (label) {\n      case \"positive\":\n        return \"bg-green-100 text-green-800\";\n      case \"negative\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <MessageSquare className=\"w-5 h-5 text-primary\" />\n            <CardTitle>Original Text</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\" data-testid=\"text-original\">\n            {data.originalText}\n          </p>\n        </CardContent>\n      </Card>\n\n      {data.sentiment && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Sentiment Analysis</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4\">\n              <Badge className={getSentimentColor(data.sentiment.label)} data-testid=\"badge-sentiment\">\n                {data.sentiment.label}\n              </Badge>\n              <div className=\"flex-1\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Confidence</div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div\n                    className=\"bg-primary h-2 rounded-full\"\n                    style={{ width: `${data.sentiment.score * 100}%` }}\n                    data-testid=\"progress-sentiment-score\"\n                  />\n                </div>\n                <div className=\"text-sm font-medium mt-1\">{(data.sentiment.score * 100).toFixed(1)}%</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.entities && data.entities.length > 0 && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Tag className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Extracted Entities</CardTitle>\n            </div>\n            <CardDescription>{data.entities.length} entities detected</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {data.entities.map((entity, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded-md\" data-testid={`entity-${index}`}>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\">{entity.type}</Badge>\n                    <span className=\"font-medium\">{entity.text}</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {(entity.confidence * 100).toFixed(0)}%\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.summary && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm\" data-testid=\"text-summary\">\n              {data.summary}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.processedOutput && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Processed Output</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm whitespace-pre-wrap\" data-testid=\"text-processed\">\n              {data.processedOutput}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4387},"docs/DEVELOPER_AGENT_GUIDE.md":{"content":"\n# Developer Guide: Adding Agents to Abetworks\n\n## Overview\n\nThis guide explains how to add new AI agents to the Abetworks platform using code. It covers the complete process from creating the Python agent to registering it in the system.\n\n---\nhttps://marketplace.kore.ai/\n\n## Quick Start: Adding a New Agent in 5 Steps\n\n### Step 1: Create Python Agent Class\n\nCreate a new file in `python-agents/agents/` directory.\n\n**Example: `python-agents/agents/email_agent.py`**\n\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Any, Dict\nimport os\n\nclass EmailAgent(BaseAgent):\n    \"\"\"\n    Email automation agent for sending and processing emails\n    \"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute email automation task\n        \n        Args:\n            input_data: Dict containing:\n                - action: 'send' | 'validate' | 'template'\n                - recipient: email address (for send)\n                - subject: email subject (for send)\n                - body: email body (for send)\n                - template_id: template identifier (for template)\n                \n        Returns:\n            Dict with success status and output data\n        \"\"\"\n        try:\n            action = input_data.get(\"action\")\n            \n            if not action:\n                return {\n                    \"success\": False,\n                    \"error\": \"Action is required (send, validate, or template)\"\n                }\n            \n            if action == \"send\":\n                return await self._send_email(input_data)\n            elif action == \"validate\":\n                return await self._validate_email(input_data)\n            elif action == \"template\":\n                return await self._generate_template(input_data)\n            else:\n                return {\n                    \"success\": False,\n                    \"error\": f\"Unknown action: {action}\"\n                }\n                \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n    \n    async def _send_email(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Send an email\"\"\"\n        recipient = data.get(\"recipient\")\n        subject = data.get(\"subject\")\n        body = data.get(\"body\")\n        \n        if not recipient or not subject or not body:\n            return {\n                \"success\": False,\n                \"error\": \"recipient, subject, and body are required\"\n            }\n        \n        # TODO: Implement actual email sending logic\n        # For now, return success simulation\n        \n        return {\n            \"success\": True,\n            \"output\": {\n                \"message\": f\"Email sent to {recipient}\",\n                \"recipient\": recipient,\n                \"subject\": subject,\n                \"sent_at\": \"2024-01-15T10:30:00Z\"\n            }\n        }\n    \n    async def _validate_email(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Validate email address format\"\"\"\n        email = data.get(\"email\")\n        \n        if not email:\n            return {\n                \"success\": False,\n                \"error\": \"email is required\"\n            }\n        \n        # Basic email validation\n        import re\n        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n        is_valid = bool(re.match(pattern, email))\n        \n        return {\n            \"success\": True,\n            \"output\": {\n                \"email\": email,\n                \"is_valid\": is_valid,\n                \"validation_message\": \"Valid email format\" if is_valid else \"Invalid email format\"\n            }\n        }\n    \n    async def _generate_template(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Generate email template\"\"\"\n        template_id = data.get(\"template_id\", \"welcome\")\n        name = data.get(\"name\", \"User\")\n        \n        templates = {\n            \"welcome\": {\n                \"subject\": f\"Welcome to Abetworks, {name}!\",\n                \"body\": f\"Hi {name},\\n\\nWelcome to Abetworks! We're excited to have you on board.\\n\\nBest regards,\\nThe Abetworks Team\"\n            },\n            \"reminder\": {\n                \"subject\": f\"Reminder: Task pending\",\n                \"body\": f\"Hi {name},\\n\\nThis is a reminder about your pending task.\\n\\nBest regards,\\nThe Abetworks Team\"\n            }\n        }\n        \n        template = templates.get(template_id, templates[\"welcome\"])\n        \n        return {\n            \"success\": True,\n            \"output\": {\n                \"template_id\": template_id,\n                \"subject\": template[\"subject\"],\n                \"body\": template[\"body\"]\n            }\n        }\n```\n\n### Step 2: Register Agent in Python Service\n\nEdit `python-agents/main.py` to import and register your agent:\n\n```python\n# Add import at the top\nfrom agents.email_agent import EmailAgent\n\n# Add to MODULE_REGISTRY\nMODULE_REGISTRY = {\n    \"nlp_processor\": NLPAgent,\n    \"data_processor\": DataAgent,\n    \"email_agent\": EmailAgent,  # Add this line\n}\n```\n\n### Step 3: Register Agent via API\n\nUse the registration endpoint to add the agent to the catalog:\n\n```bash\ncurl -X POST http://0.0.0.0:5000/api/agents/register \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"email-automation\",\n    \"name\": \"Email Automation\",\n    \"type\": \"communication\",\n    \"description\": \"Automate email sending, validation, and template generation\",\n    \"longDescription\": \"Complete email automation solution with sending, validation, and template features. Perfect for marketing campaigns and customer communication.\",\n    \"icon\": \"📧\",\n    \"category\": \"communication\",\n    \"backendEndpoint\": \"/api/agents/email-automation\",\n    \"price\": 0,\n    \"configSchema\": {\n      \"smtpServer\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"SMTP server address\"\n      },\n      \"smtpPort\": {\n        \"type\": \"number\",\n        \"default\": 587,\n        \"description\": \"SMTP port number\"\n      }\n    }\n  }'\n```\n\n### Step 4: Add Backend Endpoint (Optional)\n\nIf you need custom backend logic, add it to `server/routes.ts`:\n\n```typescript\n// Add this endpoint\napp.post(\"/api/agents/email-automation\", requireAuth, async (req: AuthRequest, res) => {\n  try {\n    const { action, recipient, subject, body, email, template_id, name } = req.body;\n    \n    // Get organization's API key\n    const apiKeys = await storage.getAllApiKeys(req.user!.orgId);\n    if (!apiKeys.length) {\n      return res.status(400).json({ \n        message: \"No API key configured\" \n      });\n    }\n    \n    // Call Python agent\n    const client = new PythonAgentClient(apiKeys[0].key);\n    const result = await client.executeModule(\n      \"email_agent\",\n      req.user!.orgId,\n      { action, recipient, subject, body, email, template_id, name }\n    );\n    \n    res.json(result);\n  } catch (error: any) {\n    res.status(500).json({ \n      message: error.message || \"Email agent execution failed\" \n    });\n  }\n});\n```\n\n### Step 5: Test Your Agent\n\n**Via API:**\n```bash\ncurl -X POST http://0.0.0.0:5000/api/modules/email_agent/execute \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"inputData\": {\n      \"action\": \"send\",\n      \"recipient\": \"user@example.com\",\n      \"subject\": \"Test Email\",\n      \"body\": \"This is a test email from Abetworks\"\n    }\n  }'\n```\n\n**Via Frontend:**\n1. Go to **Agent Marketplace** page\n2. Find \"Email Automation\" agent\n3. Click **Activate**\n4. Test the agent through the UI\n\n---\n\n## Advanced Examples\n\n### Example 1: Database-Connected Agent\n\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Any, Dict\n\nclass CustomerAgent(BaseAgent):\n    \"\"\"\n    Customer data management agent with database access\n    \"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute customer management task\n        \"\"\"\n        try:\n            action = input_data.get(\"action\")\n            \n            if action == \"get_customers\":\n                return await self._get_customers()\n            elif action == \"add_customer\":\n                return await self._add_customer(input_data)\n            else:\n                return {\n                    \"success\": False,\n                    \"error\": f\"Unknown action: {action}\"\n                }\n                \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n    \n    async def _get_customers(self) -> Dict[str, Any]:\n        \"\"\"Get all customers for organization\"\"\"\n        try:\n            conn = self.connect_db()\n            cursor = conn.cursor()\n            \n            # IMPORTANT: Always filter by org_id for multi-tenant isolation\n            cursor.execute(\n                \"\"\"\n                SELECT id, name, email, created_at \n                FROM customers \n                WHERE org_id = %s\n                ORDER BY created_at DESC\n                LIMIT 100\n                \"\"\",\n                (self.org_id,)\n            )\n            \n            customers = []\n            for row in cursor.fetchall():\n                customers.append({\n                    \"id\": row[0],\n                    \"name\": row[1],\n                    \"email\": row[2],\n                    \"created_at\": row[3].isoformat()\n                })\n            \n            cursor.close()\n            \n            return {\n                \"success\": True,\n                \"output\": {\n                    \"customers\": customers,\n                    \"count\": len(customers)\n                }\n            }\n            \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": f\"Database error: {str(e)}\"\n            }\n    \n    async def _add_customer(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add new customer\"\"\"\n        name = data.get(\"name\")\n        email = data.get(\"email\")\n        \n        if not name or not email:\n            return {\n                \"success\": False,\n                \"error\": \"name and email are required\"\n            }\n        \n        try:\n            conn = self.connect_db()\n            cursor = conn.cursor()\n            \n            cursor.execute(\n                \"\"\"\n                INSERT INTO customers (name, email, org_id)\n                VALUES (%s, %s, %s)\n                RETURNING id\n                \"\"\",\n                (name, email, self.org_id)\n            )\n            \n            customer_id = cursor.fetchone()[0]\n            conn.commit()\n            cursor.close()\n            \n            return {\n                \"success\": True,\n                \"output\": {\n                    \"customer_id\": customer_id,\n                    \"name\": name,\n                    \"email\": email\n                }\n            }\n            \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": f\"Failed to add customer: {str(e)}\"\n            }\n```\n\n### Example 2: Agent with External API Integration\n\n```python\nfrom .base_agent import BaseAgent\nfrom typing import Any, Dict\nimport os\nimport requests\n\nclass WeatherAgent(BaseAgent):\n    \"\"\"\n    Weather information agent using external API\n    \"\"\"\n    \n    def __init__(self, org_id: str, config: Dict[str, Any] = None):\n        super().__init__(org_id, config)\n        self.api_key = os.getenv(\"WEATHER_API_KEY\")\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Get weather information for a location\n        \n        Args:\n            input_data: Dict containing:\n                - city: City name\n                - country: Country code (optional)\n        \"\"\"\n        try:\n            city = input_data.get(\"city\")\n            \n            if not city:\n                return {\n                    \"success\": False,\n                    \"error\": \"city is required\"\n                }\n            \n            if not self.api_key:\n                return {\n                    \"success\": False,\n                    \"error\": \"Weather API key not configured\"\n                }\n            \n            # Call external weather API\n            country = input_data.get(\"country\", \"\")\n            location = f\"{city},{country}\" if country else city\n            \n            url = f\"http://api.openweathermap.org/data/2.5/weather\"\n            params = {\n                \"q\": location,\n                \"appid\": self.api_key,\n                \"units\": \"metric\"\n            }\n            \n            response = requests.get(url, params=params, timeout=10)\n            \n            if response.status_code == 200:\n                data = response.json()\n                \n                return {\n                    \"success\": True,\n                    \"output\": {\n                        \"city\": data[\"name\"],\n                        \"temperature\": data[\"main\"][\"temp\"],\n                        \"feels_like\": data[\"main\"][\"feels_like\"],\n                        \"humidity\": data[\"main\"][\"humidity\"],\n                        \"description\": data[\"weather\"][0][\"description\"],\n                        \"wind_speed\": data[\"wind\"][\"speed\"]\n                    }\n                }\n            else:\n                return {\n                    \"success\": False,\n                    \"error\": f\"Weather API error: {response.status_code}\"\n                }\n                \n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n```\n\n---\n\n## Agent Configuration Schema\n\nWhen registering agents, you can define a `configSchema` to allow users to customize agent behavior:\n\n```json\n{\n  \"configSchema\": {\n    \"apiKey\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"API key for external service\"\n    },\n    \"maxRetries\": {\n      \"type\": \"number\",\n      \"default\": 3,\n      \"min\": 1,\n      \"max\": 10,\n      \"description\": \"Maximum number of retry attempts\"\n    },\n    \"enableLogging\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"description\": \"Enable detailed logging\"\n    },\n    \"region\": {\n      \"type\": \"string\",\n      \"enum\": [\"us-east\", \"us-west\", \"eu-central\"],\n      \"default\": \"us-east\",\n      \"description\": \"Service region\"\n    }\n  }\n}\n```\n\n---\n\n## Best Practices\n\n### 1. Multi-Tenant Isolation\n\n**Always filter by `org_id` in database queries:**\n\n```python\n# CORRECT ✅\ncursor.execute(\n    \"SELECT * FROM tasks WHERE org_id = %s AND status = %s\",\n    (self.org_id, status)\n)\n\n# WRONG ❌ - Missing org_id filter\ncursor.execute(\n    \"SELECT * FROM tasks WHERE status = %s\",\n    (status,)\n)\n```\n\n### 2. Error Handling\n\n**Return structured error responses:**\n\n```python\ntry:\n    # Your logic here\n    result = perform_operation()\n    return {\n        \"success\": True,\n        \"output\": result\n    }\nexcept ValueError as e:\n    return {\n        \"success\": False,\n        \"error\": f\"Invalid input: {str(e)}\"\n    }\nexcept Exception as e:\n    return {\n        \"success\": False,\n        \"error\": f\"Unexpected error: {str(e)}\"\n    }\n```\n\n### 3. Input Validation\n\n**Validate all inputs before processing:**\n\n```python\nasync def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n    # Required fields\n    required = [\"field1\", \"field2\"]\n    missing = [f for f in required if f not in input_data]\n    \n    if missing:\n        return {\n            \"success\": False,\n            \"error\": f\"Missing required fields: {', '.join(missing)}\"\n        }\n    \n    # Type validation\n    if not isinstance(input_data.get(\"count\"), int):\n        return {\n            \"success\": False,\n            \"error\": \"count must be an integer\"\n        }\n    \n    # Process validated input\n    # ...\n```\n\n### 4. Execution Logging\n\n**Log all agent executions:**\n\n```python\nasync def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n    try:\n        result = await self._process(input_data)\n        \n        # Log successful execution\n        await self.log_execution(\n            module_id=\"my_agent\",\n            task_id=input_data.get(\"task_id\"),\n            status=\"completed\",\n            output=result\n        )\n        \n        return result\n        \n    except Exception as e:\n        # Log failed execution\n        await self.log_execution(\n            module_id=\"my_agent\",\n            task_id=input_data.get(\"task_id\"),\n            status=\"failed\",\n            error=str(e)\n        )\n        \n        return {\n            \"success\": False,\n            \"error\": str(e)\n        }\n```\n\n---\n\n## Testing Checklist\n\nBefore deploying your agent, verify:\n\n- [ ] Agent executes successfully with valid input\n- [ ] Agent handles missing/invalid input gracefully\n- [ ] Agent respects `org_id` for multi-tenant isolation\n- [ ] Execution is logged to database\n- [ ] Error messages are clear and actionable\n- [ ] Response format is consistent\n- [ ] Agent is registered in `MODULE_REGISTRY`\n- [ ] Agent metadata is in catalog\n- [ ] External API calls have timeout handling\n- [ ] Database connections are properly closed\n\n---\n\n## Troubleshooting\n\n### Agent Not Found\n\n**Problem:** `Module 'my_agent' not found`\n\n**Solution:**\n1. Check agent is imported in `python-agents/main.py`\n2. Verify agent is in `MODULE_REGISTRY`\n3. Restart Python service\n\n### Database Connection Errors\n\n**Problem:** `psycopg2.OperationalError: connection failed`\n\n**Solution:**\n1. Check `DATABASE_URL` in `python-agents/.env`\n2. Verify database is accessible\n3. Check connection string format\n\n### Multi-Tenant Violations\n\n**Problem:** User sees data from other organizations\n\n**Solution:**\n1. Add `org_id` filter to ALL database queries\n2. Use `self.validate_org_access()` method\n3. Test with multiple organizations\n\n---\n\n## File Locations Reference\n\n```\npython-agents/\n├── agents/\n│   ├── __init__.py\n│   ├── base_agent.py        # Base class to inherit from\n│   ├── your_agent.py        # Your new agent here\n│   └── ...\n├── main.py                   # Register agent in MODULE_REGISTRY\n├── requirements.txt          # Add dependencies here\n└── .env                      # Configuration\n\nserver/\n├── routes.ts                 # Add custom endpoints here\n└── python-agent-client.ts    # Node.js ↔ Python communication\n```\n\n---\n\n## Next Steps\n\n1. Create your agent class in `python-agents/agents/`\n2. Register it in `python-agents/main.py`\n3. Use the API to register agent metadata\n4. Test via API or frontend\n5. Deploy and monitor\n\nFor more information, see:\n- [AGENT_DEVELOPMENT.md](./AGENT_DEVELOPMENT.md)\n- [AGENT_API_INTEGRATION.md](./AGENT_API_INTEGRATION.md)\n- [API.md](./API.md)\n\n---\n\n**Version:** 1.0  \n**Last Updated:** 2024\n","size_bytes":18784},"client/src/pages/agent-shop.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, CheckCircle, Store, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { AgentCatalog } from \"@shared/schema\";\nimport { AgentRegistrationForm } from \"@/components/agent-registration-form\";\n\nconst CATEGORY_OPTIONS = [\n  { value: \"all\", label: \"All Categories\" },\n  { value: \"lead-generation\", label: \"Lead Generation\" },\n  { value: \"analytics\", label: \"Analytics\" },\n  { value: \"automation\", label: \"Automation\" },\n  { value: \"communication\", label: \"Communication\" },\n  { value: \"data-processing\", label: \"Data Processing\" },\n  { value: \"forecasting\", label: \"Forecasting\" },\n];\n\nexport default function AgentShop() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedAgent, setSelectedAgent] = useState<AgentCatalog | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n\n  const { data: marketplace = [], isLoading: isLoadingMarketplace } = useQuery<AgentCatalog[]>({\n    queryKey: [\"/api/agents/marketplace\"],\n  });\n\n  const { data: activeAgents = [] } = useQuery<AgentCatalog[]>({\n    queryKey: [\"/api/agents/active\"],\n  });\n\n  const seedMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/agents/seed\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents/marketplace\"] });\n      toast({\n        title: \"Agents Seeded\",\n        description: \"Default agents have been added to the marketplace.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Seeding Failed\",\n        description: error.message || \"Failed to seed agents.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const activateMutation = useMutation({\n    mutationFn: async (agentId: string) => {\n      return apiRequest(\"POST\", `/api/agents/${agentId}/activate`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents/active\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents/marketplace\"] });\n      toast({\n        title: \"Agent Activated\",\n        description: \"The agent has been successfully activated for your organization.\",\n      });\n      setIsDetailModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Activation Failed\",\n        description: error.message || \"Failed to activate agent.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredAgents = marketplace.filter((agent) => {\n    const matchesSearch =\n      agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      agent.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory =\n      selectedCategory === \"all\" || agent.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const isAgentActive = (agentId: string) => {\n    return activeAgents.some((agent) => agent.id === agentId);\n  };\n\n  const handleAgentClick = (agent: AgentCatalog) => {\n    setSelectedAgent(agent);\n    setIsDetailModalOpen(true);\n  };\n\n  const handleActivate = () => {\n    if (selectedAgent) {\n      activateMutation.mutate(selectedAgent.id);\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-3\">\n            <Store className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Agent Marketplace</h1>\n          </div>\n          <div className=\"flex gap-2\">\n            {marketplace.length === 0 && (\n              <Button \n                variant=\"outline\" \n                onClick={() => seedMutation.mutate()}\n                disabled={seedMutation.isPending}\n              >\n                {seedMutation.isPending ? \"Seeding...\" : \"Seed Default Agents\"}\n              </Button>\n            )}\n            <Button onClick={() => setIsRegistrationModalOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Register Agent\n            </Button>\n          </div>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Browse and activate AI agents to enhance your organization's capabilities\n        </p>\n      </div>\n\n      <div className=\"flex flex-wrap gap-4 mb-6\">\n        <div className=\"relative flex-1 min-w-[200px]\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search agents...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-agents\"\n          />\n        </div>\n        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n          <SelectTrigger className=\"w-[200px]\" data-testid=\"select-category\">\n            <SelectValue placeholder=\"Select category\" />\n          </SelectTrigger>\n          <SelectContent>\n            {CATEGORY_OPTIONS.map((option) => (\n              <SelectItem key={option.value} value={option.value}>\n                {option.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {isLoadingMarketplace ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"hover-elevate\">\n              <CardHeader>\n                <div className=\"h-6 bg-muted rounded animate-pulse\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                  <div className=\"h-4 bg-muted rounded animate-pulse w-2/3\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredAgents.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Store className=\"w-16 h-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No agents found</h3>\n            <p className=\"text-muted-foreground text-center max-w-md\">\n              {searchTerm || selectedCategory !== \"all\"\n                ? \"Try adjusting your filters to find more agents\"\n                : \"The agent marketplace is currently being populated with new agents\"}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredAgents.map((agent) => {\n            const active = isAgentActive(agent.id);\n            return (\n              <Card\n                key={agent.id}\n                className=\"hover-elevate cursor-pointer\"\n                onClick={() => handleAgentClick(agent)}\n                data-testid={`card-agent-${agent.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <span className=\"text-2xl\">{agent.icon}</span>\n                        <span data-testid={`text-agent-name-${agent.id}`}>{agent.name}</span>\n                      </CardTitle>\n                      <CardDescription className=\"mt-1\">{agent.description}</CardDescription>\n                    </div>\n                    {active && (\n                      <Badge variant=\"default\" className=\"shrink-0\" data-testid={`badge-active-${agent.id}`}>\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Active\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"secondary\">{agent.category}</Badge>\n                    {agent.price > 0 ? (\n                      <span className=\"text-sm font-semibold\">${agent.price}/mo</span>\n                    ) : (\n                      <span className=\"text-sm text-muted-foreground\">Free</span>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <AgentRegistrationForm\n        isOpen={isRegistrationModalOpen}\n        onClose={() => setIsRegistrationModalOpen(false)}\n      />\n\n      <Dialog open={isDetailModalOpen} onOpenChange={setIsDetailModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          {selectedAgent && (\n            <>\n              <DialogHeader>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-4xl\">{selectedAgent.icon}</span>\n                  <div>\n                    <DialogTitle className=\"text-2xl\" data-testid=\"text-modal-agent-name\">\n                      {selectedAgent.name}\n                    </DialogTitle>\n                    <DialogDescription>\n                      <Badge variant=\"secondary\" className=\"mt-1\">\n                        {selectedAgent.category}\n                      </Badge>\n                    </DialogDescription>\n                  </div>\n                </div>\n              </DialogHeader>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Description</h3>\n                  <p className=\"text-muted-foreground\">{selectedAgent.description}</p>\n                </div>\n\n                {selectedAgent.longDescription && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Detailed Information</h3>\n                    <p className=\"text-muted-foreground whitespace-pre-line\">\n                      {selectedAgent.longDescription}\n                    </p>\n                  </div>\n                )}\n\n                {selectedAgent.configSchema && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Configuration Options</h3>\n                    <div className=\"bg-muted p-4 rounded-md\">\n                      <pre className=\"text-xs overflow-x-auto\">\n                        {JSON.stringify(JSON.parse(selectedAgent.configSchema), null, 2)}\n                      </pre>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-4 border-t\">\n                  <div>\n                    {selectedAgent.price > 0 ? (\n                      <span className=\"text-lg font-bold\">${selectedAgent.price}/month</span>\n                    ) : (\n                      <span className=\"text-lg font-bold text-primary\">Free</span>\n                    )}\n                  </div>\n                  {isAgentActive(selectedAgent.id) && (\n                    <Badge variant=\"default\" data-testid=\"badge-already-active\">\n                      <CheckCircle className=\"w-4 h-4 mr-1\" />\n                      Already Active\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={() => setIsDetailModalOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                {!isAgentActive(selectedAgent.id) && (\n                  <Button\n                    onClick={handleActivate}\n                    disabled={activateMutation.isPending}\n                    data-testid=\"button-activate\"\n                  >\n                    {activateMutation.isPending ? \"Activating...\" : \"Activate Agent\"}\n                  </Button>\n                )}\n              </DialogFooter>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12738},"docs/REMAINING_TASKS.md":{"content":"\n# Remaining Development Tasks\n\n## Priority 1: Agent Shop & Discovery\n\n### Task 1.1: Create Agent Marketplace UI\n**File**: `client/src/pages/agent-shop.tsx`\n\n**Requirements**:\n- Grid layout with agent cards\n- Category filters (lead-generation, analytics, automation, etc.)\n- Search functionality\n- Agent detail modal showing:\n  - Long description\n  - Configuration options\n  - Sample use cases\n  - Pricing (if applicable)\n- \"Activate\" button for each agent\n- \"Already Active\" badge for activated agents\n\n**API Endpoints Needed**:\n```typescript\nGET /api/agents/marketplace  // List all available agents\nPOST /api/agents/:id/activate  // Activate agent for org\nGET /api/agents/active  // Get org's active agents\n```\n\n### Task 1.2: Add Agent Marketplace Route\n**File**: `client/src/App.tsx`\n\nAdd route for agent shop:\n```typescript\n<Route path=\"/agent-shop\" component={AgentShop} />\n```\n\nAdd navigation link in sidebar:\n```typescript\n// In app-sidebar.tsx\n<SidebarMenuItem>\n  <SidebarMenuButton asChild>\n    <Link to=\"/agent-shop\">\n      <Store className=\"mr-2 h-4 w-4\" />\n      Agent Shop\n    </Link>\n  </SidebarMenuButton>\n</SidebarMenuItem>\n```\n\n---\n\n## Priority 2: Active Agents Dashboard\n\n### Task 2.1: Enhance Modules Page\n**File**: `client/src/pages/modules.tsx`\n\n**Requirements**:\n- Show only activated agents for the organization\n- Real-time status indicators:\n  - 🟢 Idle (agent available)\n  - 🟡 Running (currently executing)\n  - 🔴 Error (last execution failed)\n  - ⚪ Unknown\n- Recent execution history (last 5 runs)\n- Quick action buttons:\n  - \"Run\" - Execute with test data\n  - \"Configure\" - Open settings modal\n  - \"View History\" - See all executions\n- Performance metrics card per agent:\n  - Total executions\n  - Success rate\n  - Average duration\n  - Last run timestamp\n\n### Task 2.2: Create Agent Status Component\n**File**: `client/src/components/agent-status.tsx`\n\n```typescript\ninterface AgentStatusProps {\n  agentId: string;\n  status: 'idle' | 'running' | 'error' | 'unknown';\n  lastRun?: string;\n}\n\nexport function AgentStatus({ agentId, status, lastRun }: AgentStatusProps) {\n  // Component implementation\n}\n```\n\n---\n\n## Priority 3: Agent-Specific Display Components\n\n### Task 3.1: Create Agent Display Folder\n**Location**: `client/src/components/agent-displays/`\n\n### Task 3.2: NLP Agent Display\n**File**: `client/src/components/agent-displays/NLPAgentDisplay.tsx`\n\n**Shows**:\n- Original text input\n- Processed/summarized output\n- Sentiment analysis (if available)\n- Key entities extracted\n- Confidence scores\n\n### Task 3.3: Data Agent Display\n**File**: `client/src/components/agent-displays/DataAgentDisplay.tsx`\n\n**Shows**:\n- Input data summary (rows, columns)\n- Transformation applied\n- Output data preview (table)\n- Statistics (before/after comparison)\n\n### Task 3.4: Lead Scoring Display\n**File**: `client/src/components/agent-displays/LeadScoringDisplay.tsx`\n\n**Shows**:\n- Lead score (0-100 with color coding)\n- Score breakdown by factor:\n  - Demographic score\n  - Behavioral score\n  - Engagement score\n- Recommended action (hot lead, nurture, cold)\n- Historical score trend\n\n### Task 3.5: Forecasting Display\n**File**: `client/src/components/agent-displays/ForecastingDisplay.tsx`\n\n**Shows**:\n- Line chart with historical data + forecast\n- Confidence intervals\n- Key metrics (predicted revenue, growth rate)\n- Scenario comparison (if available)\n\n### Task 3.6: Generic Agent Display\n**File**: `client/src/components/agent-displays/GenericAgentDisplay.tsx`\n\n**Shows**:\n- JSON viewer for any agent output\n- Fallback when specific display doesn't exist\n\n---\n\n## Priority 4: Agent Testing System\n\n### Task 4.1: Add Test Endpoint\n**File**: `server/routes.ts`\n\n```typescript\napp.post(\"/api/modules/:id/test\", requireAuth, async (req, res) => {\n  // Execute agent with test data\n  // Return results immediately\n});\n```\n\n### Task 4.2: Create Test Interface Component\n**File**: `client/src/components/agent-test-interface.tsx`\n\n**Requirements**:\n- Form to input test data (JSON editor)\n- Sample data templates per agent type\n- \"Run Test\" button\n- Loading state during execution\n- Result display using agent-specific component\n- Error handling with clear messages\n\n### Task 4.3: Add Test Modal to Modules Page\n**File**: `client/src/pages/modules.tsx`\n\nAdd \"Test\" button that opens modal with test interface.\n\n---\n\n## Priority 5: Agent Execution History\n\n### Task 5.1: Create Execution History Endpoint\n**File**: `server/routes.ts`\n\n```typescript\nGET /api/modules/:id/executions\n// Returns paginated list of executions\n// Filters: status, date range\n// Includes: input, output, duration, status, error\n```\n\n### Task 5.2: Create Execution History Page\n**File**: `client/src/pages/execution-history.tsx`\n\n**Shows**:\n- Table with all executions\n- Columns: Timestamp, Agent, Status, Duration, User\n- Expandable rows showing input/output\n- Filter by agent, status, date range\n- Export to CSV\n\n### Task 5.3: Add Agent Stats Endpoint\n**File**: `server/routes.ts`\n\n```typescript\nGET /api/modules/:id/stats\n// Returns: total_executions, success_rate, avg_duration,\n//          last_run, error_count, executions_by_day\n```\n\n---\n\n## Priority 6: Agent Configuration System\n\n### Task 6.1: Add Agent Config Storage\n**Database**: Add `agent_configs` table (or use existing `modules` table)\n\n```sql\n-- If needed, modify modules table to store config JSON\nALTER TABLE modules ADD COLUMN user_config TEXT;\n```\n\n### Task 6.2: Create Config Modal Component\n**File**: `client/src/components/agent-config-modal.tsx`\n\n**Features**:\n- Form fields based on agent's config schema\n- JSON editor for advanced users\n- Save/Cancel buttons\n- Validation before save\n\n### Task 6.3: Add Config Endpoints\n**File**: `server/routes.ts`\n\n```typescript\nGET /api/modules/:id/config  // Get current config\nPUT /api/modules/:id/config  // Update config\n```\n\n---\n\n## Priority 7: Workflow Builder (Future)\n\n### Task 7.1: Design Workflow Schema\n- Chain multiple agents\n- Pass output from one agent as input to next\n- Conditional branching\n- Error handling\n\n### Task 7.2: Create Visual Workflow Builder\n- Drag-and-drop interface\n- Agent nodes\n- Connection lines\n- Execution flow visualization\n\n### Task 7.3: Workflow Execution Engine\n- Backend service to execute workflows\n- Handle agent chaining\n- Track workflow state\n- Resume on failure\n\n---\n\n## Quick Win Tasks (Can Do Now)\n\n### Quick Win 1: Update Navigation\n**File**: `client/src/components/app-sidebar.tsx`\n\nAdd link to \"Agent Shop\" (even if page doesn't exist yet):\n```typescript\n<SidebarMenuButton asChild>\n  <Link to=\"/agent-shop\">\n    <Store className=\"mr-2 h-4 w-4\" />\n    Agent Shop\n  </Link>\n</SidebarMenuButton>\n```\n\n### Quick Win 2: Add Agent Category Badges\n**File**: `client/src/pages/agents.tsx`\n\nDisplay category badges on agent cards with color coding.\n\n### Quick Win 3: Add Execution Count to Dashboard\n**File**: `client/src/pages/dashboard.tsx`\n\nAdd new metric: \"Agent Executions (Today)\"\n\n### Quick Win 4: Create Empty State for Modules\n**File**: `client/src/pages/modules.tsx`\n\nIf no agents activated, show:\n- \"No Active Agents Yet\"\n- \"Browse Agent Shop\" button\n- Visual illustration\n\n---\n\n## Testing Checklist\n\nBefore marking tasks complete:\n\n- [ ] Feature works in development\n- [ ] Multi-tenant isolation verified\n- [ ] Error handling tested\n- [ ] Loading states implemented\n- [ ] Mobile responsive\n- [ ] API documented in `docs/API.md`\n- [ ] User permissions respected\n- [ ] No console errors\n- [ ] Works with sample data\n\n---\n\n## Estimated Time\n\n| Task | Priority | Estimated Hours |\n|------|----------|----------------|\n| Agent Shop UI | P1 | 8-12 hours |\n| Active Agents Dashboard | P2 | 6-8 hours |\n| Display Components | P3 | 10-15 hours |\n| Testing System | P4 | 6-8 hours |\n| Execution History | P5 | 4-6 hours |\n| Config System | P6 | 6-8 hours |\n| **Total** | | **40-57 hours** |\n\n---\n\n**Last Updated**: 2024\n","size_bytes":7874},"docs/AGENT_API_INTEGRATION.md":{"content":"\n# Agent API Integration Guide\n\nComplete guide for integrating external agents into the Abetworks platform via API.\n\n## Overview\n\nThe Abetworks platform allows you to register custom AI agents through our REST API and make them available in the marketplace for your organization.\n\n## Authentication\n\nAll API requests require a valid JWT token or API key.\n\n```bash\n# Using JWT Token\ncurl -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  https://your-replit-url.repl.co/api/agents/register\n\n# Using API Key\ncurl -H \"X-API-Key: YOUR_API_KEY\" \\\n  https://your-replit-url.repl.co/api/agents/register\n```\n\n## Registering an Agent\n\n### Endpoint\n\n```\nPOST /api/agents/register\n```\n\n### Required Headers\n\n```\nAuthorization: Bearer YOUR_JWT_TOKEN\nContent-Type: application/json\n```\n\n### Request Body\n\n| Field | Type | Required | Description |\n|-------|------|----------|-------------|\n| `id` | string | Yes | Unique identifier for the agent (e.g., \"custom-nlp-agent\") |\n| `name` | string | Yes | Display name of the agent |\n| `type` | string | Yes | Agent type identifier |\n| `description` | string | Yes | Short description (1-2 sentences) |\n| `category` | string | Yes | Category: `lead-generation`, `analytics`, `automation`, `communication`, `data-processing`, or `forecasting` |\n| `longDescription` | string | No | Detailed description with features and benefits |\n| `icon` | string | No | Emoji icon (default: 🤖) |\n| `backendEndpoint` | string | No | API endpoint for execution (default: `/api/agents/{id}`) |\n| `configSchema` | object | No | JSON schema for configuration options |\n| `price` | number | No | Monthly price in USD (default: 0) |\n\n### Example Request\n\n```bash\ncurl -X POST https://your-replit-url.repl.co/api/agents/register \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"sentiment-analyzer\",\n    \"name\": \"Advanced Sentiment Analyzer\",\n    \"type\": \"nlp-sentiment\",\n    \"description\": \"Analyze text sentiment with 95% accuracy using state-of-the-art NLP models\",\n    \"longDescription\": \"Our Advanced Sentiment Analyzer uses the latest transformer models to detect emotions, sentiment polarity, and key topics in text data. Perfect for analyzing customer feedback, social media posts, and review data.\",\n    \"icon\": \"😊\",\n    \"category\": \"analytics\",\n    \"backendEndpoint\": \"/api/agents/sentiment-analyzer\",\n    \"configSchema\": {\n      \"apiKey\": {\n        \"type\": \"string\",\n        \"required\": true,\n        \"description\": \"API key for sentiment analysis service\"\n      },\n      \"language\": {\n        \"type\": \"string\",\n        \"default\": \"en\",\n        \"description\": \"Language code (en, es, fr, etc.)\"\n      },\n      \"threshold\": {\n        \"type\": \"number\",\n        \"default\": 0.7,\n        \"min\": 0,\n        \"max\": 1,\n        \"description\": \"Minimum confidence threshold\"\n      }\n    },\n    \"price\": 29\n  }'\n```\n\n### Success Response (200)\n\n```json\n{\n  \"message\": \"Agent registered successfully\",\n  \"agent\": {\n    \"id\": \"sentiment-analyzer\",\n    \"name\": \"Advanced Sentiment Analyzer\",\n    \"type\": \"nlp-sentiment\",\n    \"description\": \"Analyze text sentiment with 95% accuracy...\",\n    \"longDescription\": \"Our Advanced Sentiment Analyzer uses...\",\n    \"icon\": \"😊\",\n    \"category\": \"analytics\",\n    \"backendEndpoint\": \"/api/agents/sentiment-analyzer\",\n    \"configSchema\": \"{\\\"apiKey\\\":...}\",\n    \"price\": 29,\n    \"isActive\": true\n  }\n}\n```\n\n### Error Response (400)\n\n```json\n{\n  \"message\": \"Missing required fields: id, name, type, description, category\"\n}\n```\n\n## Updating an Agent\n\n### Endpoint\n\n```\nPATCH /api/agents/catalog/:id\n```\n\n### Example Request\n\n```bash\ncurl -X PATCH https://your-replit-url.repl.co/api/agents/catalog/sentiment-analyzer \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"price\": 39,\n    \"description\": \"Updated description with new features\"\n  }'\n```\n\n## Deleting an Agent\n\n### Endpoint\n\n```\nDELETE /api/agents/catalog/:id\n```\n\n**Note:** This requires Super Admin role and will deactivate all subscriptions before deletion.\n\n### Example Request\n\n```bash\ncurl -X DELETE https://your-replit-url.repl.co/api/agents/catalog/sentiment-analyzer \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n```\n\n## Frontend Integration\n\n### Using the UI\n\n1. Navigate to the **Agent Marketplace** page\n2. Click the **Register Agent** button in the top-right\n3. Fill out the registration form with agent details\n4. Submit to add the agent to your catalog\n\n### Programmatic Integration\n\n```typescript\nimport { apiRequest } from \"@/lib/queryClient\";\n\nasync function registerAgent() {\n  const agent = {\n    id: \"my-custom-agent\",\n    name: \"My Custom Agent\",\n    type: \"custom-processor\",\n    description: \"Does amazing things\",\n    category: \"automation\",\n    price: 0\n  };\n\n  try {\n    const response = await apiRequest(\"POST\", \"/api/agents/register\", agent);\n    console.log(\"Agent registered:\", response);\n  } catch (error) {\n    console.error(\"Registration failed:\", error);\n  }\n}\n```\n\n## Implementing Agent Execution\n\nOnce registered, you need to implement the backend endpoint that executes your agent.\n\n### Python Agent Example\n\n```python\n# python-agents/agents/custom_agent.py\nfrom .base_agent import BaseAgent\nfrom typing import Any, Dict\n\nclass CustomAgent(BaseAgent):\n    \"\"\"Your custom agent implementation\"\"\"\n    \n    async def execute(self, input_data: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            # Your agent logic here\n            result = self.process_data(input_data)\n            \n            return {\n                \"success\": True,\n                \"output\": result\n            }\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n```\n\n### Register in FastAPI\n\n```python\n# python-agents/main.py\nfrom agents.custom_agent import CustomAgent\n\nMODULE_REGISTRY = {\n    \"custom_agent\": CustomAgent,\n    # ... other agents\n}\n```\n\n## Testing Your Agent\n\n### Via API\n\n```bash\ncurl -X POST https://your-replit-url.repl.co/api/modules/custom_agent/execute \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"inputData\": {\n      \"text\": \"Test input\",\n      \"options\": {}\n    }\n  }'\n```\n\n### Via Frontend\n\n1. Go to **Modules** page\n2. Find your agent\n3. Click **Test** button\n4. Enter sample input\n5. View results\n\n## Best Practices\n\n### Agent IDs\n- Use lowercase with hyphens: `my-agent-name`\n- Keep them short and descriptive\n- Never change IDs after registration\n\n### Descriptions\n- **Short**: 1-2 sentences, max 150 characters\n- **Long**: Include features, benefits, use cases\n- Use bullet points for readability\n\n### Configuration Schema\n- Provide clear descriptions for each field\n- Set sensible defaults\n- Include validation rules (min, max, required)\n\n### Pricing\n- Start at $0 for testing\n- Research competitor pricing\n- Consider value provided\n\n### Categories\nChoose the most appropriate category:\n- **lead-generation**: Capture and generate leads\n- **analytics**: Data analysis and insights\n- **automation**: Workflow automation\n- **communication**: Email, SMS, chat\n- **data-processing**: Transform and clean data\n- **forecasting**: Predictions and trends\n\n## Error Handling\n\n### Common Errors\n\n| Status | Error | Solution |\n|--------|-------|----------|\n| 400 | Missing required fields | Check all required fields are provided |\n| 400 | Agent already exists | Use a different ID or update existing |\n| 401 | Authentication required | Include valid JWT token |\n| 403 | Insufficient permissions | Contact admin for role upgrade |\n| 500 | Server error | Check logs, contact support |\n\n## Rate Limits\n\nCurrently no rate limits are enforced, but this may change in production.\n\n## Support\n\nFor questions or issues:\n- Check documentation: `/docs`\n- Review examples: `/docs/AGENT_DEVELOPMENT.md`\n- API reference: `/docs/API.md`\n\n## Changelog\n\n- **v1.0** - Initial agent registration API\n- Added frontend registration form\n- Added catalog management endpoints\n","size_bytes":8043},"client/src/components/agent-registration-form.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus } from \"lucide-react\";\n\ninterface AgentRegistrationFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst CATEGORIES = [\n  { value: \"lead-generation\", label: \"Lead Generation\" },\n  { value: \"analytics\", label: \"Analytics\" },\n  { value: \"automation\", label: \"Automation\" },\n  { value: \"communication\", label: \"Communication\" },\n  { value: \"data-processing\", label: \"Data Processing\" },\n  { value: \"forecasting\", label: \"Forecasting\" },\n];\n\nexport function AgentRegistrationForm({\n  isOpen,\n  onClose,\n}: AgentRegistrationFormProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    id: \"\",\n    name: \"\",\n    type: \"\",\n    description: \"\",\n    longDescription: \"\",\n    icon: \"🤖\",\n    category: \"\",\n    backendEndpoint: \"\",\n    configSchema: \"\",\n    price: 0,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const payload = {\n        ...data,\n        configSchema: data.configSchema ? JSON.parse(data.configSchema) : undefined,\n      };\n      return apiRequest(\"POST\", \"/api/agents/register\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents/marketplace\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/agent-catalog\"] });\n      toast({\n        title: \"Agent Registered\",\n        description: \"The agent has been successfully added to the catalog.\",\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      id: \"\",\n      name: \"\",\n      type: \"\",\n      description: \"\",\n      longDescription: \"\",\n      icon: \"🤖\",\n      category: \"\",\n      backendEndpoint: \"\",\n      configSchema: \"\",\n      price: 0,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate config schema if provided\n    if (formData.configSchema) {\n      try {\n        JSON.parse(formData.configSchema);\n      } catch {\n        toast({\n          variant: \"destructive\",\n          title: \"Invalid JSON\",\n          description: \"Configuration schema must be valid JSON\",\n        });\n        return;\n      }\n    }\n\n    registerMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Register New Agent</DialogTitle>\n          <DialogDescription>\n            Add a new AI agent to the marketplace catalog\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"id\">Agent ID *</Label>\n              <Input\n                id=\"id\"\n                value={formData.id}\n                onChange={(e) => setFormData({ ...formData, id: e.target.value })}\n                placeholder=\"e.g., custom-nlp-agent\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"name\">Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"e.g., Custom NLP Agent\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"type\">Type *</Label>\n              <Input\n                id=\"type\"\n                value={formData.type}\n                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                placeholder=\"e.g., nlp-processor\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Category *</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value) => setFormData({ ...formData, category: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CATEGORIES.map((cat) => (\n                    <SelectItem key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"icon\">Icon (emoji)</Label>\n              <Input\n                id=\"icon\"\n                value={formData.icon}\n                onChange={(e) => setFormData({ ...formData, icon: e.target.value })}\n                placeholder=\"🤖\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"price\">Price ($/month)</Label>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                value={formData.price}\n                onChange={(e) => setFormData({ ...formData, price: Number(e.target.value) })}\n                min=\"0\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Short Description *</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Brief description of what this agent does\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"longDescription\">Detailed Description</Label>\n            <Textarea\n              id=\"longDescription\"\n              value={formData.longDescription}\n              onChange={(e) => setFormData({ ...formData, longDescription: e.target.value })}\n              placeholder=\"Detailed description with features, benefits, etc.\"\n              className=\"min-h-[100px]\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"backendEndpoint\">Backend Endpoint</Label>\n            <Input\n              id=\"backendEndpoint\"\n              value={formData.backendEndpoint}\n              onChange={(e) => setFormData({ ...formData, backendEndpoint: e.target.value })}\n              placeholder=\"/api/agents/custom-nlp\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"configSchema\">Configuration Schema (JSON)</Label>\n            <Textarea\n              id=\"configSchema\"\n              value={formData.configSchema}\n              onChange={(e) => setFormData({ ...formData, configSchema: e.target.value })}\n              placeholder='{\"apiKey\": \"\", \"model\": \"gpt-4\"}'\n              className=\"font-mono text-sm\"\n            />\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={registerMutation.isPending}>\n              {registerMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Registering...\n                </>\n              ) : (\n                <>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Register Agent\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8354},"client/src/components/agent-status.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Loader2 } from \"lucide-react\";\n\nexport interface AgentStatusProps {\n  agentId: string;\n  status: \"idle\" | \"running\" | \"error\" | \"unknown\";\n  lastRun?: string;\n}\n\nexport function AgentStatus({ agentId, status, lastRun }: AgentStatusProps) {\n  const getStatusDisplay = () => {\n    switch (status) {\n      case \"idle\":\n        return {\n          badge: (\n            <Badge variant=\"secondary\" className=\"gap-1\" data-testid={`badge-status-${agentId}`}>\n              <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n              Idle\n            </Badge>\n          ),\n          color: \"text-green-600\",\n          bgColor: \"bg-green-50\",\n        };\n      case \"running\":\n        return {\n          badge: (\n            <Badge variant=\"secondary\" className=\"gap-1\" data-testid={`badge-status-${agentId}`}>\n              <Loader2 className=\"w-3 h-3 animate-spin\" />\n              Running\n            </Badge>\n          ),\n          color: \"text-yellow-600\",\n          bgColor: \"bg-yellow-50\",\n        };\n      case \"error\":\n        return {\n          badge: (\n            <Badge variant=\"destructive\" className=\"gap-1\" data-testid={`badge-status-${agentId}`}>\n              <div className=\"w-2 h-2 rounded-full bg-white\" />\n              Error\n            </Badge>\n          ),\n          color: \"text-red-600\",\n          bgColor: \"bg-red-50\",\n        };\n      default:\n        return {\n          badge: (\n            <Badge variant=\"outline\" className=\"gap-1\" data-testid={`badge-status-${agentId}`}>\n              <div className=\"w-2 h-2 rounded-full bg-gray-400\" />\n              Unknown\n            </Badge>\n          ),\n          color: \"text-gray-600\",\n          bgColor: \"bg-gray-50\",\n        };\n    }\n  };\n\n  const display = getStatusDisplay();\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      {display.badge}\n      {lastRun && (\n        <p className=\"text-xs text-muted-foreground\" data-testid={`text-last-run-${agentId}`}>\n          Last run: {new Date(lastRun).toLocaleString()}\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":2096},"client/src/components/agent-displays/DataAgentDisplay.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Database, TrendingUp, FileText } from \"lucide-react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\nexport interface DataAgentDisplayProps {\n  data: {\n    inputSummary?: {\n      rows: number;\n      columns: number;\n    };\n    transformationApplied?: string;\n    outputData?: Array<Record<string, any>>;\n    statistics?: {\n      before?: Record<string, any>;\n      after?: Record<string, any>;\n    };\n  };\n}\n\nexport function DataAgentDisplay({ data }: DataAgentDisplayProps) {\n  return (\n    <div className=\"space-y-4\">\n      {data.inputSummary && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Input Data Summary</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-sm text-muted-foreground\">Rows</div>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-input-rows\">\n                  {data.inputSummary.rows.toLocaleString()}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-sm text-muted-foreground\">Columns</div>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-input-columns\">\n                  {data.inputSummary.columns}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.transformationApplied && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Transformation Applied</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Badge variant=\"secondary\" data-testid=\"badge-transformation\">\n              {data.transformationApplied}\n            </Badge>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.outputData && data.outputData.length > 0 && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Output Data Preview</CardTitle>\n            </div>\n            <CardDescription>Showing first {Math.min(10, data.outputData.length)} rows</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    {Object.keys(data.outputData[0]).map((key) => (\n                      <TableHead key={key}>{key}</TableHead>\n                    ))}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {data.outputData.slice(0, 10).map((row, index) => (\n                    <TableRow key={index} data-testid={`row-${index}`}>\n                      {Object.values(row).map((value, cellIndex) => (\n                        <TableCell key={cellIndex}>{String(value)}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {data.statistics && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-primary\" />\n              <CardTitle>Statistics</CardTitle>\n            </div>\n            <CardDescription>Before and after comparison</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              {data.statistics.before && (\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Before</h4>\n                  <div className=\"space-y-1\">\n                    {Object.entries(data.statistics.before).map(([key, value]) => (\n                      <div key={key} className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">{key}:</span>\n                        <span className=\"font-medium\">{String(value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              {data.statistics.after && (\n                <div>\n                  <h4 className=\"font-semibold mb-2\">After</h4>\n                  <div className=\"space-y-1\">\n                    {Object.entries(data.statistics.after).map(([key, value]) => (\n                      <div key={key} className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">{key}:</span>\n                        <span className=\"font-medium\">{String(value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5255},"client/src/pages/execution-history.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Loader2, Eye, CheckCircle, XCircle, Clock, Filter } from \"lucide-react\";\nimport type { ModuleExecution } from \"@shared/schema\";\n\nexport default function ExecutionHistory() {\n  const [selectedExecution, setSelectedExecution] = useState<ModuleExecution | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: executions, isLoading } = useQuery<ModuleExecution[]>({\n    queryKey: [\"/api/module-executions\"],\n  });\n\n  const filteredExecutions = executions?.filter((exec) => {\n    const matchesStatus = statusFilter === \"all\" || exec.status === statusFilter;\n    const matchesSearch = searchTerm === \"\" || \n      exec.moduleId.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      case \"running\":\n        return <Loader2 className=\"w-4 h-4 text-blue-500 animate-spin\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"default\";\n      case \"failed\":\n        return \"destructive\";\n      case \"running\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-center py-32\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-semibold tracking-tight\">Execution History</h1>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          View all agent execution logs and results\n        </p>\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search by module ID...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"failed\">Failed</SelectItem>\n              <SelectItem value=\"running\">Running</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {!filteredExecutions || filteredExecutions.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Clock className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No execution history found</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Module</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Started</TableHead>\n                  <TableHead>Completed</TableHead>\n                  <TableHead>Duration</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredExecutions.map((execution) => {\n                  const duration = execution.completedAt && execution.createdAt\n                    ? Math.round(\n                        (new Date(execution.completedAt).getTime() -\n                          new Date(execution.createdAt).getTime()) / 1000\n                      )\n                    : null;\n\n                  return (\n                    <TableRow key={execution.id} data-testid={`row-execution-${execution.id}`}>\n                      <TableCell className=\"font-medium\">{execution.moduleId}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getStatusIcon(execution.status)}\n                          <Badge variant={getStatusVariant(execution.status)}>\n                            {execution.status}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(execution.createdAt).toLocaleString()}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {execution.completedAt\n                          ? new Date(execution.completedAt).toLocaleString()\n                          : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {duration ? `${duration}s` : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSelectedExecution(execution)}\n                          data-testid={`button-view-${execution.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </Card>\n\n      <Dialog open={!!selectedExecution} onOpenChange={() => setSelectedExecution(null)}>\n        <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Execution Details</DialogTitle>\n          </DialogHeader>\n          {selectedExecution && (\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Module ID</label>\n                <p className=\"text-sm text-muted-foreground\">{selectedExecution.moduleId}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Status</label>\n                <div className=\"mt-1\">\n                  <Badge variant={getStatusVariant(selectedExecution.status)}>\n                    {selectedExecution.status}\n                  </Badge>\n                </div>\n              </div>\n              {selectedExecution.input && (\n                <div>\n                  <label className=\"text-sm font-medium\">Input</label>\n                  <pre className=\"mt-1 bg-muted p-4 rounded-md overflow-x-auto text-xs\">\n                    {JSON.stringify(JSON.parse(selectedExecution.input), null, 2)}\n                  </pre>\n                </div>\n              )}\n              {selectedExecution.output && (\n                <div>\n                  <label className=\"text-sm font-medium\">Output</label>\n                  <pre className=\"mt-1 bg-muted p-4 rounded-md overflow-x-auto text-xs\">\n                    {JSON.stringify(JSON.parse(selectedExecution.output), null, 2)}\n                  </pre>\n                </div>\n              )}\n              {selectedExecution.error && (\n                <div>\n                  <label className=\"text-sm font-medium text-red-500\">Error</label>\n                  <p className=\"mt-1 text-sm text-red-500\">{selectedExecution.error}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":8871}},"version":2}